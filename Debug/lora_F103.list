
lora_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047a8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  080048b8  080048b8  000148b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051c4  080051c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080051cc  080051cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051cc  080051cc  000151cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080051d0  080051d0  000151d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080051d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000830  20000070  08005244  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08005244  000208a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b400  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ef  00000000  00000000  0002b499  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002d688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a10  00000000  00000000  0002e1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001865e  00000000  00000000  0002ebc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5a8  00000000  00000000  0004721e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086423  00000000  00000000  000557c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dbbe9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a8  00000000  00000000  000dbc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	080048a0 	.word	0x080048a0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	080048a0 	.word	0x080048a0

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_uldivmod>:
 8000164:	b953      	cbnz	r3, 800017c <__aeabi_uldivmod+0x18>
 8000166:	b94a      	cbnz	r2, 800017c <__aeabi_uldivmod+0x18>
 8000168:	2900      	cmp	r1, #0
 800016a:	bf08      	it	eq
 800016c:	2800      	cmpeq	r0, #0
 800016e:	bf1c      	itt	ne
 8000170:	f04f 31ff 	movne.w	r1, #4294967295
 8000174:	f04f 30ff 	movne.w	r0, #4294967295
 8000178:	f000 b976 	b.w	8000468 <__aeabi_idiv0>
 800017c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000180:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000184:	f000 f806 	bl	8000194 <__udivmoddi4>
 8000188:	f8dd e004 	ldr.w	lr, [sp, #4]
 800018c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000190:	b004      	add	sp, #16
 8000192:	4770      	bx	lr

08000194 <__udivmoddi4>:
 8000194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000198:	9e08      	ldr	r6, [sp, #32]
 800019a:	460d      	mov	r5, r1
 800019c:	4604      	mov	r4, r0
 800019e:	4688      	mov	r8, r1
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d14d      	bne.n	8000240 <__udivmoddi4+0xac>
 80001a4:	428a      	cmp	r2, r1
 80001a6:	4694      	mov	ip, r2
 80001a8:	d968      	bls.n	800027c <__udivmoddi4+0xe8>
 80001aa:	fab2 f282 	clz	r2, r2
 80001ae:	b152      	cbz	r2, 80001c6 <__udivmoddi4+0x32>
 80001b0:	fa01 f302 	lsl.w	r3, r1, r2
 80001b4:	f1c2 0120 	rsb	r1, r2, #32
 80001b8:	fa20 f101 	lsr.w	r1, r0, r1
 80001bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001c0:	ea41 0803 	orr.w	r8, r1, r3
 80001c4:	4094      	lsls	r4, r2
 80001c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001ca:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ce:	fa1f fe8c 	uxth.w	lr, ip
 80001d2:	fb01 8817 	mls	r8, r1, r7, r8
 80001d6:	fb07 f00e 	mul.w	r0, r7, lr
 80001da:	0c23      	lsrs	r3, r4, #16
 80001dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001e0:	4298      	cmp	r0, r3
 80001e2:	d90a      	bls.n	80001fa <__udivmoddi4+0x66>
 80001e4:	eb1c 0303 	adds.w	r3, ip, r3
 80001e8:	f107 35ff 	add.w	r5, r7, #4294967295
 80001ec:	f080 811e 	bcs.w	800042c <__udivmoddi4+0x298>
 80001f0:	4298      	cmp	r0, r3
 80001f2:	f240 811b 	bls.w	800042c <__udivmoddi4+0x298>
 80001f6:	3f02      	subs	r7, #2
 80001f8:	4463      	add	r3, ip
 80001fa:	1a1b      	subs	r3, r3, r0
 80001fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000200:	fb01 3310 	mls	r3, r1, r0, r3
 8000204:	fb00 fe0e 	mul.w	lr, r0, lr
 8000208:	b2a4      	uxth	r4, r4
 800020a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020e:	45a6      	cmp	lr, r4
 8000210:	d90a      	bls.n	8000228 <__udivmoddi4+0x94>
 8000212:	eb1c 0404 	adds.w	r4, ip, r4
 8000216:	f100 33ff 	add.w	r3, r0, #4294967295
 800021a:	f080 8109 	bcs.w	8000430 <__udivmoddi4+0x29c>
 800021e:	45a6      	cmp	lr, r4
 8000220:	f240 8106 	bls.w	8000430 <__udivmoddi4+0x29c>
 8000224:	4464      	add	r4, ip
 8000226:	3802      	subs	r0, #2
 8000228:	2100      	movs	r1, #0
 800022a:	eba4 040e 	sub.w	r4, r4, lr
 800022e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000232:	b11e      	cbz	r6, 800023c <__udivmoddi4+0xa8>
 8000234:	2300      	movs	r3, #0
 8000236:	40d4      	lsrs	r4, r2
 8000238:	e9c6 4300 	strd	r4, r3, [r6]
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	428b      	cmp	r3, r1
 8000242:	d908      	bls.n	8000256 <__udivmoddi4+0xc2>
 8000244:	2e00      	cmp	r6, #0
 8000246:	f000 80ee 	beq.w	8000426 <__udivmoddi4+0x292>
 800024a:	2100      	movs	r1, #0
 800024c:	e9c6 0500 	strd	r0, r5, [r6]
 8000250:	4608      	mov	r0, r1
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	fab3 f183 	clz	r1, r3
 800025a:	2900      	cmp	r1, #0
 800025c:	d14a      	bne.n	80002f4 <__udivmoddi4+0x160>
 800025e:	42ab      	cmp	r3, r5
 8000260:	d302      	bcc.n	8000268 <__udivmoddi4+0xd4>
 8000262:	4282      	cmp	r2, r0
 8000264:	f200 80fc 	bhi.w	8000460 <__udivmoddi4+0x2cc>
 8000268:	1a84      	subs	r4, r0, r2
 800026a:	eb65 0303 	sbc.w	r3, r5, r3
 800026e:	2001      	movs	r0, #1
 8000270:	4698      	mov	r8, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d0e2      	beq.n	800023c <__udivmoddi4+0xa8>
 8000276:	e9c6 4800 	strd	r4, r8, [r6]
 800027a:	e7df      	b.n	800023c <__udivmoddi4+0xa8>
 800027c:	b902      	cbnz	r2, 8000280 <__udivmoddi4+0xec>
 800027e:	deff      	udf	#255	; 0xff
 8000280:	fab2 f282 	clz	r2, r2
 8000284:	2a00      	cmp	r2, #0
 8000286:	f040 8091 	bne.w	80003ac <__udivmoddi4+0x218>
 800028a:	eba1 000c 	sub.w	r0, r1, ip
 800028e:	2101      	movs	r1, #1
 8000290:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	fbb0 f3f7 	udiv	r3, r0, r7
 800029c:	fb07 0013 	mls	r0, r7, r3, r0
 80002a0:	0c25      	lsrs	r5, r4, #16
 80002a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a6:	fb0e f003 	mul.w	r0, lr, r3
 80002aa:	42a8      	cmp	r0, r5
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x12c>
 80002ae:	eb1c 0505 	adds.w	r5, ip, r5
 80002b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x12a>
 80002b8:	42a8      	cmp	r0, r5
 80002ba:	f200 80ce 	bhi.w	800045a <__udivmoddi4+0x2c6>
 80002be:	4643      	mov	r3, r8
 80002c0:	1a2d      	subs	r5, r5, r0
 80002c2:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c6:	fb07 5510 	mls	r5, r7, r0, r5
 80002ca:	fb0e fe00 	mul.w	lr, lr, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x156>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x154>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 80b6 	bhi.w	8000454 <__udivmoddi4+0x2c0>
 80002e8:	4628      	mov	r0, r5
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002f2:	e79e      	b.n	8000232 <__udivmoddi4+0x9e>
 80002f4:	f1c1 0720 	rsb	r7, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000302:	fa25 fa07 	lsr.w	sl, r5, r7
 8000306:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800030a:	fbba f8f9 	udiv	r8, sl, r9
 800030e:	fa20 f307 	lsr.w	r3, r0, r7
 8000312:	fb09 aa18 	mls	sl, r9, r8, sl
 8000316:	408d      	lsls	r5, r1
 8000318:	fa1f fe8c 	uxth.w	lr, ip
 800031c:	431d      	orrs	r5, r3
 800031e:	fa00 f301 	lsl.w	r3, r0, r1
 8000322:	fb08 f00e 	mul.w	r0, r8, lr
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800032c:	42a0      	cmp	r0, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d90b      	bls.n	800034c <__udivmoddi4+0x1b8>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f108 3aff 	add.w	sl, r8, #4294967295
 800033c:	f080 8088 	bcs.w	8000450 <__udivmoddi4+0x2bc>
 8000340:	42a0      	cmp	r0, r4
 8000342:	f240 8085 	bls.w	8000450 <__udivmoddi4+0x2bc>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	4464      	add	r4, ip
 800034c:	1a24      	subs	r4, r4, r0
 800034e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000352:	fb09 4410 	mls	r4, r9, r0, r4
 8000356:	fb00 fe0e 	mul.w	lr, r0, lr
 800035a:	b2ad      	uxth	r5, r5
 800035c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1e2>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 35ff 	add.w	r5, r0, #4294967295
 800036c:	d26c      	bcs.n	8000448 <__udivmoddi4+0x2b4>
 800036e:	45a6      	cmp	lr, r4
 8000370:	d96a      	bls.n	8000448 <__udivmoddi4+0x2b4>
 8000372:	3802      	subs	r0, #2
 8000374:	4464      	add	r4, ip
 8000376:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800037a:	fba0 9502 	umull	r9, r5, r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	42ac      	cmp	r4, r5
 8000384:	46c8      	mov	r8, r9
 8000386:	46ae      	mov	lr, r5
 8000388:	d356      	bcc.n	8000438 <__udivmoddi4+0x2a4>
 800038a:	d053      	beq.n	8000434 <__udivmoddi4+0x2a0>
 800038c:	2e00      	cmp	r6, #0
 800038e:	d069      	beq.n	8000464 <__udivmoddi4+0x2d0>
 8000390:	ebb3 0208 	subs.w	r2, r3, r8
 8000394:	eb64 040e 	sbc.w	r4, r4, lr
 8000398:	fa22 f301 	lsr.w	r3, r2, r1
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	431f      	orrs	r7, r3
 80003a2:	40cc      	lsrs	r4, r1
 80003a4:	e9c6 7400 	strd	r7, r4, [r6]
 80003a8:	2100      	movs	r1, #0
 80003aa:	e747      	b.n	800023c <__udivmoddi4+0xa8>
 80003ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b0:	f1c2 0120 	rsb	r1, r2, #32
 80003b4:	fa25 f301 	lsr.w	r3, r5, r1
 80003b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003bc:	fa20 f101 	lsr.w	r1, r0, r1
 80003c0:	4095      	lsls	r5, r2
 80003c2:	430d      	orrs	r5, r1
 80003c4:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c8:	fb07 3311 	mls	r3, r7, r1, r3
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	0c28      	lsrs	r0, r5, #16
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	fb01 f30e 	mul.w	r3, r1, lr
 80003da:	4283      	cmp	r3, r0
 80003dc:	fa04 f402 	lsl.w	r4, r4, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x260>
 80003e2:	eb1c 0000 	adds.w	r0, ip, r0
 80003e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80003ea:	d22f      	bcs.n	800044c <__udivmoddi4+0x2b8>
 80003ec:	4283      	cmp	r3, r0
 80003ee:	d92d      	bls.n	800044c <__udivmoddi4+0x2b8>
 80003f0:	3902      	subs	r1, #2
 80003f2:	4460      	add	r0, ip
 80003f4:	1ac0      	subs	r0, r0, r3
 80003f6:	fbb0 f3f7 	udiv	r3, r0, r7
 80003fa:	fb07 0013 	mls	r0, r7, r3, r0
 80003fe:	b2ad      	uxth	r5, r5
 8000400:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000404:	fb03 f00e 	mul.w	r0, r3, lr
 8000408:	42a8      	cmp	r0, r5
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x28a>
 800040c:	eb1c 0505 	adds.w	r5, ip, r5
 8000410:	f103 38ff 	add.w	r8, r3, #4294967295
 8000414:	d216      	bcs.n	8000444 <__udivmoddi4+0x2b0>
 8000416:	42a8      	cmp	r0, r5
 8000418:	d914      	bls.n	8000444 <__udivmoddi4+0x2b0>
 800041a:	3b02      	subs	r3, #2
 800041c:	4465      	add	r5, ip
 800041e:	1a28      	subs	r0, r5, r0
 8000420:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000424:	e738      	b.n	8000298 <__udivmoddi4+0x104>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e707      	b.n	800023c <__udivmoddi4+0xa8>
 800042c:	462f      	mov	r7, r5
 800042e:	e6e4      	b.n	80001fa <__udivmoddi4+0x66>
 8000430:	4618      	mov	r0, r3
 8000432:	e6f9      	b.n	8000228 <__udivmoddi4+0x94>
 8000434:	454b      	cmp	r3, r9
 8000436:	d2a9      	bcs.n	800038c <__udivmoddi4+0x1f8>
 8000438:	ebb9 0802 	subs.w	r8, r9, r2
 800043c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000440:	3801      	subs	r0, #1
 8000442:	e7a3      	b.n	800038c <__udivmoddi4+0x1f8>
 8000444:	4643      	mov	r3, r8
 8000446:	e7ea      	b.n	800041e <__udivmoddi4+0x28a>
 8000448:	4628      	mov	r0, r5
 800044a:	e794      	b.n	8000376 <__udivmoddi4+0x1e2>
 800044c:	4641      	mov	r1, r8
 800044e:	e7d1      	b.n	80003f4 <__udivmoddi4+0x260>
 8000450:	46d0      	mov	r8, sl
 8000452:	e77b      	b.n	800034c <__udivmoddi4+0x1b8>
 8000454:	4464      	add	r4, ip
 8000456:	3802      	subs	r0, #2
 8000458:	e747      	b.n	80002ea <__udivmoddi4+0x156>
 800045a:	3b02      	subs	r3, #2
 800045c:	4465      	add	r5, ip
 800045e:	e72f      	b.n	80002c0 <__udivmoddi4+0x12c>
 8000460:	4608      	mov	r0, r1
 8000462:	e706      	b.n	8000272 <__udivmoddi4+0xde>
 8000464:	4631      	mov	r1, r6
 8000466:	e6e9      	b.n	800023c <__udivmoddi4+0xa8>

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b4a      	ldr	r3, [pc, #296]	; (80005ac <MX_GPIO_Init+0x140>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a49      	ldr	r2, [pc, #292]	; (80005ac <MX_GPIO_Init+0x140>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b47      	ldr	r3, [pc, #284]	; (80005ac <MX_GPIO_Init+0x140>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b44      	ldr	r3, [pc, #272]	; (80005ac <MX_GPIO_Init+0x140>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a43      	ldr	r2, [pc, #268]	; (80005ac <MX_GPIO_Init+0x140>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b41      	ldr	r3, [pc, #260]	; (80005ac <MX_GPIO_Init+0x140>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b3e      	ldr	r3, [pc, #248]	; (80005ac <MX_GPIO_Init+0x140>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a3d      	ldr	r2, [pc, #244]	; (80005ac <MX_GPIO_Init+0x140>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b3b      	ldr	r3, [pc, #236]	; (80005ac <MX_GPIO_Init+0x140>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0308 	and.w	r3, r3, #8
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	4838      	ldr	r0, [pc, #224]	; (80005b0 <MX_GPIO_Init+0x144>)
 80004d0:	f002 f837 	bl	8002542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f248 0120 	movw	r1, #32800	; 0x8020
 80004da:	4836      	ldr	r0, [pc, #216]	; (80005b4 <MX_GPIO_Init+0x148>)
 80004dc:	f002 f831 	bl	8002542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80004e6:	4834      	ldr	r0, [pc, #208]	; (80005b8 <MX_GPIO_Init+0x14c>)
 80004e8:	f002 f82b 	bl	8002542 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 80004ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	482a      	ldr	r0, [pc, #168]	; (80005b0 <MX_GPIO_Init+0x144>)
 8000506:	f001 fe81 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RIGHT_BUTTON_Pin|LEFT_BUTTON_Pin;
 800050a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <MX_GPIO_Init+0x150>)
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	4825      	ldr	r0, [pc, #148]	; (80005b4 <MX_GPIO_Init+0x148>)
 8000520:	f001 fe74 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RESET_Pin|RED_LED_Pin;
 8000524:	f248 0320 	movw	r3, #32800	; 0x8020
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	481d      	ldr	r0, [pc, #116]	; (80005b4 <MX_GPIO_Init+0x148>)
 800053e:	f001 fe65 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|BLUE_LED_Pin|GREEN_LED_Pin;
 8000542:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2302      	movs	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	4817      	ldr	r0, [pc, #92]	; (80005b8 <MX_GPIO_Init+0x14c>)
 800055c:	f001 fe56 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000560:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <MX_GPIO_Init+0x14c>)
 8000576:	f001 fe49 	bl	800220c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 800057a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800057e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000580:	2300      	movs	r3, #0
 8000582:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	4619      	mov	r1, r3
 800058e:	480a      	ldr	r0, [pc, #40]	; (80005b8 <MX_GPIO_Init+0x14c>)
 8000590:	f001 fe3c 	bl	800220c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	2028      	movs	r0, #40	; 0x28
 800059a:	f001 fe00 	bl	800219e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800059e:	2028      	movs	r0, #40	; 0x28
 80005a0:	f001 fe19 	bl	80021d6 <HAL_NVIC_EnableIRQ>

}
 80005a4:	bf00      	nop
 80005a6:	3720      	adds	r7, #32
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40021000 	.word	0x40021000
 80005b0:	40011000 	.word	0x40011000
 80005b4:	40010c00 	.word	0x40010c00
 80005b8:	40010800 	.word	0x40010800
 80005bc:	10110000 	.word	0x10110000

080005c0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005c4:	4b12      	ldr	r3, [pc, #72]	; (8000610 <MX_I2C1_Init+0x50>)
 80005c6:	4a13      	ldr	r2, [pc, #76]	; (8000614 <MX_I2C1_Init+0x54>)
 80005c8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005ca:	4b11      	ldr	r3, [pc, #68]	; (8000610 <MX_I2C1_Init+0x50>)
 80005cc:	4a12      	ldr	r2, [pc, #72]	; (8000618 <MX_I2C1_Init+0x58>)
 80005ce:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005d6:	4b0e      	ldr	r3, [pc, #56]	; (8000610 <MX_I2C1_Init+0x50>)
 80005d8:	2200      	movs	r2, #0
 80005da:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_I2C1_Init+0x50>)
 80005de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005e2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <MX_I2C1_Init+0x50>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	; (8000610 <MX_I2C1_Init+0x50>)
 80005fe:	f001 ffd1 	bl	80025a4 <HAL_I2C_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000608:	f000 fcb3 	bl	8000f72 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	2000008c 	.word	0x2000008c
 8000614:	40005400 	.word	0x40005400
 8000618:	000186a0 	.word	0x000186a0

0800061c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1d      	ldr	r2, [pc, #116]	; (80006ac <HAL_I2C_MspInit+0x90>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d132      	bne.n	80006a2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800063c:	4b1c      	ldr	r3, [pc, #112]	; (80006b0 <HAL_I2C_MspInit+0x94>)
 800063e:	699b      	ldr	r3, [r3, #24]
 8000640:	4a1b      	ldr	r2, [pc, #108]	; (80006b0 <HAL_I2C_MspInit+0x94>)
 8000642:	f043 0308 	orr.w	r3, r3, #8
 8000646:	6193      	str	r3, [r2, #24]
 8000648:	4b19      	ldr	r3, [pc, #100]	; (80006b0 <HAL_I2C_MspInit+0x94>)
 800064a:	699b      	ldr	r3, [r3, #24]
 800064c:	f003 0308 	and.w	r3, r3, #8
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000654:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800065a:	2312      	movs	r3, #18
 800065c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800065e:	2303      	movs	r3, #3
 8000660:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4812      	ldr	r0, [pc, #72]	; (80006b4 <HAL_I2C_MspInit+0x98>)
 800066a:	f001 fdcf 	bl	800220c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800066e:	4b12      	ldr	r3, [pc, #72]	; (80006b8 <HAL_I2C_MspInit+0x9c>)
 8000670:	685b      	ldr	r3, [r3, #4]
 8000672:	627b      	str	r3, [r7, #36]	; 0x24
 8000674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000676:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
 800067c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	627b      	str	r3, [r7, #36]	; 0x24
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <HAL_I2C_MspInit+0x9c>)
 8000686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000688:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <HAL_I2C_MspInit+0x94>)
 800068c:	69db      	ldr	r3, [r3, #28]
 800068e:	4a08      	ldr	r2, [pc, #32]	; (80006b0 <HAL_I2C_MspInit+0x94>)
 8000690:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000694:	61d3      	str	r3, [r2, #28]
 8000696:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_I2C_MspInit+0x94>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80006a2:	bf00      	nop
 80006a4:	3728      	adds	r7, #40	; 0x28
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	40005400 	.word	0x40005400
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010c00 	.word	0x40010c00
 80006b8:	40010000 	.word	0x40010000

080006bc <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	4603      	mov	r3, r0
 80006c4:	80fb      	strh	r3, [r7, #6]
	rightButtonPressed = (GPIO_Pin == RIGHT_BUTTON_Pin);
 80006c6:	88fb      	ldrh	r3, [r7, #6]
 80006c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006cc:	bf0c      	ite	eq
 80006ce:	2301      	moveq	r3, #1
 80006d0:	2300      	movne	r3, #0
 80006d2:	b2da      	uxtb	r2, r3
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <HAL_GPIO_EXTI_Callback+0x4c>)
 80006d6:	701a      	strb	r2, [r3, #0]
	leftButtonPressed = (GPIO_Pin == LEFT_BUTTON_Pin);
 80006d8:	88fb      	ldrh	r3, [r7, #6]
 80006da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80006de:	bf0c      	ite	eq
 80006e0:	2301      	moveq	r3, #1
 80006e2:	2300      	movne	r3, #0
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b09      	ldr	r3, [pc, #36]	; (800070c <HAL_GPIO_EXTI_Callback+0x50>)
 80006e8:	701a      	strb	r2, [r3, #0]
	newMsgCome = (GPIO_Pin == DIO0_Pin);
 80006ea:	88fb      	ldrh	r3, [r7, #6]
 80006ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80006f0:	bf0c      	ite	eq
 80006f2:	2301      	moveq	r3, #1
 80006f4:	2300      	movne	r3, #0
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <HAL_GPIO_EXTI_Callback+0x54>)
 80006fa:	701a      	strb	r2, [r3, #0]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	bc80      	pop	{r7}
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000421 	.word	0x20000421
 800070c:	20000420 	.word	0x20000420
 8000710:	20000422 	.word	0x20000422

08000714 <assembleAndPutTextIntoDisplay>:



void assembleAndPutTextIntoDisplay(_mode loraMode, char * txt1, char * txt2, char * txt3){
 8000714:	b580      	push	{r7, lr}
 8000716:	b088      	sub	sp, #32
 8000718:	af02      	add	r7, sp, #8
 800071a:	60b9      	str	r1, [r7, #8]
 800071c:	607a      	str	r2, [r7, #4]
 800071e:	603b      	str	r3, [r7, #0]
 8000720:	4603      	mov	r3, r0
 8000722:	73fb      	strb	r3, [r7, #15]

	ssd1306_Fill(Black);
 8000724:	2000      	movs	r0, #0
 8000726:	f001 fa49 	bl	8001bbc <ssd1306_Fill>

	uint8_t fontHeight = 10, lineNo, initX = 5, initY = 5;
 800072a:	230a      	movs	r3, #10
 800072c:	75fb      	strb	r3, [r7, #23]
 800072e:	2305      	movs	r3, #5
 8000730:	75bb      	strb	r3, [r7, #22]
 8000732:	2305      	movs	r3, #5
 8000734:	757b      	strb	r3, [r7, #21]

	lineNo = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 800073a:	7dfb      	ldrb	r3, [r7, #23]
 800073c:	3301      	adds	r3, #1
 800073e:	b2db      	uxtb	r3, r3
 8000740:	7d3a      	ldrb	r2, [r7, #20]
 8000742:	fb02 f303 	mul.w	r3, r2, r3
 8000746:	b2da      	uxtb	r2, r3
 8000748:	7d7b      	ldrb	r3, [r7, #21]
 800074a:	4413      	add	r3, r2
 800074c:	b2da      	uxtb	r2, r3
 800074e:	7dbb      	ldrb	r3, [r7, #22]
 8000750:	4611      	mov	r1, r2
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fb7c 	bl	8001e50 <ssd1306_SetCursor>
	if(loraMode == _TRANSMITER){
 8000758:	7bfb      	ldrb	r3, [r7, #15]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d107      	bne.n	800076e <assembleAndPutTextIntoDisplay+0x5a>
		ssd1306_WriteString("M: TRANSMITER", Font_7x10, White);
 800075e:	4b24      	ldr	r3, [pc, #144]	; (80007f0 <assembleAndPutTextIntoDisplay+0xdc>)
 8000760:	2201      	movs	r2, #1
 8000762:	9200      	str	r2, [sp, #0]
 8000764:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000766:	4823      	ldr	r0, [pc, #140]	; (80007f4 <assembleAndPutTextIntoDisplay+0xe0>)
 8000768:	f001 fb4c 	bl	8001e04 <ssd1306_WriteString>
 800076c:	e009      	b.n	8000782 <assembleAndPutTextIntoDisplay+0x6e>
	}
	else if(loraMode == _RECEIVER){
 800076e:	7bfb      	ldrb	r3, [r7, #15]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d106      	bne.n	8000782 <assembleAndPutTextIntoDisplay+0x6e>
		ssd1306_WriteString("M: RECEIVER", Font_7x10, White);
 8000774:	4b1e      	ldr	r3, [pc, #120]	; (80007f0 <assembleAndPutTextIntoDisplay+0xdc>)
 8000776:	2201      	movs	r2, #1
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800077c:	481e      	ldr	r0, [pc, #120]	; (80007f8 <assembleAndPutTextIntoDisplay+0xe4>)
 800077e:	f001 fb41 	bl	8001e04 <ssd1306_WriteString>
	}

	lineNo = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 8000786:	7dfb      	ldrb	r3, [r7, #23]
 8000788:	3301      	adds	r3, #1
 800078a:	b2db      	uxtb	r3, r3
 800078c:	7d3a      	ldrb	r2, [r7, #20]
 800078e:	fb02 f303 	mul.w	r3, r2, r3
 8000792:	b2da      	uxtb	r2, r3
 8000794:	7d7b      	ldrb	r3, [r7, #21]
 8000796:	4413      	add	r3, r2
 8000798:	b2da      	uxtb	r2, r3
 800079a:	7dbb      	ldrb	r3, [r7, #22]
 800079c:	4611      	mov	r1, r2
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fb56 	bl	8001e50 <ssd1306_SetCursor>
	ssd1306_WriteString(txt1, Font_7x10, White);
 80007a4:	4b12      	ldr	r3, [pc, #72]	; (80007f0 <assembleAndPutTextIntoDisplay+0xdc>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007ac:	68b8      	ldr	r0, [r7, #8]
 80007ae:	f001 fb29 	bl	8001e04 <ssd1306_WriteString>

	lineNo = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 80007b6:	7dfb      	ldrb	r3, [r7, #23]
 80007b8:	3301      	adds	r3, #1
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	7d3a      	ldrb	r2, [r7, #20]
 80007be:	fb02 f303 	mul.w	r3, r2, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	7d7b      	ldrb	r3, [r7, #21]
 80007c6:	4413      	add	r3, r2
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	7dbb      	ldrb	r3, [r7, #22]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fb3e 	bl	8001e50 <ssd1306_SetCursor>
	ssd1306_WriteString(txt2, Font_7x10, White);
 80007d4:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <assembleAndPutTextIntoDisplay+0xdc>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	9200      	str	r2, [sp, #0]
 80007da:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f001 fb11 	bl	8001e04 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80007e2:	f001 fa03 	bl	8001bec <ssd1306_UpdateScreen>
}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	08005170 	.word	0x08005170
 80007f4:	080048b8 	.word	0x080048b8
 80007f8:	080048c8 	.word	0x080048c8

080007fc <writeLineByLine>:

void writeLineByLine(char * txt, char * txt1, char * txt2, char * txt3){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af02      	add	r7, sp, #8
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	60b9      	str	r1, [r7, #8]
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	603b      	str	r3, [r7, #0]

	ssd1306_Fill(Black);
 800080a:	2000      	movs	r0, #0
 800080c:	f001 f9d6 	bl	8001bbc <ssd1306_Fill>

	uint8_t fontHeight = 10, lineNo, initX = 5, initY = 5;
 8000810:	230a      	movs	r3, #10
 8000812:	75fb      	strb	r3, [r7, #23]
 8000814:	2305      	movs	r3, #5
 8000816:	75bb      	strb	r3, [r7, #22]
 8000818:	2305      	movs	r3, #5
 800081a:	757b      	strb	r3, [r7, #21]

	lineNo = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 8000820:	7dfb      	ldrb	r3, [r7, #23]
 8000822:	3301      	adds	r3, #1
 8000824:	b2db      	uxtb	r3, r3
 8000826:	7d3a      	ldrb	r2, [r7, #20]
 8000828:	fb02 f303 	mul.w	r3, r2, r3
 800082c:	b2da      	uxtb	r2, r3
 800082e:	7d7b      	ldrb	r3, [r7, #21]
 8000830:	4413      	add	r3, r2
 8000832:	b2da      	uxtb	r2, r3
 8000834:	7dbb      	ldrb	r3, [r7, #22]
 8000836:	4611      	mov	r1, r2
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fb09 	bl	8001e50 <ssd1306_SetCursor>
	ssd1306_WriteString(txt, Font_7x10, White);
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <writeLineByLine+0xbc>)
 8000840:	2201      	movs	r2, #1
 8000842:	9200      	str	r2, [sp, #0]
 8000844:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f001 fadc 	bl	8001e04 <ssd1306_WriteString>

	lineNo = 1;
 800084c:	2301      	movs	r3, #1
 800084e:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 8000850:	7dfb      	ldrb	r3, [r7, #23]
 8000852:	3301      	adds	r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	7d3a      	ldrb	r2, [r7, #20]
 8000858:	fb02 f303 	mul.w	r3, r2, r3
 800085c:	b2da      	uxtb	r2, r3
 800085e:	7d7b      	ldrb	r3, [r7, #21]
 8000860:	4413      	add	r3, r2
 8000862:	b2da      	uxtb	r2, r3
 8000864:	7dbb      	ldrb	r3, [r7, #22]
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f001 faf1 	bl	8001e50 <ssd1306_SetCursor>
	ssd1306_WriteString(txt1, Font_7x10, White);
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <writeLineByLine+0xbc>)
 8000870:	2201      	movs	r2, #1
 8000872:	9200      	str	r2, [sp, #0]
 8000874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000876:	68b8      	ldr	r0, [r7, #8]
 8000878:	f001 fac4 	bl	8001e04 <ssd1306_WriteString>

	lineNo = 2;
 800087c:	2302      	movs	r3, #2
 800087e:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	3301      	adds	r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	7d3a      	ldrb	r2, [r7, #20]
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	b2da      	uxtb	r2, r3
 800088e:	7d7b      	ldrb	r3, [r7, #21]
 8000890:	4413      	add	r3, r2
 8000892:	b2da      	uxtb	r2, r3
 8000894:	7dbb      	ldrb	r3, [r7, #22]
 8000896:	4611      	mov	r1, r2
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fad9 	bl	8001e50 <ssd1306_SetCursor>
	ssd1306_WriteString(txt2, Font_7x10, White);
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <writeLineByLine+0xbc>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	9200      	str	r2, [sp, #0]
 80008a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008a6:	6878      	ldr	r0, [r7, #4]
 80008a8:	f001 faac 	bl	8001e04 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 80008ac:	f001 f99e 	bl	8001bec <ssd1306_UpdateScreen>
}
 80008b0:	bf00      	nop
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	08005170 	.word	0x08005170

080008bc <isButtonPressed>:

bool isButtonPressed(_button b){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	71fb      	strb	r3, [r7, #7]

	uint32_t debounceTime_ms = 50;
 80008c6:	2332      	movs	r3, #50	; 0x32
 80008c8:	60fb      	str	r3, [r7, #12]
	uint32_t pressingTime_ms = 100;
 80008ca:	2364      	movs	r3, #100	; 0x64
 80008cc:	60bb      	str	r3, [r7, #8]
	switch(b){
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d002      	beq.n	80008da <isButtonPressed+0x1e>
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d018      	beq.n	800090a <isButtonPressed+0x4e>
 80008d8:	e032      	b.n	8000940 <isButtonPressed+0x84>
	case _LEFT_BUTTON:
		if(HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin) == GPIO_PIN_SET){
 80008da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008de:	481b      	ldr	r0, [pc, #108]	; (800094c <isButtonPressed+0x90>)
 80008e0:	f001 fe18 	bl	8002514 <HAL_GPIO_ReadPin>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b01      	cmp	r3, #1
 80008e8:	d127      	bne.n	800093a <isButtonPressed+0x7e>
			HAL_Delay(debounceTime_ms);
 80008ea:	68f8      	ldr	r0, [r7, #12]
 80008ec:	f001 fb5c 	bl	8001fa8 <HAL_Delay>
			if(HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin) == GPIO_PIN_SET){
 80008f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008f4:	4815      	ldr	r0, [pc, #84]	; (800094c <isButtonPressed+0x90>)
 80008f6:	f001 fe0d 	bl	8002514 <HAL_GPIO_ReadPin>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	d11c      	bne.n	800093a <isButtonPressed+0x7e>
				HAL_Delay(pressingTime_ms);
 8000900:	68b8      	ldr	r0, [r7, #8]
 8000902:	f001 fb51 	bl	8001fa8 <HAL_Delay>
				return true;
 8000906:	2301      	movs	r3, #1
 8000908:	e01b      	b.n	8000942 <isButtonPressed+0x86>
			}
		}
		break;
	case _RIGHT_BUTTON:
		if(HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin) == GPIO_PIN_SET){
 800090a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800090e:	480f      	ldr	r0, [pc, #60]	; (800094c <isButtonPressed+0x90>)
 8000910:	f001 fe00 	bl	8002514 <HAL_GPIO_ReadPin>
 8000914:	4603      	mov	r3, r0
 8000916:	2b01      	cmp	r3, #1
 8000918:	d111      	bne.n	800093e <isButtonPressed+0x82>
			HAL_Delay(debounceTime_ms);
 800091a:	68f8      	ldr	r0, [r7, #12]
 800091c:	f001 fb44 	bl	8001fa8 <HAL_Delay>
			if(HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin) == GPIO_PIN_SET){
 8000920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000924:	4809      	ldr	r0, [pc, #36]	; (800094c <isButtonPressed+0x90>)
 8000926:	f001 fdf5 	bl	8002514 <HAL_GPIO_ReadPin>
 800092a:	4603      	mov	r3, r0
 800092c:	2b01      	cmp	r3, #1
 800092e:	d106      	bne.n	800093e <isButtonPressed+0x82>
				HAL_Delay(pressingTime_ms);
 8000930:	68b8      	ldr	r0, [r7, #8]
 8000932:	f001 fb39 	bl	8001fa8 <HAL_Delay>
				return true;
 8000936:	2301      	movs	r3, #1
 8000938:	e003      	b.n	8000942 <isButtonPressed+0x86>
		break;
 800093a:	bf00      	nop
 800093c:	e000      	b.n	8000940 <isButtonPressed+0x84>
			}
		}
		break;
 800093e:	bf00      	nop
	}
	return false;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40010c00 	.word	0x40010c00

08000950 <sendMsg_Basic>:

void sendMsg_Basic(char * msg){
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	if(!txInitialized){
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <sendMsg_Basic+0x7c>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	f083 0301 	eor.w	r3, r3, #1
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b00      	cmp	r3, #0
 8000964:	d00e      	beq.n	8000984 <sendMsg_Basic+0x34>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000966:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800096a:	2110      	movs	r1, #16
 800096c:	4818      	ldr	r0, [pc, #96]	; (80009d0 <sendMsg_Basic+0x80>)
 800096e:	f000 fee0 	bl	8001732 <SX1278_LoRaEntryTx>
 8000972:	4603      	mov	r3, r0
 8000974:	4a17      	ldr	r2, [pc, #92]	; (80009d4 <sendMsg_Basic+0x84>)
 8000976:	6013      	str	r3, [r2, #0]
		txInitialized = true;
 8000978:	4b14      	ldr	r3, [pc, #80]	; (80009cc <sendMsg_Basic+0x7c>)
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
		rxInitialized = false;
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <sendMsg_Basic+0x88>)
 8000980:	2200      	movs	r2, #0
 8000982:	701a      	strb	r2, [r3, #0]
	}

	message_length = sprintf(buffer, msg);
 8000984:	6879      	ldr	r1, [r7, #4]
 8000986:	4815      	ldr	r0, [pc, #84]	; (80009dc <sendMsg_Basic+0x8c>)
 8000988:	f003 fb1e 	bl	8003fc8 <siprintf>
 800098c:	4603      	mov	r3, r0
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <sendMsg_Basic+0x90>)
 8000990:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <sendMsg_Basic+0x90>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800099c:	4619      	mov	r1, r3
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <sendMsg_Basic+0x80>)
 80009a0:	f000 fec7 	bl	8001732 <SX1278_LoRaEntryTx>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a0b      	ldr	r2, [pc, #44]	; (80009d4 <sendMsg_Basic+0x84>)
 80009a8:	6013      	str	r3, [r2, #0]

	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <sendMsg_Basic+0x90>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009b4:	4909      	ldr	r1, [pc, #36]	; (80009dc <sendMsg_Basic+0x8c>)
 80009b6:	4806      	ldr	r0, [pc, #24]	; (80009d0 <sendMsg_Basic+0x80>)
 80009b8:	f000 ff13 	bl	80017e2 <SX1278_LoRaTxPacket>
 80009bc:	4603      	mov	r3, r0
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <sendMsg_Basic+0x84>)
 80009c0:	6013      	str	r3, [r2, #0]
			message_length, 2000);
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	20000423 	.word	0x20000423
 80009d0:	20000100 	.word	0x20000100
 80009d4:	20000218 	.word	0x20000218
 80009d8:	20000424 	.word	0x20000424
 80009dc:	2000021c 	.word	0x2000021c
 80009e0:	2000041c 	.word	0x2000041c

080009e4 <readMsg>:

bool readMsg(){
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	if(!rxInitialized){
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <readMsg+0x60>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	f083 0301 	eor.w	r3, r3, #1
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d00e      	beq.n	8000a14 <readMsg+0x30>
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 80009f6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009fa:	2110      	movs	r1, #16
 80009fc:	4812      	ldr	r0, [pc, #72]	; (8000a48 <readMsg+0x64>)
 80009fe:	f000 fdef 	bl	80015e0 <SX1278_LoRaEntryRx>
 8000a02:	4603      	mov	r3, r0
 8000a04:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <readMsg+0x68>)
 8000a06:	6013      	str	r3, [r2, #0]
		rxInitialized = true;
 8000a08:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <readMsg+0x60>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
		txInitialized = false;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <readMsg+0x6c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	701a      	strb	r2, [r3, #0]
	}

	ret = SX1278_LoRaRxPacket(&SX1278);
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <readMsg+0x64>)
 8000a16:	f000 fe48 	bl	80016aa <SX1278_LoRaRxPacket>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <readMsg+0x68>)
 8000a20:	601a      	str	r2, [r3, #0]
	if (ret > 0) {
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <readMsg+0x68>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	dd09      	ble.n	8000a3e <readMsg+0x5a>
		SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <readMsg+0x68>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	461a      	mov	r2, r3
 8000a32:	4908      	ldr	r1, [pc, #32]	; (8000a54 <readMsg+0x70>)
 8000a34:	4804      	ldr	r0, [pc, #16]	; (8000a48 <readMsg+0x64>)
 8000a36:	f000 ff40 	bl	80018ba <SX1278_read>
		return true;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	e000      	b.n	8000a40 <readMsg+0x5c>
	}
	return false;
 8000a3e:	2300      	movs	r3, #0
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	20000424 	.word	0x20000424
 8000a48:	20000100 	.word	0x20000100
 8000a4c:	20000218 	.word	0x20000218
 8000a50:	20000423 	.word	0x20000423
 8000a54:	2000021c 	.word	0x2000021c

08000a58 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a5e:	f001 fa41 	bl	8001ee4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a62:	f000 fa4b 	bl	8000efc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a66:	f7ff fd01 	bl	800046c <MX_GPIO_Init>
	MX_I2C1_Init();
 8000a6a:	f7ff fda9 	bl	80005c0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000a6e:	f000 fa85 	bl	8000f7c <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	_mode loraMode;
	_screen currentScreen = _MAIN;
 8000a72:	2300      	movs	r3, #0
 8000a74:	73bb      	strb	r3, [r7, #14]
	uint8_t option = 0, cmdNo = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	737b      	strb	r3, [r7, #13]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	71fb      	strb	r3, [r7, #7]
	bool newMsg = false;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	71bb      	strb	r3, [r7, #6]
	bool sendMsg = false;
 8000a82:	2300      	movs	r3, #0
 8000a84:	733b      	strb	r3, [r7, #12]

	ssd1306_Init();
 8000a86:	f001 f82f 	bl	8001ae8 <ssd1306_Init>

	ssd1306_Fill(Black);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f001 f896 	bl	8001bbc <ssd1306_Fill>

	ssd1306_SetCursor(45, 20);
 8000a90:	2114      	movs	r1, #20
 8000a92:	202d      	movs	r0, #45	; 0x2d
 8000a94:	f001 f9dc 	bl	8001e50 <ssd1306_SetCursor>
	ssd1306_WriteString("HELLO", Font_7x10, White);
 8000a98:	4ba9      	ldr	r3, [pc, #676]	; (8000d40 <main+0x2e8>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	9200      	str	r2, [sp, #0]
 8000a9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aa0:	48a8      	ldr	r0, [pc, #672]	; (8000d44 <main+0x2ec>)
 8000aa2:	f001 f9af 	bl	8001e04 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000aa6:	f001 f8a1 	bl	8001bec <ssd1306_UpdateScreen>

	if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_SET){
 8000aaa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aae:	48a6      	ldr	r0, [pc, #664]	; (8000d48 <main+0x2f0>)
 8000ab0:	f001 fd30 	bl	8002514 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b01      	cmp	r3, #1
 8000ab8:	d102      	bne.n	8000ac0 <main+0x68>
		loraMode = _TRANSMITER;
 8000aba:	2300      	movs	r3, #0
 8000abc:	73fb      	strb	r3, [r7, #15]
 8000abe:	e001      	b.n	8000ac4 <main+0x6c>
	}
	else{
		loraMode = _RECEIVER;
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	73fb      	strb	r3, [r7, #15]
	}

	uint32_t newMsgDispTime, currTime;
	newMsgDispTime = currTime = HAL_GetTick();
 8000ac4:	f001 fa66 	bl	8001f94 <HAL_GetTick>
 8000ac8:	6038      	str	r0, [r7, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	60bb      	str	r3, [r7, #8]

	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000ace:	4b9f      	ldr	r3, [pc, #636]	; (8000d4c <main+0x2f4>)
 8000ad0:	4a9d      	ldr	r2, [pc, #628]	; (8000d48 <main+0x2f0>)
 8000ad2:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000ad4:	4b9d      	ldr	r3, [pc, #628]	; (8000d4c <main+0x2f4>)
 8000ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ada:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000adc:	4b9b      	ldr	r3, [pc, #620]	; (8000d4c <main+0x2f4>)
 8000ade:	4a9a      	ldr	r2, [pc, #616]	; (8000d48 <main+0x2f0>)
 8000ae0:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000ae2:	4b9a      	ldr	r3, [pc, #616]	; (8000d4c <main+0x2f4>)
 8000ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ae8:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000aea:	4b98      	ldr	r3, [pc, #608]	; (8000d4c <main+0x2f4>)
 8000aec:	4a98      	ldr	r2, [pc, #608]	; (8000d50 <main+0x2f8>)
 8000aee:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8000af0:	4b96      	ldr	r3, [pc, #600]	; (8000d4c <main+0x2f4>)
 8000af2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000af6:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8000af8:	4b94      	ldr	r3, [pc, #592]	; (8000d4c <main+0x2f4>)
 8000afa:	4a96      	ldr	r2, [pc, #600]	; (8000d54 <main+0x2fc>)
 8000afc:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 8000afe:	4b96      	ldr	r3, [pc, #600]	; (8000d58 <main+0x300>)
 8000b00:	4a92      	ldr	r2, [pc, #584]	; (8000d4c <main+0x2f4>)
 8000b02:	601a      	str	r2, [r3, #0]

	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000b04:	230a      	movs	r3, #10
 8000b06:	9305      	str	r3, [sp, #20]
 8000b08:	2300      	movs	r3, #0
 8000b0a:	9304      	str	r3, [sp, #16]
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	9303      	str	r3, [sp, #12]
 8000b10:	2307      	movs	r3, #7
 8000b12:	9302      	str	r3, [sp, #8]
 8000b14:	2301      	movs	r3, #1
 8000b16:	9301      	str	r3, [sp, #4]
 8000b18:	2301      	movs	r3, #1
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	a386      	add	r3, pc, #536	; (adr r3, 8000d38 <main+0x2e0>)
 8000b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b22:	488d      	ldr	r0, [pc, #564]	; (8000d58 <main+0x300>)
 8000b24:	f000 fe9c 	bl	8001860 <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

	if (loraMode == _TRANSMITER) {
 8000b28:	7bfb      	ldrb	r3, [r7, #15]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10c      	bne.n	8000b48 <main+0xf0>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000b2e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b32:	2110      	movs	r1, #16
 8000b34:	4888      	ldr	r0, [pc, #544]	; (8000d58 <main+0x300>)
 8000b36:	f000 fdfc 	bl	8001732 <SX1278_LoRaEntryTx>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a87      	ldr	r2, [pc, #540]	; (8000d5c <main+0x304>)
 8000b3e:	6013      	str	r3, [r2, #0]
		txInitialized = true;
 8000b40:	4b87      	ldr	r3, [pc, #540]	; (8000d60 <main+0x308>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e00b      	b.n	8000b60 <main+0x108>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000b48:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000b4c:	2110      	movs	r1, #16
 8000b4e:	4882      	ldr	r0, [pc, #520]	; (8000d58 <main+0x300>)
 8000b50:	f000 fd46 	bl	80015e0 <SX1278_LoRaEntryRx>
 8000b54:	4603      	mov	r3, r0
 8000b56:	4a81      	ldr	r2, [pc, #516]	; (8000d5c <main+0x304>)
 8000b58:	6013      	str	r3, [r2, #0]
		rxInitialized = true;
 8000b5a:	4b82      	ldr	r3, [pc, #520]	; (8000d64 <main+0x30c>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8000b60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b64:	f001 fa20 	bl	8001fa8 <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		currTime = HAL_GetTick();
 8000b68:	f001 fa14 	bl	8001f94 <HAL_GetTick>
 8000b6c:	6038      	str	r0, [r7, #0]

		switch(loraMode){
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d02f      	beq.n	8000bd4 <main+0x17c>
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d148      	bne.n	8000c0a <main+0x1b2>

		case _RECEIVER:
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7e:	4872      	ldr	r0, [pc, #456]	; (8000d48 <main+0x2f0>)
 8000b80:	f001 fcdf 	bl	8002542 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8a:	486f      	ldr	r0, [pc, #444]	; (8000d48 <main+0x2f0>)
 8000b8c:	f001 fcd9 	bl	8002542 <HAL_GPIO_WritePin>

			if(readMsg()){
 8000b90:	f7ff ff28 	bl	80009e4 <readMsg>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d034      	beq.n	8000c04 <main+0x1ac>
				newMsgDispTime = HAL_GetTick();
 8000b9a:	f001 f9fb 	bl	8001f94 <HAL_GetTick>
 8000b9e:	60b8      	str	r0, [r7, #8]
				if(strcmp(buffer, "LED ON") == 0){
 8000ba0:	4971      	ldr	r1, [pc, #452]	; (8000d68 <main+0x310>)
 8000ba2:	4872      	ldr	r0, [pc, #456]	; (8000d6c <main+0x314>)
 8000ba4:	f7ff fad4 	bl	8000150 <strcmp>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d105      	bne.n	8000bba <main+0x162>
					HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000bae:	2201      	movs	r2, #1
 8000bb0:	2120      	movs	r1, #32
 8000bb2:	4867      	ldr	r0, [pc, #412]	; (8000d50 <main+0x2f8>)
 8000bb4:	f001 fcc5 	bl	8002542 <HAL_GPIO_WritePin>
				else if(strcmp(buffer, "LED OFF") == 0){
					HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
				}
			}

			break;
 8000bb8:	e024      	b.n	8000c04 <main+0x1ac>
				else if(strcmp(buffer, "LED OFF") == 0){
 8000bba:	496d      	ldr	r1, [pc, #436]	; (8000d70 <main+0x318>)
 8000bbc:	486b      	ldr	r0, [pc, #428]	; (8000d6c <main+0x314>)
 8000bbe:	f7ff fac7 	bl	8000150 <strcmp>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d11d      	bne.n	8000c04 <main+0x1ac>
					HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2120      	movs	r1, #32
 8000bcc:	4860      	ldr	r0, [pc, #384]	; (8000d50 <main+0x2f8>)
 8000bce:	f001 fcb8 	bl	8002542 <HAL_GPIO_WritePin>
			break;
 8000bd2:	e017      	b.n	8000c04 <main+0x1ac>

		case _TRANSMITER:
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bda:	485b      	ldr	r0, [pc, #364]	; (8000d48 <main+0x2f0>)
 8000bdc:	f001 fcb1 	bl	8002542 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be6:	4858      	ldr	r0, [pc, #352]	; (8000d48 <main+0x2f0>)
 8000be8:	f001 fcab 	bl	8002542 <HAL_GPIO_WritePin>

			if(sendMsg){
 8000bec:	7b3b      	ldrb	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d00a      	beq.n	8000c08 <main+0x1b0>
				sendMsg_Basic(buffer);
 8000bf2:	485e      	ldr	r0, [pc, #376]	; (8000d6c <main+0x314>)
 8000bf4:	f7ff feac 	bl	8000950 <sendMsg_Basic>
				sendMsg = false;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	733b      	strb	r3, [r7, #12]
				HAL_Delay(100);
 8000bfc:	2064      	movs	r0, #100	; 0x64
 8000bfe:	f001 f9d3 	bl	8001fa8 <HAL_Delay>
			}
			break;
 8000c02:	e001      	b.n	8000c08 <main+0x1b0>
			break;
 8000c04:	bf00      	nop
 8000c06:	e000      	b.n	8000c0a <main+0x1b2>
			break;
 8000c08:	bf00      	nop
		}


		switch(currentScreen){
 8000c0a:	7bbb      	ldrb	r3, [r7, #14]
 8000c0c:	2b04      	cmp	r3, #4
 8000c0e:	d8ab      	bhi.n	8000b68 <main+0x110>
 8000c10:	a201      	add	r2, pc, #4	; (adr r2, 8000c18 <main+0x1c0>)
 8000c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c16:	bf00      	nop
 8000c18:	08000c2d 	.word	0x08000c2d
 8000c1c:	08000d07 	.word	0x08000d07
 8000c20:	08000c67 	.word	0x08000c67
 8000c24:	08000de9 	.word	0x08000de9
 8000c28:	08000e9d 	.word	0x08000e9d
		case _MAIN:
			if(currTime - newMsgDispTime < 1000){
 8000c2c:	683a      	ldr	r2, [r7, #0]
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c36:	d206      	bcs.n	8000c46 <main+0x1ee>
				assembleAndPutTextIntoDisplay(loraMode, "New msg:", buffer, "");
 8000c38:	7bf8      	ldrb	r0, [r7, #15]
 8000c3a:	4b4e      	ldr	r3, [pc, #312]	; (8000d74 <main+0x31c>)
 8000c3c:	4a4b      	ldr	r2, [pc, #300]	; (8000d6c <main+0x314>)
 8000c3e:	494e      	ldr	r1, [pc, #312]	; (8000d78 <main+0x320>)
 8000c40:	f7ff fd68 	bl	8000714 <assembleAndPutTextIntoDisplay>
 8000c44:	e005      	b.n	8000c52 <main+0x1fa>
			}
			else{
				assembleAndPutTextIntoDisplay(loraMode, "","","");
 8000c46:	7bf8      	ldrb	r0, [r7, #15]
 8000c48:	4b4a      	ldr	r3, [pc, #296]	; (8000d74 <main+0x31c>)
 8000c4a:	4a4a      	ldr	r2, [pc, #296]	; (8000d74 <main+0x31c>)
 8000c4c:	4949      	ldr	r1, [pc, #292]	; (8000d74 <main+0x31c>)
 8000c4e:	f7ff fd61 	bl	8000714 <assembleAndPutTextIntoDisplay>
			}
			if(isButtonPressed(_LEFT_BUTTON)){
 8000c52:	2000      	movs	r0, #0
 8000c54:	f7ff fe32 	bl	80008bc <isButtonPressed>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 812b 	beq.w	8000eb6 <main+0x45e>
				currentScreen = _MENU;
 8000c60:	2302      	movs	r3, #2
 8000c62:	73bb      	strb	r3, [r7, #14]
			}
			break;
 8000c64:	e127      	b.n	8000eb6 <main+0x45e>

		case _MENU:
			if(option == 0){
 8000c66:	7b7b      	ldrb	r3, [r7, #13]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d110      	bne.n	8000c8e <main+0x236>
				writeLineByLine("->Select mode", "Send cmd", "Options", "");
 8000c6c:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <main+0x31c>)
 8000c6e:	4a43      	ldr	r2, [pc, #268]	; (8000d7c <main+0x324>)
 8000c70:	4943      	ldr	r1, [pc, #268]	; (8000d80 <main+0x328>)
 8000c72:	4844      	ldr	r0, [pc, #272]	; (8000d84 <main+0x32c>)
 8000c74:	f7ff fdc2 	bl	80007fc <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fe1f 	bl	80008bc <isButtonPressed>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d02b      	beq.n	8000cdc <main+0x284>
					currentScreen = _SELECT_MODE;
 8000c84:	2301      	movs	r3, #1
 8000c86:	73bb      	strb	r3, [r7, #14]
					option = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	737b      	strb	r3, [r7, #13]
 8000c8c:	e026      	b.n	8000cdc <main+0x284>
				}
			}
			else if(option == 1){
 8000c8e:	7b7b      	ldrb	r3, [r7, #13]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d110      	bne.n	8000cb6 <main+0x25e>
				writeLineByLine("Select mode", "->Send cmd", "Options", "");
 8000c94:	4b37      	ldr	r3, [pc, #220]	; (8000d74 <main+0x31c>)
 8000c96:	4a39      	ldr	r2, [pc, #228]	; (8000d7c <main+0x324>)
 8000c98:	493b      	ldr	r1, [pc, #236]	; (8000d88 <main+0x330>)
 8000c9a:	483c      	ldr	r0, [pc, #240]	; (8000d8c <main+0x334>)
 8000c9c:	f7ff fdae 	bl	80007fc <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f7ff fe0b 	bl	80008bc <isButtonPressed>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d017      	beq.n	8000cdc <main+0x284>
					currentScreen = _SEND_CMD;
 8000cac:	2303      	movs	r3, #3
 8000cae:	73bb      	strb	r3, [r7, #14]
					option = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	737b      	strb	r3, [r7, #13]
 8000cb4:	e012      	b.n	8000cdc <main+0x284>
				}
			}
			else if(option == 2){
 8000cb6:	7b7b      	ldrb	r3, [r7, #13]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d10f      	bne.n	8000cdc <main+0x284>
				writeLineByLine("Select mode", "Send cmd", "->Options", "");
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	; (8000d74 <main+0x31c>)
 8000cbe:	4a34      	ldr	r2, [pc, #208]	; (8000d90 <main+0x338>)
 8000cc0:	492f      	ldr	r1, [pc, #188]	; (8000d80 <main+0x328>)
 8000cc2:	4832      	ldr	r0, [pc, #200]	; (8000d8c <main+0x334>)
 8000cc4:	f7ff fd9a 	bl	80007fc <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff fdf7 	bl	80008bc <isButtonPressed>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <main+0x284>
					currentScreen = _OPTIONS;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	73bb      	strb	r3, [r7, #14]
					option = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	737b      	strb	r3, [r7, #13]
				}
			}

			if(isButtonPressed(_RIGHT_BUTTON)){
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff fded 	bl	80008bc <isButtonPressed>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80e8 	beq.w	8000eba <main+0x462>
				option = (option + 1)%3;
 8000cea:	7b7b      	ldrb	r3, [r7, #13]
 8000cec:	1c5a      	adds	r2, r3, #1
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <main+0x33c>)
 8000cf0:	fb83 3102 	smull	r3, r1, r3, r2
 8000cf4:	17d3      	asrs	r3, r2, #31
 8000cf6:	1ac9      	subs	r1, r1, r3
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	440b      	add	r3, r1
 8000cfe:	1ad1      	subs	r1, r2, r3
 8000d00:	460b      	mov	r3, r1
 8000d02:	737b      	strb	r3, [r7, #13]
			}
			break;
 8000d04:	e0d9      	b.n	8000eba <main+0x462>

		case _SELECT_MODE:
			if(option == 0){
 8000d06:	7b7b      	ldrb	r3, [r7, #13]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d149      	bne.n	8000da0 <main+0x348>
				writeLineByLine("->RECEIVER", "TRANSMITER", "", "");
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <main+0x31c>)
 8000d0e:	4a19      	ldr	r2, [pc, #100]	; (8000d74 <main+0x31c>)
 8000d10:	4921      	ldr	r1, [pc, #132]	; (8000d98 <main+0x340>)
 8000d12:	4822      	ldr	r0, [pc, #136]	; (8000d9c <main+0x344>)
 8000d14:	f7ff fd72 	bl	80007fc <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff fdcf 	bl	80008bc <isButtonPressed>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d052      	beq.n	8000dca <main+0x372>
					loraMode = _RECEIVER;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
					currentScreen = _MAIN;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73bb      	strb	r3, [r7, #14]
					option = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	737b      	strb	r3, [r7, #13]
 8000d30:	e04b      	b.n	8000dca <main+0x372>
 8000d32:	bf00      	nop
 8000d34:	f3af 8000 	nop.w
 8000d38:	19de5080 	.word	0x19de5080
 8000d3c:	00000000 	.word	0x00000000
 8000d40:	08005170 	.word	0x08005170
 8000d44:	080048d4 	.word	0x080048d4
 8000d48:	40010800 	.word	0x40010800
 8000d4c:	200000e0 	.word	0x200000e0
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	20000428 	.word	0x20000428
 8000d58:	20000100 	.word	0x20000100
 8000d5c:	20000218 	.word	0x20000218
 8000d60:	20000423 	.word	0x20000423
 8000d64:	20000424 	.word	0x20000424
 8000d68:	080048dc 	.word	0x080048dc
 8000d6c:	2000021c 	.word	0x2000021c
 8000d70:	080048e4 	.word	0x080048e4
 8000d74:	080048ec 	.word	0x080048ec
 8000d78:	080048f0 	.word	0x080048f0
 8000d7c:	080048fc 	.word	0x080048fc
 8000d80:	08004904 	.word	0x08004904
 8000d84:	08004910 	.word	0x08004910
 8000d88:	08004920 	.word	0x08004920
 8000d8c:	0800492c 	.word	0x0800492c
 8000d90:	08004938 	.word	0x08004938
 8000d94:	55555556 	.word	0x55555556
 8000d98:	08004944 	.word	0x08004944
 8000d9c:	08004950 	.word	0x08004950
				}
			}
			else if(option == 1){
 8000da0:	7b7b      	ldrb	r3, [r7, #13]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d111      	bne.n	8000dca <main+0x372>
				writeLineByLine("RECEIVER", "->TRANSMITER", "", "");
 8000da6:	4b48      	ldr	r3, [pc, #288]	; (8000ec8 <main+0x470>)
 8000da8:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <main+0x470>)
 8000daa:	4948      	ldr	r1, [pc, #288]	; (8000ecc <main+0x474>)
 8000dac:	4848      	ldr	r0, [pc, #288]	; (8000ed0 <main+0x478>)
 8000dae:	f7ff fd25 	bl	80007fc <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000db2:	2000      	movs	r0, #0
 8000db4:	f7ff fd82 	bl	80008bc <isButtonPressed>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d005      	beq.n	8000dca <main+0x372>
					loraMode = _TRANSMITER;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	73fb      	strb	r3, [r7, #15]
					currentScreen = _MAIN;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	73bb      	strb	r3, [r7, #14]
					option = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	737b      	strb	r3, [r7, #13]
				}
			}

			if(isButtonPressed(_RIGHT_BUTTON)){
 8000dca:	2001      	movs	r0, #1
 8000dcc:	f7ff fd76 	bl	80008bc <isButtonPressed>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d073      	beq.n	8000ebe <main+0x466>
				option = (option + 1)%2;
 8000dd6:	7b7b      	ldrb	r3, [r7, #13]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f003 0301 	and.w	r3, r3, #1
 8000de0:	bfb8      	it	lt
 8000de2:	425b      	neglt	r3, r3
 8000de4:	737b      	strb	r3, [r7, #13]
			}

			break;
 8000de6:	e06a      	b.n	8000ebe <main+0x466>

		case _SEND_CMD:
			if(option == 0){
 8000de8:	7b7b      	ldrb	r3, [r7, #13]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d122      	bne.n	8000e34 <main+0x3dc>
				writeLineByLine("->LED ON", "LED OFF", "", "");
 8000dee:	4b36      	ldr	r3, [pc, #216]	; (8000ec8 <main+0x470>)
 8000df0:	4a35      	ldr	r2, [pc, #212]	; (8000ec8 <main+0x470>)
 8000df2:	4938      	ldr	r1, [pc, #224]	; (8000ed4 <main+0x47c>)
 8000df4:	4838      	ldr	r0, [pc, #224]	; (8000ed8 <main+0x480>)
 8000df6:	f7ff fd01 	bl	80007fc <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	f7ff fd5e 	bl	80008bc <isButtonPressed>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d03b      	beq.n	8000e7e <main+0x426>
					sprintf(buffer, "LED ON");
 8000e06:	4935      	ldr	r1, [pc, #212]	; (8000edc <main+0x484>)
 8000e08:	4835      	ldr	r0, [pc, #212]	; (8000ee0 <main+0x488>)
 8000e0a:	f003 f8dd 	bl	8003fc8 <siprintf>
					sendMsg = true;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	733b      	strb	r3, [r7, #12]
					currentScreen = _MAIN;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73bb      	strb	r3, [r7, #14]
					option = 0;
 8000e16:	2300      	movs	r3, #0
 8000e18:	737b      	strb	r3, [r7, #13]

					writeLineByLine("", "Msg sent!", "(Perharps)", "");
 8000e1a:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <main+0x470>)
 8000e1c:	4a31      	ldr	r2, [pc, #196]	; (8000ee4 <main+0x48c>)
 8000e1e:	4932      	ldr	r1, [pc, #200]	; (8000ee8 <main+0x490>)
 8000e20:	4829      	ldr	r0, [pc, #164]	; (8000ec8 <main+0x470>)
 8000e22:	f7ff fceb 	bl	80007fc <writeLineByLine>
					HAL_Delay(1000);
 8000e26:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e2a:	f001 f8bd 	bl	8001fa8 <HAL_Delay>
					currentScreen = _MAIN;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	73bb      	strb	r3, [r7, #14]
 8000e32:	e024      	b.n	8000e7e <main+0x426>
				}
			}
			else if(option == 1){
 8000e34:	7b7b      	ldrb	r3, [r7, #13]
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d121      	bne.n	8000e7e <main+0x426>
				writeLineByLine("LED ON", "->LED OFF", "", "");
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <main+0x470>)
 8000e3c:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <main+0x470>)
 8000e3e:	492b      	ldr	r1, [pc, #172]	; (8000eec <main+0x494>)
 8000e40:	4826      	ldr	r0, [pc, #152]	; (8000edc <main+0x484>)
 8000e42:	f7ff fcdb 	bl	80007fc <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000e46:	2000      	movs	r0, #0
 8000e48:	f7ff fd38 	bl	80008bc <isButtonPressed>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d015      	beq.n	8000e7e <main+0x426>
					sprintf(buffer, "LED OFF");
 8000e52:	4920      	ldr	r1, [pc, #128]	; (8000ed4 <main+0x47c>)
 8000e54:	4822      	ldr	r0, [pc, #136]	; (8000ee0 <main+0x488>)
 8000e56:	f003 f8b7 	bl	8003fc8 <siprintf>
					sendMsg = true;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	733b      	strb	r3, [r7, #12]
					currentScreen = _MAIN;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73bb      	strb	r3, [r7, #14]
					option = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	737b      	strb	r3, [r7, #13]

					writeLineByLine("", "Msg sent!", "(Perharps)", "");
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <main+0x470>)
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <main+0x48c>)
 8000e6a:	491f      	ldr	r1, [pc, #124]	; (8000ee8 <main+0x490>)
 8000e6c:	4816      	ldr	r0, [pc, #88]	; (8000ec8 <main+0x470>)
 8000e6e:	f7ff fcc5 	bl	80007fc <writeLineByLine>
					HAL_Delay(1000);
 8000e72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e76:	f001 f897 	bl	8001fa8 <HAL_Delay>
					currentScreen = _MAIN;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	73bb      	strb	r3, [r7, #14]
				}
			}

			if(isButtonPressed(_RIGHT_BUTTON)){
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f7ff fd1c 	bl	80008bc <isButtonPressed>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d01b      	beq.n	8000ec2 <main+0x46a>
				option = (option + 1)%2;
 8000e8a:	7b7b      	ldrb	r3, [r7, #13]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	bfb8      	it	lt
 8000e96:	425b      	neglt	r3, r3
 8000e98:	737b      	strb	r3, [r7, #13]
			}
			break;
 8000e9a:	e012      	b.n	8000ec2 <main+0x46a>

		case _OPTIONS:
			writeLineByLine("Nothing is", "written here", "yet :)", "");
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ec8 <main+0x470>)
 8000e9e:	4a14      	ldr	r2, [pc, #80]	; (8000ef0 <main+0x498>)
 8000ea0:	4914      	ldr	r1, [pc, #80]	; (8000ef4 <main+0x49c>)
 8000ea2:	4815      	ldr	r0, [pc, #84]	; (8000ef8 <main+0x4a0>)
 8000ea4:	f7ff fcaa 	bl	80007fc <writeLineByLine>
			HAL_Delay(1000);
 8000ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000eac:	f001 f87c 	bl	8001fa8 <HAL_Delay>
			currentScreen = _MAIN;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	73bb      	strb	r3, [r7, #14]
			break;
 8000eb4:	e006      	b.n	8000ec4 <main+0x46c>
			break;
 8000eb6:	bf00      	nop
 8000eb8:	e656      	b.n	8000b68 <main+0x110>
			break;
 8000eba:	bf00      	nop
 8000ebc:	e654      	b.n	8000b68 <main+0x110>
			break;
 8000ebe:	bf00      	nop
 8000ec0:	e652      	b.n	8000b68 <main+0x110>
			break;
 8000ec2:	bf00      	nop
		currTime = HAL_GetTick();
 8000ec4:	e650      	b.n	8000b68 <main+0x110>
 8000ec6:	bf00      	nop
 8000ec8:	080048ec 	.word	0x080048ec
 8000ecc:	0800495c 	.word	0x0800495c
 8000ed0:	0800496c 	.word	0x0800496c
 8000ed4:	080048e4 	.word	0x080048e4
 8000ed8:	08004978 	.word	0x08004978
 8000edc:	080048dc 	.word	0x080048dc
 8000ee0:	2000021c 	.word	0x2000021c
 8000ee4:	08004984 	.word	0x08004984
 8000ee8:	08004990 	.word	0x08004990
 8000eec:	0800499c 	.word	0x0800499c
 8000ef0:	080049a8 	.word	0x080049a8
 8000ef4:	080049b0 	.word	0x080049b0
 8000ef8:	080049c0 	.word	0x080049c0

08000efc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b090      	sub	sp, #64	; 0x40
 8000f00:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f02:	f107 0318 	add.w	r3, r7, #24
 8000f06:	2228      	movs	r2, #40	; 0x28
 8000f08:	2100      	movs	r1, #0
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f003 f854 	bl	8003fb8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f10:	1d3b      	adds	r3, r7, #4
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
 8000f1c:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f22:	2301      	movs	r3, #1
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f26:	2310      	movs	r3, #16
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	4618      	mov	r0, r3
 8000f34:	f001 ffe2 	bl	8002efc <HAL_RCC_OscConfig>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000f3e:	f000 f818 	bl	8000f72 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f42:	230f      	movs	r3, #15
 8000f44:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 fa50 	bl	8003400 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000f66:	f000 f804 	bl	8000f72 <Error_Handler>
	}
}
 8000f6a:	bf00      	nop
 8000f6c:	3740      	adds	r7, #64	; 0x40
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f76:	b672      	cpsid	i
}
 8000f78:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000f7a:	e7fe      	b.n	8000f7a <Error_Handler+0x8>

08000f7c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f80:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f82:	4a18      	ldr	r2, [pc, #96]	; (8000fe4 <MX_SPI1_Init+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f86:	4b16      	ldr	r3, [pc, #88]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fae:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fb4:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fba:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fc0:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fc8:	220a      	movs	r2, #10
 8000fca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fcc:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_SPI1_Init+0x64>)
 8000fce:	f002 fb91 	bl	80036f4 <HAL_SPI_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fd8:	f7ff ffcb 	bl	8000f72 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	20000428 	.word	0x20000428
 8000fe4:	40013000 	.word	0x40013000

08000fe8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0310 	add.w	r3, r7, #16
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <HAL_SPI_MspInit+0x88>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d12f      	bne.n	8001068 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_SPI_MspInit+0x8c>)
 800100a:	699b      	ldr	r3, [r3, #24]
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_SPI_MspInit+0x8c>)
 800100e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001012:	6193      	str	r3, [r2, #24]
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_SPI_MspInit+0x8c>)
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_SPI_MspInit+0x8c>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a13      	ldr	r2, [pc, #76]	; (8001074 <HAL_SPI_MspInit+0x8c>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_SPI_MspInit+0x8c>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0304 	and.w	r3, r3, #4
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001038:	23a0      	movs	r3, #160	; 0xa0
 800103a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f107 0310 	add.w	r3, r7, #16
 8001048:	4619      	mov	r1, r3
 800104a:	480b      	ldr	r0, [pc, #44]	; (8001078 <HAL_SPI_MspInit+0x90>)
 800104c:	f001 f8de 	bl	800220c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001050:	2340      	movs	r3, #64	; 0x40
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_SPI_MspInit+0x90>)
 8001064:	f001 f8d2 	bl	800220c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001068:	bf00      	nop
 800106a:	3720      	adds	r7, #32
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40013000 	.word	0x40013000
 8001074:	40021000 	.word	0x40021000
 8001078:	40010800 	.word	0x40010800

0800107c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_MspInit+0x40>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <HAL_MspInit+0x40>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6193      	str	r3, [r2, #24]
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_MspInit+0x40>)
 8001090:	699b      	ldr	r3, [r3, #24]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_MspInit+0x40>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	4a07      	ldr	r2, [pc, #28]	; (80010bc <HAL_MspInit+0x40>)
 80010a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a4:	61d3      	str	r3, [r2, #28]
 80010a6:	4b05      	ldr	r3, [pc, #20]	; (80010bc <HAL_MspInit+0x40>)
 80010a8:	69db      	ldr	r3, [r3, #28]
 80010aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr
 80010bc:	40021000 	.word	0x40021000

080010c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c4:	e7fe      	b.n	80010c4 <NMI_Handler+0x4>

080010c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler+0x4>

080010cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <MemManage_Handler+0x4>

080010d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <BusFault_Handler+0x4>

080010d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <UsageFault_Handler+0x4>

080010de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bc80      	pop	{r7}
 8001100:	4770      	bx	lr

08001102 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001106:	f000 ff33 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}

0800110e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RIGHT_BUTTON_Pin);
 8001112:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001116:	f001 fa2d 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LEFT_BUTTON_Pin);
 800111a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800111e:	f001 fa29 	bl	8002574 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
	...

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f002 fef6 	bl	8003f48 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20005000 	.word	0x20005000
 8001188:	00000400 	.word	0x00000400
 800118c:	20000480 	.word	0x20000480
 8001190:	200008a0 	.word	0x200008a0

08001194 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	bc80      	pop	{r7}
 800119e:	4770      	bx	lr

080011a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a0:	f7ff fff8 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011a4:	480b      	ldr	r0, [pc, #44]	; (80011d4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011a6:	490c      	ldr	r1, [pc, #48]	; (80011d8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011a8:	4a0c      	ldr	r2, [pc, #48]	; (80011dc <LoopFillZerobss+0x16>)
  movs r3, #0
 80011aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011ac:	e002      	b.n	80011b4 <LoopCopyDataInit>

080011ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b2:	3304      	adds	r3, #4

080011b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011b8:	d3f9      	bcc.n	80011ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ba:	4a09      	ldr	r2, [pc, #36]	; (80011e0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011bc:	4c09      	ldr	r4, [pc, #36]	; (80011e4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c0:	e001      	b.n	80011c6 <LoopFillZerobss>

080011c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c4:	3204      	adds	r2, #4

080011c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011c8:	d3fb      	bcc.n	80011c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ca:	f002 fec3 	bl	8003f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ce:	f7ff fc43 	bl	8000a58 <main>
  bx lr
 80011d2:	4770      	bx	lr
  ldr r0, =_sdata
 80011d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011d8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011dc:	080051d4 	.word	0x080051d4
  ldr r2, =_sbss
 80011e0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011e4:	200008a0 	.word	0x200008a0

080011e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011e8:	e7fe      	b.n	80011e8 <ADC1_2_IRQHandler>

080011ea <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b084      	sub	sp, #16
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	78fa      	ldrb	r2, [r7, #3]
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 fbd1 	bl	80019a6 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f000 fbec 	bl	80019e6 <SX1278_hw_SPIReadByte>
 800120e:	4603      	mov	r3, r0
 8001210:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2101      	movs	r1, #1
 8001218:	4618      	mov	r0, r3
 800121a:	f000 fb89 	bl	8001930 <SX1278_hw_SetNSS>
	return tmp;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001220:	4618      	mov	r0, r3
 8001222:	3710      	adds	r7, #16
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
 8001234:	4613      	mov	r3, r2
 8001236:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f000 fb76 	bl	8001930 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4619      	mov	r1, r3
 8001252:	4610      	mov	r0, r2
 8001254:	f000 fba7 	bl	80019a6 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	78ba      	ldrb	r2, [r7, #2]
 800125e:	4611      	mov	r1, r2
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fba0 	bl	80019a6 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2101      	movs	r1, #1
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fb5f 	bl	8001930 <SX1278_hw_SetNSS>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800127a:	b590      	push	{r4, r7, lr}
 800127c:	b087      	sub	sp, #28
 800127e:	af00      	add	r7, sp, #0
 8001280:	60f8      	str	r0, [r7, #12]
 8001282:	607a      	str	r2, [r7, #4]
 8001284:	461a      	mov	r2, r3
 8001286:	460b      	mov	r3, r1
 8001288:	72fb      	strb	r3, [r7, #11]
 800128a:	4613      	mov	r3, r2
 800128c:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 800128e:	7abb      	ldrb	r3, [r7, #10]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d927      	bls.n	80012e4 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f000 fb48 	bl	8001930 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	7afa      	ldrb	r2, [r7, #11]
 80012a6:	4611      	mov	r1, r2
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fb7c 	bl	80019a6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	e00c      	b.n	80012ce <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6819      	ldr	r1, [r3, #0]
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	18d4      	adds	r4, r2, r3
 80012be:	4608      	mov	r0, r1
 80012c0:	f000 fb91 	bl	80019e6 <SX1278_hw_SPIReadByte>
 80012c4:	4603      	mov	r3, r0
 80012c6:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80012c8:	7dfb      	ldrb	r3, [r7, #23]
 80012ca:	3301      	adds	r3, #1
 80012cc:	75fb      	strb	r3, [r7, #23]
 80012ce:	7dfa      	ldrb	r2, [r7, #23]
 80012d0:	7abb      	ldrb	r3, [r7, #10]
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d3ee      	bcc.n	80012b4 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 fb27 	bl	8001930 <SX1278_hw_SetNSS>
 80012e2:	e000      	b.n	80012e6 <SX1278_SPIBurstRead+0x6c>
		return;
 80012e4:	bf00      	nop
	}
}
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}

080012ec <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	461a      	mov	r2, r3
 80012f8:	460b      	mov	r3, r1
 80012fa:	72fb      	strb	r3, [r7, #11]
 80012fc:	4613      	mov	r3, r2
 80012fe:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001300:	7abb      	ldrb	r3, [r7, #10]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d929      	bls.n	800135a <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2100      	movs	r1, #0
 800130c:	4618      	mov	r0, r3
 800130e:	f000 fb0f 	bl	8001930 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	7afb      	ldrb	r3, [r7, #11]
 8001318:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800131c:	b2db      	uxtb	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	4610      	mov	r0, r2
 8001322:	f000 fb40 	bl	80019a6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001326:	2300      	movs	r3, #0
 8001328:	75fb      	strb	r3, [r7, #23]
 800132a:	e00b      	b.n	8001344 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6818      	ldr	r0, [r3, #0]
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	4619      	mov	r1, r3
 800133a:	f000 fb34 	bl	80019a6 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	3301      	adds	r3, #1
 8001342:	75fb      	strb	r3, [r7, #23]
 8001344:	7dfa      	ldrb	r2, [r7, #23]
 8001346:	7abb      	ldrb	r3, [r7, #10]
 8001348:	429a      	cmp	r2, r3
 800134a:	d3ef      	bcc.n	800132c <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2101      	movs	r1, #1
 8001352:	4618      	mov	r0, r3
 8001354:	f000 faec 	bl	8001930 <SX1278_hw_SetNSS>
 8001358:	e000      	b.n	800135c <SX1278_SPIBurstWrite+0x70>
		return;
 800135a:	bf00      	nop
	}
}
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f90d 	bl	800158c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001372:	200f      	movs	r0, #15
 8001374:	f000 fb5d 	bl	8001a32 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f917 	bl	80015ac <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001384:	f04f 0000 	mov.w	r0, #0
 8001388:	f04f 0100 	mov.w	r1, #0
 800138c:	04d9      	lsls	r1, r3, #19
 800138e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8001392:	04d0      	lsls	r0, r2, #19
 8001394:	4a6f      	ldr	r2, [pc, #444]	; (8001554 <SX1278_config+0x1f0>)
 8001396:	f04f 0300 	mov.w	r3, #0
 800139a:	f7fe fee3 	bl	8000164 <__aeabi_uldivmod>
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80013a6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	0c02      	lsrs	r2, r0, #16
 80013b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013b8:	0c0b      	lsrs	r3, r1, #16
 80013ba:	b2d3      	uxtb	r3, r2
 80013bc:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80013be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	0a02      	lsrs	r2, r0, #8
 80013cc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013d0:	0a0b      	lsrs	r3, r1, #8
 80013d2:	b2d3      	uxtb	r3, r2
 80013d4:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80013d6:	7c3b      	ldrb	r3, [r7, #16]
 80013d8:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80013da:	f107 020c 	add.w	r2, r7, #12
 80013de:	2303      	movs	r3, #3
 80013e0:	2106      	movs	r1, #6
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff82 	bl	80012ec <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80013e8:	2234      	movs	r2, #52	; 0x34
 80013ea:	2139      	movs	r1, #57	; 0x39
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f7ff ff1b 	bl	8001228 <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	7c1b      	ldrb	r3, [r3, #16]
 80013f6:	461a      	mov	r2, r3
 80013f8:	4b57      	ldr	r3, [pc, #348]	; (8001558 <SX1278_config+0x1f4>)
 80013fa:	5c9b      	ldrb	r3, [r3, r2]
 80013fc:	461a      	mov	r2, r3
 80013fe:	2109      	movs	r1, #9
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff ff11 	bl	8001228 <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8001406:	220b      	movs	r2, #11
 8001408:	210b      	movs	r1, #11
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff ff0c 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001410:	2223      	movs	r2, #35	; 0x23
 8001412:	210c      	movs	r1, #12
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff07 	bl	8001228 <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7c5b      	ldrb	r3, [r3, #17]
 800141e:	461a      	mov	r2, r3
 8001420:	4b4e      	ldr	r3, [pc, #312]	; (800155c <SX1278_config+0x1f8>)
 8001422:	5c9b      	ldrb	r3, [r3, r2]
 8001424:	2b06      	cmp	r3, #6
 8001426:	d147      	bne.n	80014b8 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	7c9b      	ldrb	r3, [r3, #18]
 800142c:	461a      	mov	r2, r3
 800142e:	4b4c      	ldr	r3, [pc, #304]	; (8001560 <SX1278_config+0x1fc>)
 8001430:	5c9b      	ldrb	r3, [r3, r2]
 8001432:	011b      	lsls	r3, r3, #4
 8001434:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7cdb      	ldrb	r3, [r3, #19]
 800143a:	4619      	mov	r1, r3
 800143c:	4b49      	ldr	r3, [pc, #292]	; (8001564 <SX1278_config+0x200>)
 800143e:	5c5b      	ldrb	r3, [r3, r1]
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	b2db      	uxtb	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001448:	3301      	adds	r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	211d      	movs	r1, #29
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f7ff fee9 	bl	8001228 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7c5b      	ldrb	r3, [r3, #17]
 800145a:	461a      	mov	r2, r3
 800145c:	4b3f      	ldr	r3, [pc, #252]	; (800155c <SX1278_config+0x1f8>)
 800145e:	5c9b      	ldrb	r3, [r3, r2]
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	7d1b      	ldrb	r3, [r3, #20]
 8001468:	4619      	mov	r1, r3
 800146a:	4b3f      	ldr	r3, [pc, #252]	; (8001568 <SX1278_config+0x204>)
 800146c:	5c5b      	ldrb	r3, [r3, r1]
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	b2db      	uxtb	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001476:	3303      	adds	r3, #3
 8001478:	b2db      	uxtb	r3, r3
 800147a:	461a      	mov	r2, r3
 800147c:	211e      	movs	r1, #30
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff fed2 	bl	8001228 <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8001484:	2131      	movs	r1, #49	; 0x31
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff feaf 	bl	80011ea <SX1278_SPIRead>
 800148c:	4603      	mov	r3, r0
 800148e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	f023 0307 	bic.w	r3, r3, #7
 8001496:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	f043 0305 	orr.w	r3, r3, #5
 800149e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80014a0:	7bfb      	ldrb	r3, [r7, #15]
 80014a2:	461a      	mov	r2, r3
 80014a4:	2131      	movs	r1, #49	; 0x31
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff febe 	bl	8001228 <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80014ac:	220c      	movs	r2, #12
 80014ae:	2137      	movs	r1, #55	; 0x37
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff feb9 	bl	8001228 <SX1278_SPIWrite>
 80014b6:	e029      	b.n	800150c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	7c9b      	ldrb	r3, [r3, #18]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b28      	ldr	r3, [pc, #160]	; (8001560 <SX1278_config+0x1fc>)
 80014c0:	5c9b      	ldrb	r3, [r3, r2]
 80014c2:	011b      	lsls	r3, r3, #4
 80014c4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7cdb      	ldrb	r3, [r3, #19]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4b25      	ldr	r3, [pc, #148]	; (8001564 <SX1278_config+0x200>)
 80014ce:	5c5b      	ldrb	r3, [r3, r1]
 80014d0:	005b      	lsls	r3, r3, #1
 80014d2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80014d4:	4413      	add	r3, r2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	461a      	mov	r2, r3
 80014da:	211d      	movs	r1, #29
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f7ff fea3 	bl	8001228 <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7c5b      	ldrb	r3, [r3, #17]
 80014e6:	461a      	mov	r2, r3
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <SX1278_config+0x1f8>)
 80014ea:	5c9b      	ldrb	r3, [r3, r2]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	7d1b      	ldrb	r3, [r3, #20]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <SX1278_config+0x204>)
 80014f8:	5c5b      	ldrb	r3, [r3, r1]
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80014fe:	4413      	add	r3, r2
 8001500:	b2db      	uxtb	r3, r3
 8001502:	461a      	mov	r2, r3
 8001504:	211e      	movs	r1, #30
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff fe8e 	bl	8001228 <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800150c:	2204      	movs	r2, #4
 800150e:	2126      	movs	r1, #38	; 0x26
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff fe89 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8001516:	2208      	movs	r2, #8
 8001518:	211f      	movs	r1, #31
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff fe84 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001520:	2200      	movs	r2, #0
 8001522:	2120      	movs	r1, #32
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff fe7f 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800152a:	2208      	movs	r2, #8
 800152c:	2121      	movs	r1, #33	; 0x21
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fe7a 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001534:	2201      	movs	r2, #1
 8001536:	2141      	movs	r1, #65	; 0x41
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fe75 	bl	8001228 <SX1278_SPIWrite>
	module->readBytes = 0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 f810 	bl	800156c <SX1278_standby>
}
 800154c:	bf00      	nop
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	01e84800 	.word	0x01e84800
 8001558:	080049e4 	.word	0x080049e4
 800155c:	080049e8 	.word	0x080049e8
 8001560:	080049f0 	.word	0x080049f0
 8001564:	080049fc 	.word	0x080049fc
 8001568:	08004a00 	.word	0x08004a00

0800156c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001574:	2209      	movs	r2, #9
 8001576:	2101      	movs	r1, #1
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff fe55 	bl	8001228 <SX1278_SPIWrite>
	module->status = STANDBY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	759a      	strb	r2, [r3, #22]
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8001594:	2208      	movs	r2, #8
 8001596:	2101      	movs	r1, #1
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff fe45 	bl	8001228 <SX1278_SPIWrite>
	module->status = SLEEP;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	759a      	strb	r2, [r3, #22]
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80015b4:	2288      	movs	r2, #136	; 0x88
 80015b6:	2101      	movs	r1, #1
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fe35 	bl	8001228 <SX1278_SPIWrite>
}
 80015be:	bf00      	nop
 80015c0:	3708      	adds	r7, #8
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80015c6:	b580      	push	{r7, lr}
 80015c8:	b082      	sub	sp, #8
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80015ce:	22ff      	movs	r2, #255	; 0xff
 80015d0:	2112      	movs	r1, #18
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fe28 	bl	8001228 <SX1278_SPIWrite>
}
 80015d8:	bf00      	nop
 80015da:	3708      	adds	r7, #8
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60f8      	str	r0, [r7, #12]
 80015e8:	460b      	mov	r3, r1
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	7afa      	ldrb	r2, [r7, #11]
 80015f2:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80015f4:	68f8      	ldr	r0, [r7, #12]
 80015f6:	f7ff feb5 	bl	8001364 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80015fa:	2284      	movs	r2, #132	; 0x84
 80015fc:	214d      	movs	r1, #77	; 0x4d
 80015fe:	68f8      	ldr	r0, [r7, #12]
 8001600:	f7ff fe12 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001604:	22ff      	movs	r2, #255	; 0xff
 8001606:	2124      	movs	r1, #36	; 0x24
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f7ff fe0d 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800160e:	2201      	movs	r2, #1
 8001610:	2140      	movs	r1, #64	; 0x40
 8001612:	68f8      	ldr	r0, [r7, #12]
 8001614:	f7ff fe08 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8001618:	223f      	movs	r2, #63	; 0x3f
 800161a:	2111      	movs	r1, #17
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f7ff fe03 	bl	8001228 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff ffcf 	bl	80015c6 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8001628:	7afb      	ldrb	r3, [r7, #11]
 800162a:	461a      	mov	r2, r3
 800162c:	2122      	movs	r1, #34	; 0x22
 800162e:	68f8      	ldr	r0, [r7, #12]
 8001630:	f7ff fdfa 	bl	8001228 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001634:	210f      	movs	r1, #15
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fdd7 	bl	80011ea <SX1278_SPIRead>
 800163c:	4603      	mov	r3, r0
 800163e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	461a      	mov	r2, r3
 8001644:	210d      	movs	r1, #13
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff fdee 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800164c:	228d      	movs	r2, #141	; 0x8d
 800164e:	2101      	movs	r1, #1
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f7ff fde9 	bl	8001228 <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 800165e:	2118      	movs	r1, #24
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	f7ff fdc2 	bl	80011ea <SX1278_SPIRead>
 8001666:	4603      	mov	r3, r0
 8001668:	f003 0304 	and.w	r3, r3, #4
 800166c:	2b04      	cmp	r3, #4
 800166e:	d104      	bne.n	800167a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2203      	movs	r2, #3
 8001674:	759a      	strb	r2, [r3, #22]
			return 1;
 8001676:	2301      	movs	r3, #1
 8001678:	e013      	b.n	80016a2 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3b01      	subs	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d109      	bne.n	800169a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 f967 	bl	800195e <SX1278_hw_Reset>
			SX1278_config(module);
 8001690:	68f8      	ldr	r0, [r7, #12]
 8001692:	f7ff fe67 	bl	8001364 <SX1278_config>
			return 0;
 8001696:	2300      	movs	r3, #0
 8001698:	e003      	b.n	80016a2 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 800169a:	2001      	movs	r0, #1
 800169c:	f000 f9c9 	bl	8001a32 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80016a0:	e7dd      	b.n	800165e <SX1278_LoRaEntryRx+0x7e>
	}
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b084      	sub	sp, #16
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f9c6 	bl	8001a48 <SX1278_hw_GetDIO0>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d030      	beq.n	8001724 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3317      	adds	r3, #23
 80016c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ca:	2100      	movs	r1, #0
 80016cc:	4618      	mov	r0, r3
 80016ce:	f002 fc73 	bl	8003fb8 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80016d2:	2110      	movs	r1, #16
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fd88 	bl	80011ea <SX1278_SPIRead>
 80016da:	4603      	mov	r3, r0
 80016dc:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 80016de:	7bbb      	ldrb	r3, [r7, #14]
 80016e0:	461a      	mov	r2, r3
 80016e2:	210d      	movs	r1, #13
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fd9f 	bl	8001228 <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7c5b      	ldrb	r3, [r3, #17]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d103      	bne.n	80016fa <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	7d5b      	ldrb	r3, [r3, #21]
 80016f6:	73fb      	strb	r3, [r7, #15]
 80016f8:	e005      	b.n	8001706 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 80016fa:	2113      	movs	r1, #19
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff fd74 	bl	80011ea <SX1278_SPIRead>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f103 0217 	add.w	r2, r3, #23
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2100      	movs	r1, #0
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff fdb2 	bl	800127a <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7bfa      	ldrb	r2, [r7, #15]
 800171a:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff51 	bl	80015c6 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	460b      	mov	r3, r1
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	7afa      	ldrb	r2, [r7, #11]
 8001744:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8001746:	68f8      	ldr	r0, [r7, #12]
 8001748:	f7ff fe0c 	bl	8001364 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800174c:	2287      	movs	r2, #135	; 0x87
 800174e:	214d      	movs	r1, #77	; 0x4d
 8001750:	68f8      	ldr	r0, [r7, #12]
 8001752:	f7ff fd69 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8001756:	2200      	movs	r2, #0
 8001758:	2124      	movs	r1, #36	; 0x24
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7ff fd64 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001760:	2241      	movs	r2, #65	; 0x41
 8001762:	2140      	movs	r1, #64	; 0x40
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f7ff fd5f 	bl	8001228 <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff ff2b 	bl	80015c6 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001770:	22f7      	movs	r2, #247	; 0xf7
 8001772:	2111      	movs	r1, #17
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fd57 	bl	8001228 <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800177a:	7afb      	ldrb	r3, [r7, #11]
 800177c:	461a      	mov	r2, r3
 800177e:	2122      	movs	r1, #34	; 0x22
 8001780:	68f8      	ldr	r0, [r7, #12]
 8001782:	f7ff fd51 	bl	8001228 <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8001786:	210e      	movs	r1, #14
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fd2e 	bl	80011ea <SX1278_SPIRead>
 800178e:	4603      	mov	r3, r0
 8001790:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8001792:	7dfb      	ldrb	r3, [r7, #23]
 8001794:	461a      	mov	r2, r3
 8001796:	210d      	movs	r1, #13
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff fd45 	bl	8001228 <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 800179e:	2122      	movs	r1, #34	; 0x22
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7ff fd22 	bl	80011ea <SX1278_SPIRead>
 80017a6:	4603      	mov	r3, r0
 80017a8:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80017aa:	7dba      	ldrb	r2, [r7, #22]
 80017ac:	7afb      	ldrb	r3, [r7, #11]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d104      	bne.n	80017bc <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2202      	movs	r2, #2
 80017b6:	759a      	strb	r2, [r3, #22]
			return 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e00e      	b.n	80017da <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	3b01      	subs	r3, #1
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1ea      	bne.n	800179e <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f8c6 	bl	800195e <SX1278_hw_Reset>
			SX1278_config(module);
 80017d2:	68f8      	ldr	r0, [r7, #12]
 80017d4:	f7ff fdc6 	bl	8001364 <SX1278_config>
			return 0;
 80017d8:	2300      	movs	r3, #0
		}
	}
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	60f8      	str	r0, [r7, #12]
 80017ea:	60b9      	str	r1, [r7, #8]
 80017ec:	603b      	str	r3, [r7, #0]
 80017ee:	4613      	mov	r3, r2
 80017f0:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	68ba      	ldr	r2, [r7, #8]
 80017f6:	2100      	movs	r1, #0
 80017f8:	68f8      	ldr	r0, [r7, #12]
 80017fa:	f7ff fd77 	bl	80012ec <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80017fe:	228b      	movs	r2, #139	; 0x8b
 8001800:	2101      	movs	r1, #1
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f7ff fd10 	bl	8001228 <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f000 f91b 	bl	8001a48 <SX1278_hw_GetDIO0>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00b      	beq.n	8001830 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8001818:	2112      	movs	r1, #18
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff fce5 	bl	80011ea <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f7ff fed0 	bl	80015c6 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff fea0 	bl	800156c <SX1278_standby>
			return 1;
 800182c:	2301      	movs	r3, #1
 800182e:	e013      	b.n	8001858 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	3b01      	subs	r3, #1
 8001834:	603b      	str	r3, [r7, #0]
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d109      	bne.n	8001850 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f000 f88c 	bl	800195e <SX1278_hw_Reset>
			SX1278_config(module);
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f7ff fd8c 	bl	8001364 <SX1278_config>
			return 0;
 800184c:	2300      	movs	r3, #0
 800184e:	e003      	b.n	8001858 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001850:	2001      	movs	r0, #1
 8001852:	f000 f8ee 	bl	8001a32 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8001856:	e7d7      	b.n	8001808 <SX1278_LoRaTxPacket+0x26>
	}
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f000 f848 	bl	8001906 <SX1278_hw_init>
	module->frequency = frequency;
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	e9d7 2300 	ldrd	r2, r3, [r7]
 800187c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	7e3a      	ldrb	r2, [r7, #24]
 8001884:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	7f3a      	ldrb	r2, [r7, #28]
 800188a:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001892:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800189a:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80018a2:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80018aa:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f7ff fd59 	bl	8001364 <SX1278_config>
}
 80018b2:	bf00      	nop
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b084      	sub	sp, #16
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	4613      	mov	r3, r2
 80018c6:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80018ce:	79fa      	ldrb	r2, [r7, #7]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d003      	beq.n	80018dc <SX1278_read+0x22>
		length = module->readBytes;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80018da:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3317      	adds	r3, #23
 80018e0:	79fa      	ldrb	r2, [r7, #7]
 80018e2:	4619      	mov	r1, r3
 80018e4:	68b8      	ldr	r0, [r7, #8]
 80018e6:	f002 fb59 	bl	8003f9c <memcpy>
	rxBuf[length] = '\0';
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	4413      	add	r3, r2
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2200      	movs	r2, #0
 80018f8:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800190e:	2101      	movs	r1, #1
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 f80d 	bl	8001930 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6858      	ldr	r0, [r3, #4]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	b29b      	uxth	r3, r3
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	f000 fe0d 	bl	8002542 <HAL_GPIO_WritePin>
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6958      	ldr	r0, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	b299      	uxth	r1, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	bf0c      	ite	eq
 800194a:	2301      	moveq	r3, #1
 800194c:	2300      	movne	r3, #0
 800194e:	b2db      	uxtb	r3, r3
 8001950:	461a      	mov	r2, r3
 8001952:	f000 fdf6 	bl	8002542 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001966:	2101      	movs	r1, #1
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ffe1 	bl	8001930 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6858      	ldr	r0, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	b29b      	uxth	r3, r3
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	f000 fde1 	bl	8002542 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f000 f856 	bl	8001a32 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6858      	ldr	r0, [r3, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	b29b      	uxth	r3, r3
 8001990:	2201      	movs	r2, #1
 8001992:	4619      	mov	r1, r3
 8001994:	f000 fdd5 	bl	8002542 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8001998:	2064      	movs	r0, #100	; 0x64
 800199a:	f000 f84a 	bl	8001a32 <SX1278_hw_DelayMs>
}
 800199e:	bf00      	nop
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 80019a6:	b580      	push	{r7, lr}
 80019a8:	b082      	sub	sp, #8
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
 80019ae:	460b      	mov	r3, r1
 80019b0:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80019b2:	2100      	movs	r1, #0
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ffbb 	bl	8001930 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6998      	ldr	r0, [r3, #24]
 80019be:	1cf9      	adds	r1, r7, #3
 80019c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c4:	2201      	movs	r2, #1
 80019c6:	f001 ff19 	bl	80037fc <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80019ca:	bf00      	nop
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f002 fa06 	bl	8003de2 <HAL_SPI_GetState>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d1f7      	bne.n	80019cc <SX1278_hw_SPICommand+0x26>
		;
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af02      	add	r7, sp, #8
 80019ec:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 80019ee:	2300      	movs	r3, #0
 80019f0:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 80019f2:	2300      	movs	r3, #0
 80019f4:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 80019f6:	2100      	movs	r1, #0
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7ff ff99 	bl	8001930 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6998      	ldr	r0, [r3, #24]
 8001a02:	f107 020e 	add.w	r2, r7, #14
 8001a06:	f107 010f 	add.w	r1, r7, #15
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2301      	movs	r3, #1
 8001a12:	f002 f836 	bl	8003a82 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001a16:	bf00      	nop
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f002 f9e0 	bl	8003de2 <HAL_SPI_GetState>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d1f7      	bne.n	8001a18 <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fab4 	bl	8001fa8 <HAL_Delay>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4610      	mov	r0, r2
 8001a5e:	f000 fd59 	bl	8002514 <HAL_GPIO_ReadPin>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	bf0c      	ite	eq
 8001a68:	2301      	moveq	r3, #1
 8001a6a:	2300      	movne	r3, #0
 8001a6c:	b2db      	uxtb	r3, r3
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a76:	b480      	push	{r7}
 8001a78:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a7a:	bf00      	nop
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
	...

08001a84 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af04      	add	r7, sp, #16
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a92:	9302      	str	r3, [sp, #8]
 8001a94:	2301      	movs	r3, #1
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	9300      	str	r3, [sp, #0]
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2178      	movs	r1, #120	; 0x78
 8001aa2:	4803      	ldr	r0, [pc, #12]	; (8001ab0 <ssd1306_WriteCommand+0x2c>)
 8001aa4:	f000 fec2 	bl	800282c <HAL_I2C_Mem_Write>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	2000008c 	.word	0x2000008c

08001ab4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af04      	add	r7, sp, #16
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac6:	9202      	str	r2, [sp, #8]
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2301      	movs	r3, #1
 8001ad0:	2240      	movs	r2, #64	; 0x40
 8001ad2:	2178      	movs	r1, #120	; 0x78
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <ssd1306_WriteData+0x30>)
 8001ad6:	f000 fea9 	bl	800282c <HAL_I2C_Mem_Write>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000008c 	.word	0x2000008c

08001ae8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001aec:	f7ff ffc3 	bl	8001a76 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001af0:	2064      	movs	r0, #100	; 0x64
 8001af2:	f000 fa59 	bl	8001fa8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001af6:	2000      	movs	r0, #0
 8001af8:	f000 f9d6 	bl	8001ea8 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001afc:	2020      	movs	r0, #32
 8001afe:	f7ff ffc1 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001b02:	2000      	movs	r0, #0
 8001b04:	f7ff ffbe 	bl	8001a84 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b08:	20b0      	movs	r0, #176	; 0xb0
 8001b0a:	f7ff ffbb 	bl	8001a84 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b0e:	20c8      	movs	r0, #200	; 0xc8
 8001b10:	f7ff ffb8 	bl	8001a84 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff ffb5 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b1a:	2010      	movs	r0, #16
 8001b1c:	f7ff ffb2 	bl	8001a84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b20:	2040      	movs	r0, #64	; 0x40
 8001b22:	f7ff ffaf 	bl	8001a84 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b26:	20ff      	movs	r0, #255	; 0xff
 8001b28:	f000 f9aa 	bl	8001e80 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b2c:	20a1      	movs	r0, #161	; 0xa1
 8001b2e:	f7ff ffa9 	bl	8001a84 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b32:	20a6      	movs	r0, #166	; 0xa6
 8001b34:	f7ff ffa6 	bl	8001a84 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b38:	20a8      	movs	r0, #168	; 0xa8
 8001b3a:	f7ff ffa3 	bl	8001a84 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001b3e:	203f      	movs	r0, #63	; 0x3f
 8001b40:	f7ff ffa0 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b44:	20a4      	movs	r0, #164	; 0xa4
 8001b46:	f7ff ff9d 	bl	8001a84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b4a:	20d3      	movs	r0, #211	; 0xd3
 8001b4c:	f7ff ff9a 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b50:	2000      	movs	r0, #0
 8001b52:	f7ff ff97 	bl	8001a84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b56:	20d5      	movs	r0, #213	; 0xd5
 8001b58:	f7ff ff94 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b5c:	20f0      	movs	r0, #240	; 0xf0
 8001b5e:	f7ff ff91 	bl	8001a84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b62:	20d9      	movs	r0, #217	; 0xd9
 8001b64:	f7ff ff8e 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b68:	2022      	movs	r0, #34	; 0x22
 8001b6a:	f7ff ff8b 	bl	8001a84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b6e:	20da      	movs	r0, #218	; 0xda
 8001b70:	f7ff ff88 	bl	8001a84 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001b74:	2012      	movs	r0, #18
 8001b76:	f7ff ff85 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b7a:	20db      	movs	r0, #219	; 0xdb
 8001b7c:	f7ff ff82 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001b80:	2020      	movs	r0, #32
 8001b82:	f7ff ff7f 	bl	8001a84 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001b86:	208d      	movs	r0, #141	; 0x8d
 8001b88:	f7ff ff7c 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001b8c:	2014      	movs	r0, #20
 8001b8e:	f7ff ff79 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001b92:	2001      	movs	r0, #1
 8001b94:	f000 f988 	bl	8001ea8 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001b98:	2000      	movs	r0, #0
 8001b9a:	f000 f80f 	bl	8001bbc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001b9e:	f000 f825 	bl	8001bec <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <ssd1306_Init+0xd0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <ssd1306_Init+0xd0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001bae:	4b02      	ldr	r3, [pc, #8]	; (8001bb8 <ssd1306_Init+0xd0>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	711a      	strb	r2, [r3, #4]
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000884 	.word	0x20000884

08001bbc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <ssd1306_Fill+0x14>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <ssd1306_Fill+0x16>
 8001bd0:	23ff      	movs	r3, #255	; 0xff
 8001bd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <ssd1306_Fill+0x2c>)
 8001bda:	f002 f9ed 	bl	8003fb8 <memset>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000484 	.word	0x20000484

08001bec <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	71fb      	strb	r3, [r7, #7]
 8001bf6:	e016      	b.n	8001c26 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	3b50      	subs	r3, #80	; 0x50
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff40 	bl	8001a84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001c04:	2000      	movs	r0, #0
 8001c06:	f7ff ff3d 	bl	8001a84 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001c0a:	2010      	movs	r0, #16
 8001c0c:	f7ff ff3a 	bl	8001a84 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	01db      	lsls	r3, r3, #7
 8001c14:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <ssd1306_UpdateScreen+0x4c>)
 8001c16:	4413      	add	r3, r2
 8001c18:	2180      	movs	r1, #128	; 0x80
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff4a 	bl	8001ab4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	3301      	adds	r3, #1
 8001c24:	71fb      	strb	r3, [r7, #7]
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	2b07      	cmp	r3, #7
 8001c2a:	d9e5      	bls.n	8001bf8 <ssd1306_UpdateScreen+0xc>
    }
}
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	20000484 	.word	0x20000484

08001c3c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	460b      	mov	r3, r1
 8001c48:	71bb      	strb	r3, [r7, #6]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db3d      	blt.n	8001cd2 <ssd1306_DrawPixel+0x96>
 8001c56:	79bb      	ldrb	r3, [r7, #6]
 8001c58:	2b3f      	cmp	r3, #63	; 0x3f
 8001c5a:	d83a      	bhi.n	8001cd2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001c5c:	797b      	ldrb	r3, [r7, #5]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d11a      	bne.n	8001c98 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c62:	79fa      	ldrb	r2, [r7, #7]
 8001c64:	79bb      	ldrb	r3, [r7, #6]
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	b2d8      	uxtb	r0, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	01db      	lsls	r3, r3, #7
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a1a      	ldr	r2, [pc, #104]	; (8001cdc <ssd1306_DrawPixel+0xa0>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	b25a      	sxtb	r2, r3
 8001c76:	79bb      	ldrb	r3, [r7, #6]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b259      	sxtb	r1, r3
 8001c88:	79fa      	ldrb	r2, [r7, #7]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	01db      	lsls	r3, r3, #7
 8001c8e:	4413      	add	r3, r2
 8001c90:	b2c9      	uxtb	r1, r1
 8001c92:	4a12      	ldr	r2, [pc, #72]	; (8001cdc <ssd1306_DrawPixel+0xa0>)
 8001c94:	54d1      	strb	r1, [r2, r3]
 8001c96:	e01d      	b.n	8001cd4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c98:	79fa      	ldrb	r2, [r7, #7]
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	b2d8      	uxtb	r0, r3
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	01db      	lsls	r3, r3, #7
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <ssd1306_DrawPixel+0xa0>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	b25a      	sxtb	r2, r3
 8001cac:	79bb      	ldrb	r3, [r7, #6]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	b259      	sxtb	r1, r3
 8001cc2:	79fa      	ldrb	r2, [r7, #7]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	01db      	lsls	r3, r3, #7
 8001cc8:	4413      	add	r3, r2
 8001cca:	b2c9      	uxtb	r1, r1
 8001ccc:	4a03      	ldr	r2, [pc, #12]	; (8001cdc <ssd1306_DrawPixel+0xa0>)
 8001cce:	54d1      	strb	r1, [r2, r3]
 8001cd0:	e000      	b.n	8001cd4 <ssd1306_DrawPixel+0x98>
        return;
 8001cd2:	bf00      	nop
    }
}
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	20000484 	.word	0x20000484

08001ce0 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b089      	sub	sp, #36	; 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4604      	mov	r4, r0
 8001ce8:	4638      	mov	r0, r7
 8001cea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001cee:	4623      	mov	r3, r4
 8001cf0:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	2b1f      	cmp	r3, #31
 8001cf6:	d902      	bls.n	8001cfe <ssd1306_WriteChar+0x1e>
 8001cf8:	7bfb      	ldrb	r3, [r7, #15]
 8001cfa:	2b7e      	cmp	r3, #126	; 0x7e
 8001cfc:	d901      	bls.n	8001d02 <ssd1306_WriteChar+0x22>
        return 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	e079      	b.n	8001df6 <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001d02:	4b3f      	ldr	r3, [pc, #252]	; (8001e00 <ssd1306_WriteChar+0x120>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	461a      	mov	r2, r3
 8001d08:	783b      	ldrb	r3, [r7, #0]
 8001d0a:	4413      	add	r3, r2
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	dc06      	bgt.n	8001d1e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001d10:	4b3b      	ldr	r3, [pc, #236]	; (8001e00 <ssd1306_WriteChar+0x120>)
 8001d12:	885b      	ldrh	r3, [r3, #2]
 8001d14:	461a      	mov	r2, r3
 8001d16:	787b      	ldrb	r3, [r7, #1]
 8001d18:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001d1a:	2b40      	cmp	r3, #64	; 0x40
 8001d1c:	dd01      	ble.n	8001d22 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	e069      	b.n	8001df6 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
 8001d26:	e04e      	b.n	8001dc6 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	3b20      	subs	r3, #32
 8001d2e:	7879      	ldrb	r1, [r7, #1]
 8001d30:	fb01 f303 	mul.w	r3, r1, r3
 8001d34:	4619      	mov	r1, r3
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	440b      	add	r3, r1
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	4413      	add	r3, r2
 8001d3e:	881b      	ldrh	r3, [r3, #0]
 8001d40:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001d42:	2300      	movs	r3, #0
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	e036      	b.n	8001db6 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001d48:	697a      	ldr	r2, [r7, #20]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d013      	beq.n	8001d80 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <ssd1306_WriteChar+0x120>)
 8001d5a:	881b      	ldrh	r3, [r3, #0]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	69bb      	ldr	r3, [r7, #24]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4413      	add	r3, r2
 8001d64:	b2d8      	uxtb	r0, r3
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <ssd1306_WriteChar+0x120>)
 8001d68:	885b      	ldrh	r3, [r3, #2]
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	4413      	add	r3, r2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f7ff ff5f 	bl	8001c3c <ssd1306_DrawPixel>
 8001d7e:	e017      	b.n	8001db0 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <ssd1306_WriteChar+0x120>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	69bb      	ldr	r3, [r7, #24]
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b2d8      	uxtb	r0, r3
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <ssd1306_WriteChar+0x120>)
 8001d90:	885b      	ldrh	r3, [r3, #2]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	4413      	add	r3, r2
 8001d9a:	b2d9      	uxtb	r1, r3
 8001d9c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	bf0c      	ite	eq
 8001da4:	2301      	moveq	r3, #1
 8001da6:	2300      	movne	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	461a      	mov	r2, r3
 8001dac:	f7ff ff46 	bl	8001c3c <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	3301      	adds	r3, #1
 8001db4:	61bb      	str	r3, [r7, #24]
 8001db6:	783b      	ldrb	r3, [r7, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d3c3      	bcc.n	8001d48 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	787b      	ldrb	r3, [r7, #1]
 8001dc8:	461a      	mov	r2, r3
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d3ab      	bcc.n	8001d28 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <ssd1306_WriteChar+0x120>)
 8001dd2:	881a      	ldrh	r2, [r3, #0]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <ssd1306_WriteChar+0x108>
 8001dda:	68b9      	ldr	r1, [r7, #8]
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	3b20      	subs	r3, #32
 8001de0:	440b      	add	r3, r1
 8001de2:	781b      	ldrb	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	e001      	b.n	8001dec <ssd1306_WriteChar+0x10c>
 8001de8:	783b      	ldrb	r3, [r7, #0]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	4413      	add	r3, r2
 8001dee:	b29a      	uxth	r2, r3
 8001df0:	4b03      	ldr	r3, [pc, #12]	; (8001e00 <ssd1306_WriteChar+0x120>)
 8001df2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd90      	pop	{r4, r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	20000884 	.word	0x20000884

08001e04 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	4638      	mov	r0, r7
 8001e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001e12:	e013      	b.n	8001e3c <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	7818      	ldrb	r0, [r3, #0]
 8001e18:	7e3b      	ldrb	r3, [r7, #24]
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	463b      	mov	r3, r7
 8001e1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e20:	f7ff ff5e 	bl	8001ce0 <ssd1306_WriteChar>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461a      	mov	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d002      	beq.n	8001e36 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	e008      	b.n	8001e48 <ssd1306_WriteString+0x44>
        }
        str++;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	3301      	adds	r3, #1
 8001e3a:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1e7      	bne.n	8001e14 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	781b      	ldrb	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	4603      	mov	r3, r0
 8001e58:	460a      	mov	r2, r1
 8001e5a:	71fb      	strb	r3, [r7, #7]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <ssd1306_SetCursor+0x2c>)
 8001e66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <ssd1306_SetCursor+0x2c>)
 8001e6e:	805a      	strh	r2, [r3, #2]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000884 	.word	0x20000884

08001e80 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001e8a:	2381      	movs	r3, #129	; 0x81
 8001e8c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001e8e:	7bfb      	ldrb	r3, [r7, #15]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff fdf7 	bl	8001a84 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001e96:	79fb      	ldrb	r3, [r7, #7]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fdf3 	bl	8001a84 <ssd1306_WriteCommand>
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001eb2:	79fb      	ldrb	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d005      	beq.n	8001ec4 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001eb8:	23af      	movs	r3, #175	; 0xaf
 8001eba:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ebc:	4b08      	ldr	r3, [pc, #32]	; (8001ee0 <ssd1306_SetDisplayOn+0x38>)
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	715a      	strb	r2, [r3, #5]
 8001ec2:	e004      	b.n	8001ece <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ec4:	23ae      	movs	r3, #174	; 0xae
 8001ec6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <ssd1306_SetDisplayOn+0x38>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ece:	7bfb      	ldrb	r3, [r7, #15]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fdd7 	bl	8001a84 <ssd1306_WriteCommand>
}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000884 	.word	0x20000884

08001ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_Init+0x28>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_Init+0x28>)
 8001eee:	f043 0310 	orr.w	r3, r3, #16
 8001ef2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f947 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	200f      	movs	r0, #15
 8001efc:	f000 f808 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff f8bc 	bl	800107c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40022000 	.word	0x40022000

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x54>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x58>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f95f 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f927 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_InitTick+0x5c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000000 	.word	0x20000000
 8001f68:	20000008 	.word	0x20000008
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b05      	ldr	r3, [pc, #20]	; (8001f8c <HAL_IncTick+0x1c>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_IncTick+0x20>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a03      	ldr	r2, [pc, #12]	; (8001f90 <HAL_IncTick+0x20>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	2000088c 	.word	0x2000088c

08001f94 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return uwTick;
 8001f98:	4b02      	ldr	r3, [pc, #8]	; (8001fa4 <HAL_GetTick+0x10>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr
 8001fa4:	2000088c 	.word	0x2000088c

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff fff0 	bl	8001f94 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffe0 	bl	8001f94 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008

08001ff0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800200c:	4013      	ands	r3, r2
 800200e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002018:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800201c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002020:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002022:	4a04      	ldr	r2, [pc, #16]	; (8002034 <__NVIC_SetPriorityGrouping+0x44>)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	60d3      	str	r3, [r2, #12]
}
 8002028:	bf00      	nop
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800203c:	4b04      	ldr	r3, [pc, #16]	; (8002050 <__NVIC_GetPriorityGrouping+0x18>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	0a1b      	lsrs	r3, r3, #8
 8002042:	f003 0307 	and.w	r3, r3, #7
}
 8002046:	4618      	mov	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000ed00 	.word	0xe000ed00

08002054 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	2b00      	cmp	r3, #0
 8002064:	db0b      	blt.n	800207e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	4906      	ldr	r1, [pc, #24]	; (8002088 <__NVIC_EnableIRQ+0x34>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	095b      	lsrs	r3, r3, #5
 8002074:	2001      	movs	r0, #1
 8002076:	fa00 f202 	lsl.w	r2, r0, r2
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bc80      	pop	{r7}
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff90 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	; (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	; (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff2d 	bl	8001ff0 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff42 	bl	8002038 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff90 	bl	80020e0 <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5f 	bl	800208c <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff35 	bl	8002054 <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
	...

0800220c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800220c:	b480      	push	{r7}
 800220e:	b08b      	sub	sp, #44	; 0x2c
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002216:	2300      	movs	r3, #0
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221e:	e169      	b.n	80024f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002220:	2201      	movs	r2, #1
 8002222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	429a      	cmp	r2, r3
 800223a:	f040 8158 	bne.w	80024ee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	4a9a      	ldr	r2, [pc, #616]	; (80024ac <HAL_GPIO_Init+0x2a0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d05e      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 8002248:	4a98      	ldr	r2, [pc, #608]	; (80024ac <HAL_GPIO_Init+0x2a0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d875      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 800224e:	4a98      	ldr	r2, [pc, #608]	; (80024b0 <HAL_GPIO_Init+0x2a4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d058      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 8002254:	4a96      	ldr	r2, [pc, #600]	; (80024b0 <HAL_GPIO_Init+0x2a4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d86f      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 800225a:	4a96      	ldr	r2, [pc, #600]	; (80024b4 <HAL_GPIO_Init+0x2a8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d052      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 8002260:	4a94      	ldr	r2, [pc, #592]	; (80024b4 <HAL_GPIO_Init+0x2a8>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d869      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 8002266:	4a94      	ldr	r2, [pc, #592]	; (80024b8 <HAL_GPIO_Init+0x2ac>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d04c      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 800226c:	4a92      	ldr	r2, [pc, #584]	; (80024b8 <HAL_GPIO_Init+0x2ac>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d863      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 8002272:	4a92      	ldr	r2, [pc, #584]	; (80024bc <HAL_GPIO_Init+0x2b0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d046      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
 8002278:	4a90      	ldr	r2, [pc, #576]	; (80024bc <HAL_GPIO_Init+0x2b0>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d85d      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 800227e:	2b12      	cmp	r3, #18
 8002280:	d82a      	bhi.n	80022d8 <HAL_GPIO_Init+0xcc>
 8002282:	2b12      	cmp	r3, #18
 8002284:	d859      	bhi.n	800233a <HAL_GPIO_Init+0x12e>
 8002286:	a201      	add	r2, pc, #4	; (adr r2, 800228c <HAL_GPIO_Init+0x80>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	08002307 	.word	0x08002307
 8002290:	080022e1 	.word	0x080022e1
 8002294:	080022f3 	.word	0x080022f3
 8002298:	08002335 	.word	0x08002335
 800229c:	0800233b 	.word	0x0800233b
 80022a0:	0800233b 	.word	0x0800233b
 80022a4:	0800233b 	.word	0x0800233b
 80022a8:	0800233b 	.word	0x0800233b
 80022ac:	0800233b 	.word	0x0800233b
 80022b0:	0800233b 	.word	0x0800233b
 80022b4:	0800233b 	.word	0x0800233b
 80022b8:	0800233b 	.word	0x0800233b
 80022bc:	0800233b 	.word	0x0800233b
 80022c0:	0800233b 	.word	0x0800233b
 80022c4:	0800233b 	.word	0x0800233b
 80022c8:	0800233b 	.word	0x0800233b
 80022cc:	0800233b 	.word	0x0800233b
 80022d0:	080022e9 	.word	0x080022e9
 80022d4:	080022fd 	.word	0x080022fd
 80022d8:	4a79      	ldr	r2, [pc, #484]	; (80024c0 <HAL_GPIO_Init+0x2b4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d013      	beq.n	8002306 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022de:	e02c      	b.n	800233a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e029      	b.n	800233c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	3304      	adds	r3, #4
 80022ee:	623b      	str	r3, [r7, #32]
          break;
 80022f0:	e024      	b.n	800233c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	3308      	adds	r3, #8
 80022f8:	623b      	str	r3, [r7, #32]
          break;
 80022fa:	e01f      	b.n	800233c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	330c      	adds	r3, #12
 8002302:	623b      	str	r3, [r7, #32]
          break;
 8002304:	e01a      	b.n	800233c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800230e:	2304      	movs	r3, #4
 8002310:	623b      	str	r3, [r7, #32]
          break;
 8002312:	e013      	b.n	800233c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d105      	bne.n	8002328 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800231c:	2308      	movs	r3, #8
 800231e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	611a      	str	r2, [r3, #16]
          break;
 8002326:	e009      	b.n	800233c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002328:	2308      	movs	r3, #8
 800232a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	615a      	str	r2, [r3, #20]
          break;
 8002332:	e003      	b.n	800233c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002334:	2300      	movs	r3, #0
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x130>
          break;
 800233a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2bff      	cmp	r3, #255	; 0xff
 8002340:	d801      	bhi.n	8002346 <HAL_GPIO_Init+0x13a>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	e001      	b.n	800234a <HAL_GPIO_Init+0x13e>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	3304      	adds	r3, #4
 800234a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	2bff      	cmp	r3, #255	; 0xff
 8002350:	d802      	bhi.n	8002358 <HAL_GPIO_Init+0x14c>
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	e002      	b.n	800235e <HAL_GPIO_Init+0x152>
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	3b08      	subs	r3, #8
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	210f      	movs	r1, #15
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	fa01 f303 	lsl.w	r3, r1, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	401a      	ands	r2, r3
 8002370:	6a39      	ldr	r1, [r7, #32]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	fa01 f303 	lsl.w	r3, r1, r3
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	f000 80b1 	beq.w	80024ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800238c:	4b4d      	ldr	r3, [pc, #308]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a4c      	ldr	r2, [pc, #304]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <HAL_GPIO_Init+0x2b8>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023a4:	4a48      	ldr	r2, [pc, #288]	; (80024c8 <HAL_GPIO_Init+0x2bc>)
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	089b      	lsrs	r3, r3, #2
 80023aa:	3302      	adds	r3, #2
 80023ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	009b      	lsls	r3, r3, #2
 80023ba:	220f      	movs	r2, #15
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	4013      	ands	r3, r2
 80023c6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a40      	ldr	r2, [pc, #256]	; (80024cc <HAL_GPIO_Init+0x2c0>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d013      	beq.n	80023f8 <HAL_GPIO_Init+0x1ec>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	4a3f      	ldr	r2, [pc, #252]	; (80024d0 <HAL_GPIO_Init+0x2c4>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d00d      	beq.n	80023f4 <HAL_GPIO_Init+0x1e8>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	4a3e      	ldr	r2, [pc, #248]	; (80024d4 <HAL_GPIO_Init+0x2c8>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d007      	beq.n	80023f0 <HAL_GPIO_Init+0x1e4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	4a3d      	ldr	r2, [pc, #244]	; (80024d8 <HAL_GPIO_Init+0x2cc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d101      	bne.n	80023ec <HAL_GPIO_Init+0x1e0>
 80023e8:	2303      	movs	r3, #3
 80023ea:	e006      	b.n	80023fa <HAL_GPIO_Init+0x1ee>
 80023ec:	2304      	movs	r3, #4
 80023ee:	e004      	b.n	80023fa <HAL_GPIO_Init+0x1ee>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e002      	b.n	80023fa <HAL_GPIO_Init+0x1ee>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_GPIO_Init+0x1ee>
 80023f8:	2300      	movs	r3, #0
 80023fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023fc:	f002 0203 	and.w	r2, r2, #3
 8002400:	0092      	lsls	r2, r2, #2
 8002402:	4093      	lsls	r3, r2
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800240a:	492f      	ldr	r1, [pc, #188]	; (80024c8 <HAL_GPIO_Init+0x2bc>)
 800240c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	68fa      	ldr	r2, [r7, #12]
 8002414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d006      	beq.n	8002432 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002424:	4b2d      	ldr	r3, [pc, #180]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	492c      	ldr	r1, [pc, #176]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	608b      	str	r3, [r1, #8]
 8002430:	e006      	b.n	8002440 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002432:	4b2a      	ldr	r3, [pc, #168]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002434:	689a      	ldr	r2, [r3, #8]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	43db      	mvns	r3, r3
 800243a:	4928      	ldr	r1, [pc, #160]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800243c:	4013      	ands	r3, r2
 800243e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d006      	beq.n	800245a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800244c:	4b23      	ldr	r3, [pc, #140]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800244e:	68da      	ldr	r2, [r3, #12]
 8002450:	4922      	ldr	r1, [pc, #136]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	4313      	orrs	r3, r2
 8002456:	60cb      	str	r3, [r1, #12]
 8002458:	e006      	b.n	8002468 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800245a:	4b20      	ldr	r3, [pc, #128]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	43db      	mvns	r3, r3
 8002462:	491e      	ldr	r1, [pc, #120]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002464:	4013      	ands	r3, r2
 8002466:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d006      	beq.n	8002482 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002474:	4b19      	ldr	r3, [pc, #100]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	4918      	ldr	r1, [pc, #96]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	4313      	orrs	r3, r2
 800247e:	604b      	str	r3, [r1, #4]
 8002480:	e006      	b.n	8002490 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002482:	4b16      	ldr	r3, [pc, #88]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	43db      	mvns	r3, r3
 800248a:	4914      	ldr	r1, [pc, #80]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800248c:	4013      	ands	r3, r2
 800248e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d021      	beq.n	80024e0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800249c:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	490e      	ldr	r1, [pc, #56]	; (80024dc <HAL_GPIO_Init+0x2d0>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	600b      	str	r3, [r1, #0]
 80024a8:	e021      	b.n	80024ee <HAL_GPIO_Init+0x2e2>
 80024aa:	bf00      	nop
 80024ac:	10320000 	.word	0x10320000
 80024b0:	10310000 	.word	0x10310000
 80024b4:	10220000 	.word	0x10220000
 80024b8:	10210000 	.word	0x10210000
 80024bc:	10120000 	.word	0x10120000
 80024c0:	10110000 	.word	0x10110000
 80024c4:	40021000 	.word	0x40021000
 80024c8:	40010000 	.word	0x40010000
 80024cc:	40010800 	.word	0x40010800
 80024d0:	40010c00 	.word	0x40010c00
 80024d4:	40011000 	.word	0x40011000
 80024d8:	40011400 	.word	0x40011400
 80024dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024e0:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <HAL_GPIO_Init+0x304>)
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	4909      	ldr	r1, [pc, #36]	; (8002510 <HAL_GPIO_Init+0x304>)
 80024ea:	4013      	ands	r3, r2
 80024ec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	3301      	adds	r3, #1
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024fa:	fa22 f303 	lsr.w	r3, r2, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f47f ae8e 	bne.w	8002220 <HAL_GPIO_Init+0x14>
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	372c      	adds	r7, #44	; 0x2c
 800250a:	46bd      	mov	sp, r7
 800250c:	bc80      	pop	{r7}
 800250e:	4770      	bx	lr
 8002510:	40010400 	.word	0x40010400

08002514 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	887b      	ldrh	r3, [r7, #2]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800252c:	2301      	movs	r3, #1
 800252e:	73fb      	strb	r3, [r7, #15]
 8002530:	e001      	b.n	8002536 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002532:	2300      	movs	r3, #0
 8002534:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002536:	7bfb      	ldrb	r3, [r7, #15]
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr

08002542 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	460b      	mov	r3, r1
 800254c:	807b      	strh	r3, [r7, #2]
 800254e:	4613      	mov	r3, r2
 8002550:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002552:	787b      	ldrb	r3, [r7, #1]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002558:	887a      	ldrh	r2, [r7, #2]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800255e:	e003      	b.n	8002568 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002560:	887b      	ldrh	r3, [r7, #2]
 8002562:	041a      	lsls	r2, r3, #16
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	611a      	str	r2, [r3, #16]
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
	...

08002574 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002580:	695a      	ldr	r2, [r3, #20]
 8002582:	88fb      	ldrh	r3, [r7, #6]
 8002584:	4013      	ands	r3, r2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d006      	beq.n	8002598 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800258a:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800258c:	88fb      	ldrh	r3, [r7, #6]
 800258e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002590:	88fb      	ldrh	r3, [r7, #6]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe f892 	bl	80006bc <HAL_GPIO_EXTI_Callback>
  }
}
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40010400 	.word	0x40010400

080025a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e12b      	b.n	800280e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d106      	bne.n	80025d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7fe f826 	bl	800061c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2224      	movs	r2, #36	; 0x24
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0201 	bic.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80025f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002606:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002608:	f001 f842 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 800260c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4a81      	ldr	r2, [pc, #516]	; (8002818 <HAL_I2C_Init+0x274>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d807      	bhi.n	8002628 <HAL_I2C_Init+0x84>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4a80      	ldr	r2, [pc, #512]	; (800281c <HAL_I2C_Init+0x278>)
 800261c:	4293      	cmp	r3, r2
 800261e:	bf94      	ite	ls
 8002620:	2301      	movls	r3, #1
 8002622:	2300      	movhi	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	e006      	b.n	8002636 <HAL_I2C_Init+0x92>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4a7d      	ldr	r2, [pc, #500]	; (8002820 <HAL_I2C_Init+0x27c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	bf94      	ite	ls
 8002630:	2301      	movls	r3, #1
 8002632:	2300      	movhi	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e0e7      	b.n	800280e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	4a78      	ldr	r2, [pc, #480]	; (8002824 <HAL_I2C_Init+0x280>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0c9b      	lsrs	r3, r3, #18
 8002648:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	430a      	orrs	r2, r1
 800265c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	4a6a      	ldr	r2, [pc, #424]	; (8002818 <HAL_I2C_Init+0x274>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d802      	bhi.n	8002678 <HAL_I2C_Init+0xd4>
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	3301      	adds	r3, #1
 8002676:	e009      	b.n	800268c <HAL_I2C_Init+0xe8>
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800267e:	fb02 f303 	mul.w	r3, r2, r3
 8002682:	4a69      	ldr	r2, [pc, #420]	; (8002828 <HAL_I2C_Init+0x284>)
 8002684:	fba2 2303 	umull	r2, r3, r2, r3
 8002688:	099b      	lsrs	r3, r3, #6
 800268a:	3301      	adds	r3, #1
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6812      	ldr	r2, [r2, #0]
 8002690:	430b      	orrs	r3, r1
 8002692:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800269e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	495c      	ldr	r1, [pc, #368]	; (8002818 <HAL_I2C_Init+0x274>)
 80026a8:	428b      	cmp	r3, r1
 80026aa:	d819      	bhi.n	80026e0 <HAL_I2C_Init+0x13c>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e59      	subs	r1, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80026ba:	1c59      	adds	r1, r3, #1
 80026bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80026c0:	400b      	ands	r3, r1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_I2C_Init+0x138>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	1e59      	subs	r1, r3, #1
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80026d4:	3301      	adds	r3, #1
 80026d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026da:	e051      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 80026dc:	2304      	movs	r3, #4
 80026de:	e04f      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d111      	bne.n	800270c <HAL_I2C_Init+0x168>
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1e58      	subs	r0, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	440b      	add	r3, r1
 80026f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026fa:	3301      	adds	r3, #1
 80026fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002700:	2b00      	cmp	r3, #0
 8002702:	bf0c      	ite	eq
 8002704:	2301      	moveq	r3, #1
 8002706:	2300      	movne	r3, #0
 8002708:	b2db      	uxtb	r3, r3
 800270a:	e012      	b.n	8002732 <HAL_I2C_Init+0x18e>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1e58      	subs	r0, r3, #1
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	460b      	mov	r3, r1
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	0099      	lsls	r1, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002722:	3301      	adds	r3, #1
 8002724:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002728:	2b00      	cmp	r3, #0
 800272a:	bf0c      	ite	eq
 800272c:	2301      	moveq	r3, #1
 800272e:	2300      	movne	r3, #0
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_I2C_Init+0x196>
 8002736:	2301      	movs	r3, #1
 8002738:	e022      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10e      	bne.n	8002760 <HAL_I2C_Init+0x1bc>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1e58      	subs	r0, r3, #1
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6859      	ldr	r1, [r3, #4]
 800274a:	460b      	mov	r3, r1
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	440b      	add	r3, r1
 8002750:	fbb0 f3f3 	udiv	r3, r0, r3
 8002754:	3301      	adds	r3, #1
 8002756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800275a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800275e:	e00f      	b.n	8002780 <HAL_I2C_Init+0x1dc>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	0099      	lsls	r1, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	fbb0 f3f3 	udiv	r3, r0, r3
 8002776:	3301      	adds	r3, #1
 8002778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800277c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	6809      	ldr	r1, [r1, #0]
 8002784:	4313      	orrs	r3, r2
 8002786:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69da      	ldr	r2, [r3, #28]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80027ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6911      	ldr	r1, [r2, #16]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	4311      	orrs	r1, r2
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695a      	ldr	r2, [r3, #20]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800280c:	2300      	movs	r3, #0
}
 800280e:	4618      	mov	r0, r3
 8002810:	3710      	adds	r7, #16
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	000186a0 	.word	0x000186a0
 800281c:	001e847f 	.word	0x001e847f
 8002820:	003d08ff 	.word	0x003d08ff
 8002824:	431bde83 	.word	0x431bde83
 8002828:	10624dd3 	.word	0x10624dd3

0800282c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b088      	sub	sp, #32
 8002830:	af02      	add	r7, sp, #8
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	4608      	mov	r0, r1
 8002836:	4611      	mov	r1, r2
 8002838:	461a      	mov	r2, r3
 800283a:	4603      	mov	r3, r0
 800283c:	817b      	strh	r3, [r7, #10]
 800283e:	460b      	mov	r3, r1
 8002840:	813b      	strh	r3, [r7, #8]
 8002842:	4613      	mov	r3, r2
 8002844:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002846:	f7ff fba5 	bl	8001f94 <HAL_GetTick>
 800284a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b20      	cmp	r3, #32
 8002856:	f040 80d9 	bne.w	8002a0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	9300      	str	r3, [sp, #0]
 800285e:	2319      	movs	r3, #25
 8002860:	2201      	movs	r2, #1
 8002862:	496d      	ldr	r1, [pc, #436]	; (8002a18 <HAL_I2C_Mem_Write+0x1ec>)
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f000 f971 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d001      	beq.n	8002874 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
 8002872:	e0cc      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <HAL_I2C_Mem_Write+0x56>
 800287e:	2302      	movs	r3, #2
 8002880:	e0c5      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0301 	and.w	r3, r3, #1
 8002894:	2b01      	cmp	r3, #1
 8002896:	d007      	beq.n	80028a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f042 0201 	orr.w	r2, r2, #1
 80028a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2221      	movs	r2, #33	; 0x21
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2240      	movs	r2, #64	; 0x40
 80028c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a3a      	ldr	r2, [r7, #32]
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80028d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	4a4d      	ldr	r2, [pc, #308]	; (8002a1c <HAL_I2C_Mem_Write+0x1f0>)
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028ea:	88f8      	ldrh	r0, [r7, #6]
 80028ec:	893a      	ldrh	r2, [r7, #8]
 80028ee:	8979      	ldrh	r1, [r7, #10]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	9301      	str	r3, [sp, #4]
 80028f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	4603      	mov	r3, r0
 80028fa:	68f8      	ldr	r0, [r7, #12]
 80028fc:	f000 f890 	bl	8002a20 <I2C_RequestMemoryWrite>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d052      	beq.n	80029ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e081      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800290a:	697a      	ldr	r2, [r7, #20]
 800290c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	f000 fa36 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00d      	beq.n	8002936 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	2b04      	cmp	r3, #4
 8002920:	d107      	bne.n	8002932 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002930:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e06b      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	781a      	ldrb	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b04      	cmp	r3, #4
 8002972:	d11b      	bne.n	80029ac <HAL_I2C_Mem_Write+0x180>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	2b00      	cmp	r3, #0
 800297a:	d017      	beq.n	80029ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	781a      	ldrb	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002996:	3b01      	subs	r3, #1
 8002998:	b29a      	uxth	r2, r3
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	3b01      	subs	r3, #1
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1aa      	bne.n	800290a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	697a      	ldr	r2, [r7, #20]
 80029b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fa29 	bl	8002e10 <I2C_WaitOnBTFFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d00d      	beq.n	80029e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d107      	bne.n	80029dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e016      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e000      	b.n	8002a0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002a0c:	2302      	movs	r3, #2
  }
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3718      	adds	r7, #24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	00100002 	.word	0x00100002
 8002a1c:	ffff0000 	.word	0xffff0000

08002a20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b088      	sub	sp, #32
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	4608      	mov	r0, r1
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	817b      	strh	r3, [r7, #10]
 8002a32:	460b      	mov	r3, r1
 8002a34:	813b      	strh	r3, [r7, #8]
 8002a36:	4613      	mov	r3, r2
 8002a38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002a56:	68f8      	ldr	r0, [r7, #12]
 8002a58:	f000 f878 	bl	8002b4c <I2C_WaitOnFlagUntilTimeout>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00d      	beq.n	8002a7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a70:	d103      	bne.n	8002a7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a78:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e05f      	b.n	8002b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a7e:	897b      	ldrh	r3, [r7, #10]
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	461a      	mov	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	492d      	ldr	r1, [pc, #180]	; (8002b48 <I2C_RequestMemoryWrite+0x128>)
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f000 f8d3 	bl	8002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e04c      	b.n	8002b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002abc:	6a39      	ldr	r1, [r7, #32]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f95e 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d107      	bne.n	8002ae2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ae0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e02b      	b.n	8002b3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ae6:	88fb      	ldrh	r3, [r7, #6]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	611a      	str	r2, [r3, #16]
 8002af6:	e021      	b.n	8002b3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002af8:	893b      	ldrh	r3, [r7, #8]
 8002afa:	0a1b      	lsrs	r3, r3, #8
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	6a39      	ldr	r1, [r7, #32]
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 f938 	bl	8002d80 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00d      	beq.n	8002b32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	2b04      	cmp	r3, #4
 8002b1c:	d107      	bne.n	8002b2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e005      	b.n	8002b3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b32:	893b      	ldrh	r3, [r7, #8]
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3718      	adds	r7, #24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	00010002 	.word	0x00010002

08002b4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	60f8      	str	r0, [r7, #12]
 8002b54:	60b9      	str	r1, [r7, #8]
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b5c:	e048      	b.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d044      	beq.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b66:	f7ff fa15 	bl	8001f94 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d302      	bcc.n	8002b7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d139      	bne.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	0c1b      	lsrs	r3, r3, #16
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d10d      	bne.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	43da      	mvns	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	4013      	ands	r3, r2
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	bf0c      	ite	eq
 8002b98:	2301      	moveq	r3, #1
 8002b9a:	2300      	movne	r3, #0
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	e00c      	b.n	8002bbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4013      	ands	r3, r2
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	79fb      	ldrb	r3, [r7, #7]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d116      	bne.n	8002bf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f043 0220 	orr.w	r2, r3, #32
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e023      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d10d      	bne.n	8002c16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	43da      	mvns	r2, r3
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	4013      	ands	r3, r2
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	461a      	mov	r2, r3
 8002c14:	e00c      	b.n	8002c30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	79fb      	ldrb	r3, [r7, #7]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d093      	beq.n	8002b5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c4e:	e071      	b.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c5e:	d123      	bne.n	8002ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2220      	movs	r2, #32
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f043 0204 	orr.w	r2, r3, #4
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e067      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cae:	d041      	beq.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb0:	f7ff f970 	bl	8001f94 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d302      	bcc.n	8002cc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d136      	bne.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d10c      	bne.n	8002cea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf14      	ite	ne
 8002ce2:	2301      	movne	r3, #1
 8002ce4:	2300      	moveq	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	e00b      	b.n	8002d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	43da      	mvns	r2, r3
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d016      	beq.n	8002d34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d20:	f043 0220 	orr.w	r2, r3, #32
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e021      	b.n	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	0c1b      	lsrs	r3, r3, #16
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d10c      	bne.n	8002d58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695b      	ldr	r3, [r3, #20]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e00b      	b.n	8002d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	43da      	mvns	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	4013      	ands	r3, r2
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f af6d 	bne.w	8002c50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	60f8      	str	r0, [r7, #12]
 8002d88:	60b9      	str	r1, [r7, #8]
 8002d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d8c:	e034      	b.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f886 	bl	8002ea0 <I2C_IsAcknowledgeFailed>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e034      	b.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da4:	d028      	beq.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da6:	f7ff f8f5 	bl	8001f94 <HAL_GetTick>
 8002daa:	4602      	mov	r2, r0
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d11d      	bne.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc6:	2b80      	cmp	r3, #128	; 0x80
 8002dc8:	d016      	beq.n	8002df8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2220      	movs	r2, #32
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	f043 0220 	orr.w	r2, r3, #32
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e007      	b.n	8002e08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e02:	2b80      	cmp	r3, #128	; 0x80
 8002e04:	d1c3      	bne.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e1c:	e034      	b.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f83e 	bl	8002ea0 <I2C_IsAcknowledgeFailed>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e034      	b.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e34:	d028      	beq.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7ff f8ad 	bl	8001f94 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d11d      	bne.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	695b      	ldr	r3, [r3, #20]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d016      	beq.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2220      	movs	r2, #32
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	f043 0220 	orr.w	r2, r3, #32
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e007      	b.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f003 0304 	and.w	r3, r3, #4
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d1c3      	bne.n	8002e1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eb6:	d11b      	bne.n	8002ef0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ec0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2220      	movs	r2, #32
 8002ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002edc:	f043 0204 	orr.w	r2, r3, #4
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr

08002efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e272      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8087 	beq.w	800302a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f1c:	4b92      	ldr	r3, [pc, #584]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b04      	cmp	r3, #4
 8002f26:	d00c      	beq.n	8002f42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f28:	4b8f      	ldr	r3, [pc, #572]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d112      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
 8002f34:	4b8c      	ldr	r3, [pc, #560]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d10b      	bne.n	8002f5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f42:	4b89      	ldr	r3, [pc, #548]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d06c      	beq.n	8003028 <HAL_RCC_OscConfig+0x12c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d168      	bne.n	8003028 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e24c      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x76>
 8002f64:	4b80      	ldr	r3, [pc, #512]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a7f      	ldr	r2, [pc, #508]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	e02e      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x98>
 8002f7a:	4b7b      	ldr	r3, [pc, #492]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7a      	ldr	r2, [pc, #488]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b78      	ldr	r3, [pc, #480]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a77      	ldr	r2, [pc, #476]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002f8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e01d      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0xbc>
 8002f9e:	4b72      	ldr	r3, [pc, #456]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a71      	ldr	r2, [pc, #452]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b6f      	ldr	r3, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a6e      	ldr	r2, [pc, #440]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e00b      	b.n	8002fd0 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a6a      	ldr	r2, [pc, #424]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	4b68      	ldr	r3, [pc, #416]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a67      	ldr	r2, [pc, #412]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002fca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d013      	beq.n	8003000 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe ffdc 	bl	8001f94 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe0:	f7fe ffd8 	bl	8001f94 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b64      	cmp	r3, #100	; 0x64
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e200      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ff2:	4b5d      	ldr	r3, [pc, #372]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0xe4>
 8002ffe:	e014      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe ffc8 	bl	8001f94 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003008:	f7fe ffc4 	bl	8001f94 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e1ec      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800301a:	4b53      	ldr	r3, [pc, #332]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x10c>
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d063      	beq.n	80030fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003036:	4b4c      	ldr	r3, [pc, #304]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 030c 	and.w	r3, r3, #12
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00b      	beq.n	800305a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003042:	4b49      	ldr	r3, [pc, #292]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f003 030c 	and.w	r3, r3, #12
 800304a:	2b08      	cmp	r3, #8
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
 800304e:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003056:	2b00      	cmp	r3, #0
 8003058:	d116      	bne.n	8003088 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800305a:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d005      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	2b01      	cmp	r3, #1
 800306c:	d001      	beq.n	8003072 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e1c0      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003072:	4b3d      	ldr	r3, [pc, #244]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	4939      	ldr	r1, [pc, #228]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003082:	4313      	orrs	r3, r2
 8003084:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003086:	e03a      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d020      	beq.n	80030d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003090:	4b36      	ldr	r3, [pc, #216]	; (800316c <HAL_RCC_OscConfig+0x270>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fe ff7d 	bl	8001f94 <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309e:	f7fe ff79 	bl	8001f94 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e1a1      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b0:	4b2d      	ldr	r3, [pc, #180]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4927      	ldr	r1, [pc, #156]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	600b      	str	r3, [r1, #0]
 80030d0:	e015      	b.n	80030fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d2:	4b26      	ldr	r3, [pc, #152]	; (800316c <HAL_RCC_OscConfig+0x270>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe ff5c 	bl	8001f94 <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e0:	f7fe ff58 	bl	8001f94 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e180      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d03a      	beq.n	8003180 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d019      	beq.n	8003146 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 8003114:	2201      	movs	r2, #1
 8003116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003118:	f7fe ff3c 	bl	8001f94 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003120:	f7fe ff38 	bl	8001f94 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e160      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003132:	4b0d      	ldr	r3, [pc, #52]	; (8003168 <HAL_RCC_OscConfig+0x26c>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d0f0      	beq.n	8003120 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800313e:	2001      	movs	r0, #1
 8003140:	f000 faba 	bl	80036b8 <RCC_Delay>
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_RCC_OscConfig+0x274>)
 8003148:	2200      	movs	r2, #0
 800314a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314c:	f7fe ff22 	bl	8001f94 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003152:	e00f      	b.n	8003174 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003154:	f7fe ff1e 	bl	8001f94 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	2b02      	cmp	r3, #2
 8003160:	d908      	bls.n	8003174 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e146      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
 8003166:	bf00      	nop
 8003168:	40021000 	.word	0x40021000
 800316c:	42420000 	.word	0x42420000
 8003170:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b92      	ldr	r3, [pc, #584]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1e9      	bne.n	8003154 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 80a6 	beq.w	80032da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b8b      	ldr	r3, [pc, #556]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10d      	bne.n	80031ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b88      	ldr	r3, [pc, #544]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a87      	ldr	r2, [pc, #540]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b85      	ldr	r3, [pc, #532]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b6:	2301      	movs	r3, #1
 80031b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ba:	4b82      	ldr	r3, [pc, #520]	; (80033c4 <HAL_RCC_OscConfig+0x4c8>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d118      	bne.n	80031f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031c6:	4b7f      	ldr	r3, [pc, #508]	; (80033c4 <HAL_RCC_OscConfig+0x4c8>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a7e      	ldr	r2, [pc, #504]	; (80033c4 <HAL_RCC_OscConfig+0x4c8>)
 80031cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d2:	f7fe fedf 	bl	8001f94 <HAL_GetTick>
 80031d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d8:	e008      	b.n	80031ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031da:	f7fe fedb 	bl	8001f94 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b64      	cmp	r3, #100	; 0x64
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e103      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ec:	4b75      	ldr	r3, [pc, #468]	; (80033c4 <HAL_RCC_OscConfig+0x4c8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0f0      	beq.n	80031da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x312>
 8003200:	4b6f      	ldr	r3, [pc, #444]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	4a6e      	ldr	r2, [pc, #440]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	f043 0301 	orr.w	r3, r3, #1
 800320a:	6213      	str	r3, [r2, #32]
 800320c:	e02d      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x334>
 8003216:	4b6a      	ldr	r3, [pc, #424]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	4a69      	ldr	r2, [pc, #420]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800321c:	f023 0301 	bic.w	r3, r3, #1
 8003220:	6213      	str	r3, [r2, #32]
 8003222:	4b67      	ldr	r3, [pc, #412]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4a66      	ldr	r2, [pc, #408]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003228:	f023 0304 	bic.w	r3, r3, #4
 800322c:	6213      	str	r3, [r2, #32]
 800322e:	e01c      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	2b05      	cmp	r3, #5
 8003236:	d10c      	bne.n	8003252 <HAL_RCC_OscConfig+0x356>
 8003238:	4b61      	ldr	r3, [pc, #388]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4a60      	ldr	r2, [pc, #384]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	6213      	str	r3, [r2, #32]
 8003244:	4b5e      	ldr	r3, [pc, #376]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6213      	str	r3, [r2, #32]
 8003250:	e00b      	b.n	800326a <HAL_RCC_OscConfig+0x36e>
 8003252:	4b5b      	ldr	r3, [pc, #364]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	4a5a      	ldr	r2, [pc, #360]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	6213      	str	r3, [r2, #32]
 800325e:	4b58      	ldr	r3, [pc, #352]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	4a57      	ldr	r2, [pc, #348]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003264:	f023 0304 	bic.w	r3, r3, #4
 8003268:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d015      	beq.n	800329e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003272:	f7fe fe8f 	bl	8001f94 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003278:	e00a      	b.n	8003290 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800327a:	f7fe fe8b 	bl	8001f94 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	f241 3288 	movw	r2, #5000	; 0x1388
 8003288:	4293      	cmp	r3, r2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e0b1      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003290:	4b4b      	ldr	r3, [pc, #300]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003292:	6a1b      	ldr	r3, [r3, #32]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0ee      	beq.n	800327a <HAL_RCC_OscConfig+0x37e>
 800329c:	e014      	b.n	80032c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800329e:	f7fe fe79 	bl	8001f94 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a4:	e00a      	b.n	80032bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032a6:	f7fe fe75 	bl	8001f94 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e09b      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032bc:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1ee      	bne.n	80032a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032c8:	7dfb      	ldrb	r3, [r7, #23]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d105      	bne.n	80032da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ce:	4b3c      	ldr	r3, [pc, #240]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	4a3b      	ldr	r2, [pc, #236]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8087 	beq.w	80033f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032e4:	4b36      	ldr	r3, [pc, #216]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f003 030c 	and.w	r3, r3, #12
 80032ec:	2b08      	cmp	r3, #8
 80032ee:	d061      	beq.n	80033b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69db      	ldr	r3, [r3, #28]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d146      	bne.n	8003386 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032f8:	4b33      	ldr	r3, [pc, #204]	; (80033c8 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fe49 	bl	8001f94 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe fe45 	bl	8001f94 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e06d      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003318:	4b29      	ldr	r3, [pc, #164]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d108      	bne.n	8003340 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800332e:	4b24      	ldr	r3, [pc, #144]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	4921      	ldr	r1, [pc, #132]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800333c:	4313      	orrs	r3, r2
 800333e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003340:	4b1f      	ldr	r3, [pc, #124]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a19      	ldr	r1, [r3, #32]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	430b      	orrs	r3, r1
 8003352:	491b      	ldr	r1, [pc, #108]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003358:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x4cc>)
 800335a:	2201      	movs	r2, #1
 800335c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800335e:	f7fe fe19 	bl	8001f94 <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003366:	f7fe fe15 	bl	8001f94 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e03d      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003378:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x46a>
 8003384:	e035      	b.n	80033f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b10      	ldr	r3, [pc, #64]	; (80033c8 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe fe02 	bl	8001f94 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fdfe 	bl	8001f94 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e026      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x498>
 80033b2:	e01e      	b.n	80033f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	69db      	ldr	r3, [r3, #28]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d107      	bne.n	80033cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e019      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40007000 	.word	0x40007000
 80033c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033cc:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_OscConfig+0x500>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d106      	bne.n	80033ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3718      	adds	r7, #24
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0d0      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003414:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	683a      	ldr	r2, [r7, #0]
 800341e:	429a      	cmp	r2, r3
 8003420:	d910      	bls.n	8003444 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003422:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f023 0207 	bic.w	r2, r3, #7
 800342a:	4965      	ldr	r1, [pc, #404]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	4313      	orrs	r3, r2
 8003430:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	4a58      	ldr	r2, [pc, #352]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003466:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	4a52      	ldr	r2, [pc, #328]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800347e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d040      	beq.n	8003520 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d115      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d107      	bne.n	80034ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034be:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e073      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ce:	4b3d      	ldr	r3, [pc, #244]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d101      	bne.n	80034de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e06b      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034de:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f023 0203 	bic.w	r2, r3, #3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4936      	ldr	r1, [pc, #216]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f0:	f7fe fd50 	bl	8001f94 <HAL_GetTick>
 80034f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f6:	e00a      	b.n	800350e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f8:	f7fe fd4c 	bl	8001f94 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e053      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	4b2d      	ldr	r3, [pc, #180]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 020c 	and.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	429a      	cmp	r2, r3
 800351e:	d1eb      	bne.n	80034f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003520:	4b27      	ldr	r3, [pc, #156]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0307 	and.w	r3, r3, #7
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d210      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 0207 	bic.w	r2, r3, #7
 8003536:	4922      	ldr	r1, [pc, #136]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	4313      	orrs	r3, r2
 800353c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	; (80035c0 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800356a:	4313      	orrs	r3, r2
 800356c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800357a:	4b12      	ldr	r3, [pc, #72]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	4313      	orrs	r3, r2
 800358c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	; (80035c4 <HAL_RCC_ClockConfig+0x1c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	; (80035c8 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	; (80035cc <HAL_RCC_ClockConfig+0x1cc>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <HAL_RCC_ClockConfig+0x1d0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe fcae 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40021000 	.word	0x40021000
 80035c8:	080049cc 	.word	0x080049cc
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b087      	sub	sp, #28
 80035d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	2300      	movs	r3, #0
 80035e0:	60bb      	str	r3, [r7, #8]
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	2300      	movs	r3, #0
 80035e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ee:	4b1e      	ldr	r3, [pc, #120]	; (8003668 <HAL_RCC_GetSysClockFreq+0x94>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x30>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x36>
 8003602:	e027      	b.n	8003654 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003604:	4b19      	ldr	r3, [pc, #100]	; (800366c <HAL_RCC_GetSysClockFreq+0x98>)
 8003606:	613b      	str	r3, [r7, #16]
      break;
 8003608:	e027      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	4a17      	ldr	r2, [pc, #92]	; (8003670 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003614:	5cd3      	ldrb	r3, [r2, r3]
 8003616:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d010      	beq.n	8003644 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003622:	4b11      	ldr	r3, [pc, #68]	; (8003668 <HAL_RCC_GetSysClockFreq+0x94>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	0c5b      	lsrs	r3, r3, #17
 8003628:	f003 0301 	and.w	r3, r3, #1
 800362c:	4a11      	ldr	r2, [pc, #68]	; (8003674 <HAL_RCC_GetSysClockFreq+0xa0>)
 800362e:	5cd3      	ldrb	r3, [r2, r3]
 8003630:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a0d      	ldr	r2, [pc, #52]	; (800366c <HAL_RCC_GetSysClockFreq+0x98>)
 8003636:	fb03 f202 	mul.w	r2, r3, r2
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e004      	b.n	800364e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a0c      	ldr	r2, [pc, #48]	; (8003678 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003648:	fb02 f303 	mul.w	r3, r2, r3
 800364c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	613b      	str	r3, [r7, #16]
      break;
 8003652:	e002      	b.n	800365a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003654:	4b05      	ldr	r3, [pc, #20]	; (800366c <HAL_RCC_GetSysClockFreq+0x98>)
 8003656:	613b      	str	r3, [r7, #16]
      break;
 8003658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365a:	693b      	ldr	r3, [r7, #16]
}
 800365c:	4618      	mov	r0, r3
 800365e:	371c      	adds	r7, #28
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40021000 	.word	0x40021000
 800366c:	007a1200 	.word	0x007a1200
 8003670:	0800517c 	.word	0x0800517c
 8003674:	0800518c 	.word	0x0800518c
 8003678:	003d0900 	.word	0x003d0900

0800367c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003680:	4b02      	ldr	r3, [pc, #8]	; (800368c <HAL_RCC_GetHCLKFreq+0x10>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	20000000 	.word	0x20000000

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003694:	f7ff fff2 	bl	800367c <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	0a1b      	lsrs	r3, r3, #8
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40021000 	.word	0x40021000
 80036b4:	080049dc 	.word	0x080049dc

080036b8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036c0:	4b0a      	ldr	r3, [pc, #40]	; (80036ec <RCC_Delay+0x34>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <RCC_Delay+0x38>)
 80036c6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ca:	0a5b      	lsrs	r3, r3, #9
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036d4:	bf00      	nop
  }
  while (Delay --);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1e5a      	subs	r2, r3, #1
 80036da:	60fa      	str	r2, [r7, #12]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f9      	bne.n	80036d4 <RCC_Delay+0x1c>
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	20000000 	.word	0x20000000
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e076      	b.n	80037f4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003716:	d009      	beq.n	800372c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	61da      	str	r2, [r3, #28]
 800371e:	e005      	b.n	800372c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fc4e 	bl	8000fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003762:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f003 0302 	and.w	r3, r3, #2
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800379c:	431a      	orrs	r2, r3
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037a6:	431a      	orrs	r2, r3
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	ea42 0103 	orr.w	r1, r2, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	0c1a      	lsrs	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f002 0204 	and.w	r2, r2, #4
 80037d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2200      	movs	r2, #0
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2201      	movs	r2, #1
 80037ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b088      	sub	sp, #32
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800380c:	2300      	movs	r3, #0
 800380e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003816:	2b01      	cmp	r3, #1
 8003818:	d101      	bne.n	800381e <HAL_SPI_Transmit+0x22>
 800381a:	2302      	movs	r3, #2
 800381c:	e12d      	b.n	8003a7a <HAL_SPI_Transmit+0x27e>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003826:	f7fe fbb5 	bl	8001f94 <HAL_GetTick>
 800382a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800382c:	88fb      	ldrh	r3, [r7, #6]
 800382e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003836:	b2db      	uxtb	r3, r3
 8003838:	2b01      	cmp	r3, #1
 800383a:	d002      	beq.n	8003842 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800383c:	2302      	movs	r3, #2
 800383e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003840:	e116      	b.n	8003a70 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <HAL_SPI_Transmit+0x52>
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d102      	bne.n	8003854 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003852:	e10d      	b.n	8003a70 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2203      	movs	r2, #3
 8003858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2200      	movs	r2, #0
 8003860:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	88fa      	ldrh	r2, [r7, #6]
 8003872:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800389a:	d10f      	bne.n	80038bc <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038aa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c6:	2b40      	cmp	r3, #64	; 0x40
 80038c8:	d007      	beq.n	80038da <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038d8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038e2:	d14f      	bne.n	8003984 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d002      	beq.n	80038f2 <HAL_SPI_Transmit+0xf6>
 80038ec:	8afb      	ldrh	r3, [r7, #22]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d142      	bne.n	8003978 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f6:	881a      	ldrh	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003902:	1c9a      	adds	r2, r3, #2
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003916:	e02f      	b.n	8003978 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d112      	bne.n	800394c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	881a      	ldrh	r2, [r3, #0]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	1c9a      	adds	r2, r3, #2
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003940:	b29b      	uxth	r3, r3
 8003942:	3b01      	subs	r3, #1
 8003944:	b29a      	uxth	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	86da      	strh	r2, [r3, #54]	; 0x36
 800394a:	e015      	b.n	8003978 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800394c:	f7fe fb22 	bl	8001f94 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d803      	bhi.n	8003964 <HAL_SPI_Transmit+0x168>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d102      	bne.n	800396a <HAL_SPI_Transmit+0x16e>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003976:	e07b      	b.n	8003a70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800397c:	b29b      	uxth	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1ca      	bne.n	8003918 <HAL_SPI_Transmit+0x11c>
 8003982:	e050      	b.n	8003a26 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <HAL_SPI_Transmit+0x196>
 800398c:	8afb      	ldrh	r3, [r7, #22]
 800398e:	2b01      	cmp	r3, #1
 8003990:	d144      	bne.n	8003a1c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	330c      	adds	r3, #12
 800399c:	7812      	ldrb	r2, [r2, #0]
 800399e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	1c5a      	adds	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80039b8:	e030      	b.n	8003a1c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f003 0302 	and.w	r3, r3, #2
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d113      	bne.n	80039f0 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	86da      	strh	r2, [r3, #54]	; 0x36
 80039ee:	e015      	b.n	8003a1c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039f0:	f7fe fad0 	bl	8001f94 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d803      	bhi.n	8003a08 <HAL_SPI_Transmit+0x20c>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d102      	bne.n	8003a0e <HAL_SPI_Transmit+0x212>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d106      	bne.n	8003a1c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003a1a:	e029      	b.n	8003a70 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1c9      	bne.n	80039ba <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	6839      	ldr	r1, [r7, #0]
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fa6e 	bl	8003f0c <SPI_EndRxTxTransaction>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d002      	beq.n	8003a3c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d10a      	bne.n	8003a5a <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a44:	2300      	movs	r3, #0
 8003a46:	613b      	str	r3, [r7, #16]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d002      	beq.n	8003a68 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	77fb      	strb	r3, [r7, #31]
 8003a66:	e003      	b.n	8003a70 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a78:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3720      	adds	r7, #32
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a82:	b580      	push	{r7, lr}
 8003a84:	b08c      	sub	sp, #48	; 0x30
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	60f8      	str	r0, [r7, #12]
 8003a8a:	60b9      	str	r1, [r7, #8]
 8003a8c:	607a      	str	r2, [r7, #4]
 8003a8e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a90:	2301      	movs	r3, #1
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d101      	bne.n	8003aa8 <HAL_SPI_TransmitReceive+0x26>
 8003aa4:	2302      	movs	r3, #2
 8003aa6:	e198      	b.n	8003dda <HAL_SPI_TransmitReceive+0x358>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ab0:	f7fe fa70 	bl	8001f94 <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003abc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003ac6:	887b      	ldrh	r3, [r7, #2]
 8003ac8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003aca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d00f      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x70>
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ad8:	d107      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d103      	bne.n	8003aea <HAL_SPI_TransmitReceive+0x68>
 8003ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d003      	beq.n	8003af2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
 8003aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003af0:	e16d      	b.n	8003dce <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_SPI_TransmitReceive+0x82>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d002      	beq.n	8003b04 <HAL_SPI_TransmitReceive+0x82>
 8003afe:	887b      	ldrh	r3, [r7, #2]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003b0a:	e160      	b.n	8003dce <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d003      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	887a      	ldrh	r2, [r7, #2]
 8003b30:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	887a      	ldrh	r2, [r7, #2]
 8003b36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	887a      	ldrh	r2, [r7, #2]
 8003b42:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b60:	2b40      	cmp	r3, #64	; 0x40
 8003b62:	d007      	beq.n	8003b74 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b7c:	d17c      	bne.n	8003c78 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x10a>
 8003b86:	8b7b      	ldrh	r3, [r7, #26]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d16a      	bne.n	8003c62 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	1c9a      	adds	r2, r3, #2
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bb0:	e057      	b.n	8003c62 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x176>
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d016      	beq.n	8003bf8 <HAL_SPI_TransmitReceive+0x176>
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d113      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd4:	881a      	ldrh	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	1c9a      	adds	r2, r3, #2
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d119      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x1b8>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d014      	beq.n	8003c3a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68da      	ldr	r2, [r3, #12]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	b292      	uxth	r2, r2
 8003c1c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c22:	1c9a      	adds	r2, r3, #2
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	b29a      	uxth	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c36:	2301      	movs	r3, #1
 8003c38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003c3a:	f7fe f9ab 	bl	8001f94 <HAL_GetTick>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d80b      	bhi.n	8003c62 <HAL_SPI_TransmitReceive+0x1e0>
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c50:	d007      	beq.n	8003c62 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003c60:	e0b5      	b.n	8003dce <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1a2      	bne.n	8003bb2 <HAL_SPI_TransmitReceive+0x130>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d19d      	bne.n	8003bb2 <HAL_SPI_TransmitReceive+0x130>
 8003c76:	e080      	b.n	8003d7a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_SPI_TransmitReceive+0x204>
 8003c80:	8b7b      	ldrh	r3, [r7, #26]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d16f      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	7812      	ldrb	r2, [r2, #0]
 8003c92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	3b01      	subs	r3, #1
 8003ca6:	b29a      	uxth	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cac:	e05b      	b.n	8003d66 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d11c      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x274>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc0:	b29b      	uxth	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d017      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x274>
 8003cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d114      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	330c      	adds	r3, #12
 8003cd6:	7812      	ldrb	r2, [r2, #0]
 8003cd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d119      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x2b6>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d014      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	b2d2      	uxtb	r2, r2
 8003d1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d34:	2301      	movs	r3, #1
 8003d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d38:	f7fe f92c 	bl	8001f94 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d803      	bhi.n	8003d50 <HAL_SPI_TransmitReceive+0x2ce>
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4e:	d102      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x2d4>
 8003d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d107      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003d64:	e033      	b.n	8003dce <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d19e      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x22c>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d199      	bne.n	8003cae <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f8c4 	bl	8003f0c <SPI_EndRxTxTransaction>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d006      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d96:	e01a      	b.n	8003dce <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10a      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	617b      	str	r3, [r7, #20]
 8003db4:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc4:	e003      	b.n	8003dce <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dd6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3730      	adds	r7, #48	; 0x30
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003de2:	b480      	push	{r7}
 8003de4:	b083      	sub	sp, #12
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003df0:	b2db      	uxtb	r3, r3
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b088      	sub	sp, #32
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	603b      	str	r3, [r7, #0]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e0c:	f7fe f8c2 	bl	8001f94 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	4413      	add	r3, r2
 8003e1a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e1c:	f7fe f8ba 	bl	8001f94 <HAL_GetTick>
 8003e20:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e22:	4b39      	ldr	r3, [pc, #228]	; (8003f08 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	015b      	lsls	r3, r3, #5
 8003e28:	0d1b      	lsrs	r3, r3, #20
 8003e2a:	69fa      	ldr	r2, [r7, #28]
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
 8003e30:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e32:	e054      	b.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d050      	beq.n	8003ede <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e3c:	f7fe f8aa 	bl	8001f94 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d902      	bls.n	8003e52 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d13d      	bne.n	8003ece <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e60:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d111      	bne.n	8003e90 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e74:	d004      	beq.n	8003e80 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e7e:	d107      	bne.n	8003e90 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e8e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e98:	d10f      	bne.n	8003eba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ea8:	601a      	str	r2, [r3, #0]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eb8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e017      	b.n	8003efe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	bf0c      	ite	eq
 8003eee:	2301      	moveq	r3, #1
 8003ef0:	2300      	movne	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	79fb      	ldrb	r3, [r7, #7]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d19b      	bne.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003efc:	2300      	movs	r3, #0
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3720      	adds	r7, #32
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	20000000 	.word	0x20000000

08003f0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	2180      	movs	r1, #128	; 0x80
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff ff6a 	bl	8003dfc <SPI_WaitFlagStateUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e000      	b.n	8003f40 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <__errno>:
 8003f48:	4b01      	ldr	r3, [pc, #4]	; (8003f50 <__errno+0x8>)
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	4770      	bx	lr
 8003f4e:	bf00      	nop
 8003f50:	2000000c 	.word	0x2000000c

08003f54 <__libc_init_array>:
 8003f54:	b570      	push	{r4, r5, r6, lr}
 8003f56:	2600      	movs	r6, #0
 8003f58:	4d0c      	ldr	r5, [pc, #48]	; (8003f8c <__libc_init_array+0x38>)
 8003f5a:	4c0d      	ldr	r4, [pc, #52]	; (8003f90 <__libc_init_array+0x3c>)
 8003f5c:	1b64      	subs	r4, r4, r5
 8003f5e:	10a4      	asrs	r4, r4, #2
 8003f60:	42a6      	cmp	r6, r4
 8003f62:	d109      	bne.n	8003f78 <__libc_init_array+0x24>
 8003f64:	f000 fc9c 	bl	80048a0 <_init>
 8003f68:	2600      	movs	r6, #0
 8003f6a:	4d0a      	ldr	r5, [pc, #40]	; (8003f94 <__libc_init_array+0x40>)
 8003f6c:	4c0a      	ldr	r4, [pc, #40]	; (8003f98 <__libc_init_array+0x44>)
 8003f6e:	1b64      	subs	r4, r4, r5
 8003f70:	10a4      	asrs	r4, r4, #2
 8003f72:	42a6      	cmp	r6, r4
 8003f74:	d105      	bne.n	8003f82 <__libc_init_array+0x2e>
 8003f76:	bd70      	pop	{r4, r5, r6, pc}
 8003f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f7c:	4798      	blx	r3
 8003f7e:	3601      	adds	r6, #1
 8003f80:	e7ee      	b.n	8003f60 <__libc_init_array+0xc>
 8003f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f86:	4798      	blx	r3
 8003f88:	3601      	adds	r6, #1
 8003f8a:	e7f2      	b.n	8003f72 <__libc_init_array+0x1e>
 8003f8c:	080051cc 	.word	0x080051cc
 8003f90:	080051cc 	.word	0x080051cc
 8003f94:	080051cc 	.word	0x080051cc
 8003f98:	080051d0 	.word	0x080051d0

08003f9c <memcpy>:
 8003f9c:	440a      	add	r2, r1
 8003f9e:	4291      	cmp	r1, r2
 8003fa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8003fa4:	d100      	bne.n	8003fa8 <memcpy+0xc>
 8003fa6:	4770      	bx	lr
 8003fa8:	b510      	push	{r4, lr}
 8003faa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fae:	4291      	cmp	r1, r2
 8003fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003fb4:	d1f9      	bne.n	8003faa <memcpy+0xe>
 8003fb6:	bd10      	pop	{r4, pc}

08003fb8 <memset>:
 8003fb8:	4603      	mov	r3, r0
 8003fba:	4402      	add	r2, r0
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d100      	bne.n	8003fc2 <memset+0xa>
 8003fc0:	4770      	bx	lr
 8003fc2:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc6:	e7f9      	b.n	8003fbc <memset+0x4>

08003fc8 <siprintf>:
 8003fc8:	b40e      	push	{r1, r2, r3}
 8003fca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003fce:	b500      	push	{lr}
 8003fd0:	b09c      	sub	sp, #112	; 0x70
 8003fd2:	ab1d      	add	r3, sp, #116	; 0x74
 8003fd4:	9002      	str	r0, [sp, #8]
 8003fd6:	9006      	str	r0, [sp, #24]
 8003fd8:	9107      	str	r1, [sp, #28]
 8003fda:	9104      	str	r1, [sp, #16]
 8003fdc:	4808      	ldr	r0, [pc, #32]	; (8004000 <siprintf+0x38>)
 8003fde:	4909      	ldr	r1, [pc, #36]	; (8004004 <siprintf+0x3c>)
 8003fe0:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fe4:	9105      	str	r1, [sp, #20]
 8003fe6:	6800      	ldr	r0, [r0, #0]
 8003fe8:	a902      	add	r1, sp, #8
 8003fea:	9301      	str	r3, [sp, #4]
 8003fec:	f000 f868 	bl	80040c0 <_svfiprintf_r>
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	9b02      	ldr	r3, [sp, #8]
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	b01c      	add	sp, #112	; 0x70
 8003ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ffc:	b003      	add	sp, #12
 8003ffe:	4770      	bx	lr
 8004000:	2000000c 	.word	0x2000000c
 8004004:	ffff0208 	.word	0xffff0208

08004008 <__ssputs_r>:
 8004008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800400c:	688e      	ldr	r6, [r1, #8]
 800400e:	4682      	mov	sl, r0
 8004010:	429e      	cmp	r6, r3
 8004012:	460c      	mov	r4, r1
 8004014:	4690      	mov	r8, r2
 8004016:	461f      	mov	r7, r3
 8004018:	d838      	bhi.n	800408c <__ssputs_r+0x84>
 800401a:	898a      	ldrh	r2, [r1, #12]
 800401c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004020:	d032      	beq.n	8004088 <__ssputs_r+0x80>
 8004022:	6825      	ldr	r5, [r4, #0]
 8004024:	6909      	ldr	r1, [r1, #16]
 8004026:	3301      	adds	r3, #1
 8004028:	eba5 0901 	sub.w	r9, r5, r1
 800402c:	6965      	ldr	r5, [r4, #20]
 800402e:	444b      	add	r3, r9
 8004030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004034:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004038:	106d      	asrs	r5, r5, #1
 800403a:	429d      	cmp	r5, r3
 800403c:	bf38      	it	cc
 800403e:	461d      	movcc	r5, r3
 8004040:	0553      	lsls	r3, r2, #21
 8004042:	d531      	bpl.n	80040a8 <__ssputs_r+0xa0>
 8004044:	4629      	mov	r1, r5
 8004046:	f000 fb61 	bl	800470c <_malloc_r>
 800404a:	4606      	mov	r6, r0
 800404c:	b950      	cbnz	r0, 8004064 <__ssputs_r+0x5c>
 800404e:	230c      	movs	r3, #12
 8004050:	f04f 30ff 	mov.w	r0, #4294967295
 8004054:	f8ca 3000 	str.w	r3, [sl]
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800405e:	81a3      	strh	r3, [r4, #12]
 8004060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004064:	464a      	mov	r2, r9
 8004066:	6921      	ldr	r1, [r4, #16]
 8004068:	f7ff ff98 	bl	8003f9c <memcpy>
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	6126      	str	r6, [r4, #16]
 800407a:	444e      	add	r6, r9
 800407c:	6026      	str	r6, [r4, #0]
 800407e:	463e      	mov	r6, r7
 8004080:	6165      	str	r5, [r4, #20]
 8004082:	eba5 0509 	sub.w	r5, r5, r9
 8004086:	60a5      	str	r5, [r4, #8]
 8004088:	42be      	cmp	r6, r7
 800408a:	d900      	bls.n	800408e <__ssputs_r+0x86>
 800408c:	463e      	mov	r6, r7
 800408e:	4632      	mov	r2, r6
 8004090:	4641      	mov	r1, r8
 8004092:	6820      	ldr	r0, [r4, #0]
 8004094:	f000 fab8 	bl	8004608 <memmove>
 8004098:	68a3      	ldr	r3, [r4, #8]
 800409a:	2000      	movs	r0, #0
 800409c:	1b9b      	subs	r3, r3, r6
 800409e:	60a3      	str	r3, [r4, #8]
 80040a0:	6823      	ldr	r3, [r4, #0]
 80040a2:	4433      	add	r3, r6
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	e7db      	b.n	8004060 <__ssputs_r+0x58>
 80040a8:	462a      	mov	r2, r5
 80040aa:	f000 fba3 	bl	80047f4 <_realloc_r>
 80040ae:	4606      	mov	r6, r0
 80040b0:	2800      	cmp	r0, #0
 80040b2:	d1e1      	bne.n	8004078 <__ssputs_r+0x70>
 80040b4:	4650      	mov	r0, sl
 80040b6:	6921      	ldr	r1, [r4, #16]
 80040b8:	f000 fac0 	bl	800463c <_free_r>
 80040bc:	e7c7      	b.n	800404e <__ssputs_r+0x46>
	...

080040c0 <_svfiprintf_r>:
 80040c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	4698      	mov	r8, r3
 80040c6:	898b      	ldrh	r3, [r1, #12]
 80040c8:	4607      	mov	r7, r0
 80040ca:	061b      	lsls	r3, r3, #24
 80040cc:	460d      	mov	r5, r1
 80040ce:	4614      	mov	r4, r2
 80040d0:	b09d      	sub	sp, #116	; 0x74
 80040d2:	d50e      	bpl.n	80040f2 <_svfiprintf_r+0x32>
 80040d4:	690b      	ldr	r3, [r1, #16]
 80040d6:	b963      	cbnz	r3, 80040f2 <_svfiprintf_r+0x32>
 80040d8:	2140      	movs	r1, #64	; 0x40
 80040da:	f000 fb17 	bl	800470c <_malloc_r>
 80040de:	6028      	str	r0, [r5, #0]
 80040e0:	6128      	str	r0, [r5, #16]
 80040e2:	b920      	cbnz	r0, 80040ee <_svfiprintf_r+0x2e>
 80040e4:	230c      	movs	r3, #12
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	f04f 30ff 	mov.w	r0, #4294967295
 80040ec:	e0d1      	b.n	8004292 <_svfiprintf_r+0x1d2>
 80040ee:	2340      	movs	r3, #64	; 0x40
 80040f0:	616b      	str	r3, [r5, #20]
 80040f2:	2300      	movs	r3, #0
 80040f4:	9309      	str	r3, [sp, #36]	; 0x24
 80040f6:	2320      	movs	r3, #32
 80040f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80040fc:	2330      	movs	r3, #48	; 0x30
 80040fe:	f04f 0901 	mov.w	r9, #1
 8004102:	f8cd 800c 	str.w	r8, [sp, #12]
 8004106:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80042ac <_svfiprintf_r+0x1ec>
 800410a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800410e:	4623      	mov	r3, r4
 8004110:	469a      	mov	sl, r3
 8004112:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004116:	b10a      	cbz	r2, 800411c <_svfiprintf_r+0x5c>
 8004118:	2a25      	cmp	r2, #37	; 0x25
 800411a:	d1f9      	bne.n	8004110 <_svfiprintf_r+0x50>
 800411c:	ebba 0b04 	subs.w	fp, sl, r4
 8004120:	d00b      	beq.n	800413a <_svfiprintf_r+0x7a>
 8004122:	465b      	mov	r3, fp
 8004124:	4622      	mov	r2, r4
 8004126:	4629      	mov	r1, r5
 8004128:	4638      	mov	r0, r7
 800412a:	f7ff ff6d 	bl	8004008 <__ssputs_r>
 800412e:	3001      	adds	r0, #1
 8004130:	f000 80aa 	beq.w	8004288 <_svfiprintf_r+0x1c8>
 8004134:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004136:	445a      	add	r2, fp
 8004138:	9209      	str	r2, [sp, #36]	; 0x24
 800413a:	f89a 3000 	ldrb.w	r3, [sl]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80a2 	beq.w	8004288 <_svfiprintf_r+0x1c8>
 8004144:	2300      	movs	r3, #0
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
 800414a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800414e:	f10a 0a01 	add.w	sl, sl, #1
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	9307      	str	r3, [sp, #28]
 8004156:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800415a:	931a      	str	r3, [sp, #104]	; 0x68
 800415c:	4654      	mov	r4, sl
 800415e:	2205      	movs	r2, #5
 8004160:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004164:	4851      	ldr	r0, [pc, #324]	; (80042ac <_svfiprintf_r+0x1ec>)
 8004166:	f000 fa41 	bl	80045ec <memchr>
 800416a:	9a04      	ldr	r2, [sp, #16]
 800416c:	b9d8      	cbnz	r0, 80041a6 <_svfiprintf_r+0xe6>
 800416e:	06d0      	lsls	r0, r2, #27
 8004170:	bf44      	itt	mi
 8004172:	2320      	movmi	r3, #32
 8004174:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004178:	0711      	lsls	r1, r2, #28
 800417a:	bf44      	itt	mi
 800417c:	232b      	movmi	r3, #43	; 0x2b
 800417e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004182:	f89a 3000 	ldrb.w	r3, [sl]
 8004186:	2b2a      	cmp	r3, #42	; 0x2a
 8004188:	d015      	beq.n	80041b6 <_svfiprintf_r+0xf6>
 800418a:	4654      	mov	r4, sl
 800418c:	2000      	movs	r0, #0
 800418e:	f04f 0c0a 	mov.w	ip, #10
 8004192:	9a07      	ldr	r2, [sp, #28]
 8004194:	4621      	mov	r1, r4
 8004196:	f811 3b01 	ldrb.w	r3, [r1], #1
 800419a:	3b30      	subs	r3, #48	; 0x30
 800419c:	2b09      	cmp	r3, #9
 800419e:	d94e      	bls.n	800423e <_svfiprintf_r+0x17e>
 80041a0:	b1b0      	cbz	r0, 80041d0 <_svfiprintf_r+0x110>
 80041a2:	9207      	str	r2, [sp, #28]
 80041a4:	e014      	b.n	80041d0 <_svfiprintf_r+0x110>
 80041a6:	eba0 0308 	sub.w	r3, r0, r8
 80041aa:	fa09 f303 	lsl.w	r3, r9, r3
 80041ae:	4313      	orrs	r3, r2
 80041b0:	46a2      	mov	sl, r4
 80041b2:	9304      	str	r3, [sp, #16]
 80041b4:	e7d2      	b.n	800415c <_svfiprintf_r+0x9c>
 80041b6:	9b03      	ldr	r3, [sp, #12]
 80041b8:	1d19      	adds	r1, r3, #4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	9103      	str	r1, [sp, #12]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	bfbb      	ittet	lt
 80041c2:	425b      	neglt	r3, r3
 80041c4:	f042 0202 	orrlt.w	r2, r2, #2
 80041c8:	9307      	strge	r3, [sp, #28]
 80041ca:	9307      	strlt	r3, [sp, #28]
 80041cc:	bfb8      	it	lt
 80041ce:	9204      	strlt	r2, [sp, #16]
 80041d0:	7823      	ldrb	r3, [r4, #0]
 80041d2:	2b2e      	cmp	r3, #46	; 0x2e
 80041d4:	d10c      	bne.n	80041f0 <_svfiprintf_r+0x130>
 80041d6:	7863      	ldrb	r3, [r4, #1]
 80041d8:	2b2a      	cmp	r3, #42	; 0x2a
 80041da:	d135      	bne.n	8004248 <_svfiprintf_r+0x188>
 80041dc:	9b03      	ldr	r3, [sp, #12]
 80041de:	3402      	adds	r4, #2
 80041e0:	1d1a      	adds	r2, r3, #4
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	9203      	str	r2, [sp, #12]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	bfb8      	it	lt
 80041ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80041ee:	9305      	str	r3, [sp, #20]
 80041f0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80042b0 <_svfiprintf_r+0x1f0>
 80041f4:	2203      	movs	r2, #3
 80041f6:	4650      	mov	r0, sl
 80041f8:	7821      	ldrb	r1, [r4, #0]
 80041fa:	f000 f9f7 	bl	80045ec <memchr>
 80041fe:	b140      	cbz	r0, 8004212 <_svfiprintf_r+0x152>
 8004200:	2340      	movs	r3, #64	; 0x40
 8004202:	eba0 000a 	sub.w	r0, r0, sl
 8004206:	fa03 f000 	lsl.w	r0, r3, r0
 800420a:	9b04      	ldr	r3, [sp, #16]
 800420c:	3401      	adds	r4, #1
 800420e:	4303      	orrs	r3, r0
 8004210:	9304      	str	r3, [sp, #16]
 8004212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004216:	2206      	movs	r2, #6
 8004218:	4826      	ldr	r0, [pc, #152]	; (80042b4 <_svfiprintf_r+0x1f4>)
 800421a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800421e:	f000 f9e5 	bl	80045ec <memchr>
 8004222:	2800      	cmp	r0, #0
 8004224:	d038      	beq.n	8004298 <_svfiprintf_r+0x1d8>
 8004226:	4b24      	ldr	r3, [pc, #144]	; (80042b8 <_svfiprintf_r+0x1f8>)
 8004228:	bb1b      	cbnz	r3, 8004272 <_svfiprintf_r+0x1b2>
 800422a:	9b03      	ldr	r3, [sp, #12]
 800422c:	3307      	adds	r3, #7
 800422e:	f023 0307 	bic.w	r3, r3, #7
 8004232:	3308      	adds	r3, #8
 8004234:	9303      	str	r3, [sp, #12]
 8004236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004238:	4433      	add	r3, r6
 800423a:	9309      	str	r3, [sp, #36]	; 0x24
 800423c:	e767      	b.n	800410e <_svfiprintf_r+0x4e>
 800423e:	460c      	mov	r4, r1
 8004240:	2001      	movs	r0, #1
 8004242:	fb0c 3202 	mla	r2, ip, r2, r3
 8004246:	e7a5      	b.n	8004194 <_svfiprintf_r+0xd4>
 8004248:	2300      	movs	r3, #0
 800424a:	f04f 0c0a 	mov.w	ip, #10
 800424e:	4619      	mov	r1, r3
 8004250:	3401      	adds	r4, #1
 8004252:	9305      	str	r3, [sp, #20]
 8004254:	4620      	mov	r0, r4
 8004256:	f810 2b01 	ldrb.w	r2, [r0], #1
 800425a:	3a30      	subs	r2, #48	; 0x30
 800425c:	2a09      	cmp	r2, #9
 800425e:	d903      	bls.n	8004268 <_svfiprintf_r+0x1a8>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0c5      	beq.n	80041f0 <_svfiprintf_r+0x130>
 8004264:	9105      	str	r1, [sp, #20]
 8004266:	e7c3      	b.n	80041f0 <_svfiprintf_r+0x130>
 8004268:	4604      	mov	r4, r0
 800426a:	2301      	movs	r3, #1
 800426c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004270:	e7f0      	b.n	8004254 <_svfiprintf_r+0x194>
 8004272:	ab03      	add	r3, sp, #12
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	462a      	mov	r2, r5
 8004278:	4638      	mov	r0, r7
 800427a:	4b10      	ldr	r3, [pc, #64]	; (80042bc <_svfiprintf_r+0x1fc>)
 800427c:	a904      	add	r1, sp, #16
 800427e:	f3af 8000 	nop.w
 8004282:	1c42      	adds	r2, r0, #1
 8004284:	4606      	mov	r6, r0
 8004286:	d1d6      	bne.n	8004236 <_svfiprintf_r+0x176>
 8004288:	89ab      	ldrh	r3, [r5, #12]
 800428a:	065b      	lsls	r3, r3, #25
 800428c:	f53f af2c 	bmi.w	80040e8 <_svfiprintf_r+0x28>
 8004290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004292:	b01d      	add	sp, #116	; 0x74
 8004294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004298:	ab03      	add	r3, sp, #12
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	462a      	mov	r2, r5
 800429e:	4638      	mov	r0, r7
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <_svfiprintf_r+0x1fc>)
 80042a2:	a904      	add	r1, sp, #16
 80042a4:	f000 f87c 	bl	80043a0 <_printf_i>
 80042a8:	e7eb      	b.n	8004282 <_svfiprintf_r+0x1c2>
 80042aa:	bf00      	nop
 80042ac:	0800518e 	.word	0x0800518e
 80042b0:	08005194 	.word	0x08005194
 80042b4:	08005198 	.word	0x08005198
 80042b8:	00000000 	.word	0x00000000
 80042bc:	08004009 	.word	0x08004009

080042c0 <_printf_common>:
 80042c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042c4:	4616      	mov	r6, r2
 80042c6:	4699      	mov	r9, r3
 80042c8:	688a      	ldr	r2, [r1, #8]
 80042ca:	690b      	ldr	r3, [r1, #16]
 80042cc:	4607      	mov	r7, r0
 80042ce:	4293      	cmp	r3, r2
 80042d0:	bfb8      	it	lt
 80042d2:	4613      	movlt	r3, r2
 80042d4:	6033      	str	r3, [r6, #0]
 80042d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80042da:	460c      	mov	r4, r1
 80042dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80042e0:	b10a      	cbz	r2, 80042e6 <_printf_common+0x26>
 80042e2:	3301      	adds	r3, #1
 80042e4:	6033      	str	r3, [r6, #0]
 80042e6:	6823      	ldr	r3, [r4, #0]
 80042e8:	0699      	lsls	r1, r3, #26
 80042ea:	bf42      	ittt	mi
 80042ec:	6833      	ldrmi	r3, [r6, #0]
 80042ee:	3302      	addmi	r3, #2
 80042f0:	6033      	strmi	r3, [r6, #0]
 80042f2:	6825      	ldr	r5, [r4, #0]
 80042f4:	f015 0506 	ands.w	r5, r5, #6
 80042f8:	d106      	bne.n	8004308 <_printf_common+0x48>
 80042fa:	f104 0a19 	add.w	sl, r4, #25
 80042fe:	68e3      	ldr	r3, [r4, #12]
 8004300:	6832      	ldr	r2, [r6, #0]
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	42ab      	cmp	r3, r5
 8004306:	dc28      	bgt.n	800435a <_printf_common+0x9a>
 8004308:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800430c:	1e13      	subs	r3, r2, #0
 800430e:	6822      	ldr	r2, [r4, #0]
 8004310:	bf18      	it	ne
 8004312:	2301      	movne	r3, #1
 8004314:	0692      	lsls	r2, r2, #26
 8004316:	d42d      	bmi.n	8004374 <_printf_common+0xb4>
 8004318:	4649      	mov	r1, r9
 800431a:	4638      	mov	r0, r7
 800431c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004320:	47c0      	blx	r8
 8004322:	3001      	adds	r0, #1
 8004324:	d020      	beq.n	8004368 <_printf_common+0xa8>
 8004326:	6823      	ldr	r3, [r4, #0]
 8004328:	68e5      	ldr	r5, [r4, #12]
 800432a:	f003 0306 	and.w	r3, r3, #6
 800432e:	2b04      	cmp	r3, #4
 8004330:	bf18      	it	ne
 8004332:	2500      	movne	r5, #0
 8004334:	6832      	ldr	r2, [r6, #0]
 8004336:	f04f 0600 	mov.w	r6, #0
 800433a:	68a3      	ldr	r3, [r4, #8]
 800433c:	bf08      	it	eq
 800433e:	1aad      	subeq	r5, r5, r2
 8004340:	6922      	ldr	r2, [r4, #16]
 8004342:	bf08      	it	eq
 8004344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004348:	4293      	cmp	r3, r2
 800434a:	bfc4      	itt	gt
 800434c:	1a9b      	subgt	r3, r3, r2
 800434e:	18ed      	addgt	r5, r5, r3
 8004350:	341a      	adds	r4, #26
 8004352:	42b5      	cmp	r5, r6
 8004354:	d11a      	bne.n	800438c <_printf_common+0xcc>
 8004356:	2000      	movs	r0, #0
 8004358:	e008      	b.n	800436c <_printf_common+0xac>
 800435a:	2301      	movs	r3, #1
 800435c:	4652      	mov	r2, sl
 800435e:	4649      	mov	r1, r9
 8004360:	4638      	mov	r0, r7
 8004362:	47c0      	blx	r8
 8004364:	3001      	adds	r0, #1
 8004366:	d103      	bne.n	8004370 <_printf_common+0xb0>
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004370:	3501      	adds	r5, #1
 8004372:	e7c4      	b.n	80042fe <_printf_common+0x3e>
 8004374:	2030      	movs	r0, #48	; 0x30
 8004376:	18e1      	adds	r1, r4, r3
 8004378:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004382:	4422      	add	r2, r4
 8004384:	3302      	adds	r3, #2
 8004386:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800438a:	e7c5      	b.n	8004318 <_printf_common+0x58>
 800438c:	2301      	movs	r3, #1
 800438e:	4622      	mov	r2, r4
 8004390:	4649      	mov	r1, r9
 8004392:	4638      	mov	r0, r7
 8004394:	47c0      	blx	r8
 8004396:	3001      	adds	r0, #1
 8004398:	d0e6      	beq.n	8004368 <_printf_common+0xa8>
 800439a:	3601      	adds	r6, #1
 800439c:	e7d9      	b.n	8004352 <_printf_common+0x92>
	...

080043a0 <_printf_i>:
 80043a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80043a4:	7e0f      	ldrb	r7, [r1, #24]
 80043a6:	4691      	mov	r9, r2
 80043a8:	2f78      	cmp	r7, #120	; 0x78
 80043aa:	4680      	mov	r8, r0
 80043ac:	460c      	mov	r4, r1
 80043ae:	469a      	mov	sl, r3
 80043b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80043b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80043b6:	d807      	bhi.n	80043c8 <_printf_i+0x28>
 80043b8:	2f62      	cmp	r7, #98	; 0x62
 80043ba:	d80a      	bhi.n	80043d2 <_printf_i+0x32>
 80043bc:	2f00      	cmp	r7, #0
 80043be:	f000 80d9 	beq.w	8004574 <_printf_i+0x1d4>
 80043c2:	2f58      	cmp	r7, #88	; 0x58
 80043c4:	f000 80a4 	beq.w	8004510 <_printf_i+0x170>
 80043c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80043d0:	e03a      	b.n	8004448 <_printf_i+0xa8>
 80043d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80043d6:	2b15      	cmp	r3, #21
 80043d8:	d8f6      	bhi.n	80043c8 <_printf_i+0x28>
 80043da:	a101      	add	r1, pc, #4	; (adr r1, 80043e0 <_printf_i+0x40>)
 80043dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80043e0:	08004439 	.word	0x08004439
 80043e4:	0800444d 	.word	0x0800444d
 80043e8:	080043c9 	.word	0x080043c9
 80043ec:	080043c9 	.word	0x080043c9
 80043f0:	080043c9 	.word	0x080043c9
 80043f4:	080043c9 	.word	0x080043c9
 80043f8:	0800444d 	.word	0x0800444d
 80043fc:	080043c9 	.word	0x080043c9
 8004400:	080043c9 	.word	0x080043c9
 8004404:	080043c9 	.word	0x080043c9
 8004408:	080043c9 	.word	0x080043c9
 800440c:	0800455b 	.word	0x0800455b
 8004410:	0800447d 	.word	0x0800447d
 8004414:	0800453d 	.word	0x0800453d
 8004418:	080043c9 	.word	0x080043c9
 800441c:	080043c9 	.word	0x080043c9
 8004420:	0800457d 	.word	0x0800457d
 8004424:	080043c9 	.word	0x080043c9
 8004428:	0800447d 	.word	0x0800447d
 800442c:	080043c9 	.word	0x080043c9
 8004430:	080043c9 	.word	0x080043c9
 8004434:	08004545 	.word	0x08004545
 8004438:	682b      	ldr	r3, [r5, #0]
 800443a:	1d1a      	adds	r2, r3, #4
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	602a      	str	r2, [r5, #0]
 8004440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004444:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004448:	2301      	movs	r3, #1
 800444a:	e0a4      	b.n	8004596 <_printf_i+0x1f6>
 800444c:	6820      	ldr	r0, [r4, #0]
 800444e:	6829      	ldr	r1, [r5, #0]
 8004450:	0606      	lsls	r6, r0, #24
 8004452:	f101 0304 	add.w	r3, r1, #4
 8004456:	d50a      	bpl.n	800446e <_printf_i+0xce>
 8004458:	680e      	ldr	r6, [r1, #0]
 800445a:	602b      	str	r3, [r5, #0]
 800445c:	2e00      	cmp	r6, #0
 800445e:	da03      	bge.n	8004468 <_printf_i+0xc8>
 8004460:	232d      	movs	r3, #45	; 0x2d
 8004462:	4276      	negs	r6, r6
 8004464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004468:	230a      	movs	r3, #10
 800446a:	485e      	ldr	r0, [pc, #376]	; (80045e4 <_printf_i+0x244>)
 800446c:	e019      	b.n	80044a2 <_printf_i+0x102>
 800446e:	680e      	ldr	r6, [r1, #0]
 8004470:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004474:	602b      	str	r3, [r5, #0]
 8004476:	bf18      	it	ne
 8004478:	b236      	sxthne	r6, r6
 800447a:	e7ef      	b.n	800445c <_printf_i+0xbc>
 800447c:	682b      	ldr	r3, [r5, #0]
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	1d19      	adds	r1, r3, #4
 8004482:	6029      	str	r1, [r5, #0]
 8004484:	0601      	lsls	r1, r0, #24
 8004486:	d501      	bpl.n	800448c <_printf_i+0xec>
 8004488:	681e      	ldr	r6, [r3, #0]
 800448a:	e002      	b.n	8004492 <_printf_i+0xf2>
 800448c:	0646      	lsls	r6, r0, #25
 800448e:	d5fb      	bpl.n	8004488 <_printf_i+0xe8>
 8004490:	881e      	ldrh	r6, [r3, #0]
 8004492:	2f6f      	cmp	r7, #111	; 0x6f
 8004494:	bf0c      	ite	eq
 8004496:	2308      	moveq	r3, #8
 8004498:	230a      	movne	r3, #10
 800449a:	4852      	ldr	r0, [pc, #328]	; (80045e4 <_printf_i+0x244>)
 800449c:	2100      	movs	r1, #0
 800449e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80044a2:	6865      	ldr	r5, [r4, #4]
 80044a4:	2d00      	cmp	r5, #0
 80044a6:	bfa8      	it	ge
 80044a8:	6821      	ldrge	r1, [r4, #0]
 80044aa:	60a5      	str	r5, [r4, #8]
 80044ac:	bfa4      	itt	ge
 80044ae:	f021 0104 	bicge.w	r1, r1, #4
 80044b2:	6021      	strge	r1, [r4, #0]
 80044b4:	b90e      	cbnz	r6, 80044ba <_printf_i+0x11a>
 80044b6:	2d00      	cmp	r5, #0
 80044b8:	d04d      	beq.n	8004556 <_printf_i+0x1b6>
 80044ba:	4615      	mov	r5, r2
 80044bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80044c0:	fb03 6711 	mls	r7, r3, r1, r6
 80044c4:	5dc7      	ldrb	r7, [r0, r7]
 80044c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80044ca:	4637      	mov	r7, r6
 80044cc:	42bb      	cmp	r3, r7
 80044ce:	460e      	mov	r6, r1
 80044d0:	d9f4      	bls.n	80044bc <_printf_i+0x11c>
 80044d2:	2b08      	cmp	r3, #8
 80044d4:	d10b      	bne.n	80044ee <_printf_i+0x14e>
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	07de      	lsls	r6, r3, #31
 80044da:	d508      	bpl.n	80044ee <_printf_i+0x14e>
 80044dc:	6923      	ldr	r3, [r4, #16]
 80044de:	6861      	ldr	r1, [r4, #4]
 80044e0:	4299      	cmp	r1, r3
 80044e2:	bfde      	ittt	le
 80044e4:	2330      	movle	r3, #48	; 0x30
 80044e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80044ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80044ee:	1b52      	subs	r2, r2, r5
 80044f0:	6122      	str	r2, [r4, #16]
 80044f2:	464b      	mov	r3, r9
 80044f4:	4621      	mov	r1, r4
 80044f6:	4640      	mov	r0, r8
 80044f8:	f8cd a000 	str.w	sl, [sp]
 80044fc:	aa03      	add	r2, sp, #12
 80044fe:	f7ff fedf 	bl	80042c0 <_printf_common>
 8004502:	3001      	adds	r0, #1
 8004504:	d14c      	bne.n	80045a0 <_printf_i+0x200>
 8004506:	f04f 30ff 	mov.w	r0, #4294967295
 800450a:	b004      	add	sp, #16
 800450c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004510:	4834      	ldr	r0, [pc, #208]	; (80045e4 <_printf_i+0x244>)
 8004512:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004516:	6829      	ldr	r1, [r5, #0]
 8004518:	6823      	ldr	r3, [r4, #0]
 800451a:	f851 6b04 	ldr.w	r6, [r1], #4
 800451e:	6029      	str	r1, [r5, #0]
 8004520:	061d      	lsls	r5, r3, #24
 8004522:	d514      	bpl.n	800454e <_printf_i+0x1ae>
 8004524:	07df      	lsls	r7, r3, #31
 8004526:	bf44      	itt	mi
 8004528:	f043 0320 	orrmi.w	r3, r3, #32
 800452c:	6023      	strmi	r3, [r4, #0]
 800452e:	b91e      	cbnz	r6, 8004538 <_printf_i+0x198>
 8004530:	6823      	ldr	r3, [r4, #0]
 8004532:	f023 0320 	bic.w	r3, r3, #32
 8004536:	6023      	str	r3, [r4, #0]
 8004538:	2310      	movs	r3, #16
 800453a:	e7af      	b.n	800449c <_printf_i+0xfc>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	f043 0320 	orr.w	r3, r3, #32
 8004542:	6023      	str	r3, [r4, #0]
 8004544:	2378      	movs	r3, #120	; 0x78
 8004546:	4828      	ldr	r0, [pc, #160]	; (80045e8 <_printf_i+0x248>)
 8004548:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800454c:	e7e3      	b.n	8004516 <_printf_i+0x176>
 800454e:	0659      	lsls	r1, r3, #25
 8004550:	bf48      	it	mi
 8004552:	b2b6      	uxthmi	r6, r6
 8004554:	e7e6      	b.n	8004524 <_printf_i+0x184>
 8004556:	4615      	mov	r5, r2
 8004558:	e7bb      	b.n	80044d2 <_printf_i+0x132>
 800455a:	682b      	ldr	r3, [r5, #0]
 800455c:	6826      	ldr	r6, [r4, #0]
 800455e:	1d18      	adds	r0, r3, #4
 8004560:	6961      	ldr	r1, [r4, #20]
 8004562:	6028      	str	r0, [r5, #0]
 8004564:	0635      	lsls	r5, r6, #24
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	d501      	bpl.n	800456e <_printf_i+0x1ce>
 800456a:	6019      	str	r1, [r3, #0]
 800456c:	e002      	b.n	8004574 <_printf_i+0x1d4>
 800456e:	0670      	lsls	r0, r6, #25
 8004570:	d5fb      	bpl.n	800456a <_printf_i+0x1ca>
 8004572:	8019      	strh	r1, [r3, #0]
 8004574:	2300      	movs	r3, #0
 8004576:	4615      	mov	r5, r2
 8004578:	6123      	str	r3, [r4, #16]
 800457a:	e7ba      	b.n	80044f2 <_printf_i+0x152>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	2100      	movs	r1, #0
 8004580:	1d1a      	adds	r2, r3, #4
 8004582:	602a      	str	r2, [r5, #0]
 8004584:	681d      	ldr	r5, [r3, #0]
 8004586:	6862      	ldr	r2, [r4, #4]
 8004588:	4628      	mov	r0, r5
 800458a:	f000 f82f 	bl	80045ec <memchr>
 800458e:	b108      	cbz	r0, 8004594 <_printf_i+0x1f4>
 8004590:	1b40      	subs	r0, r0, r5
 8004592:	6060      	str	r0, [r4, #4]
 8004594:	6863      	ldr	r3, [r4, #4]
 8004596:	6123      	str	r3, [r4, #16]
 8004598:	2300      	movs	r3, #0
 800459a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800459e:	e7a8      	b.n	80044f2 <_printf_i+0x152>
 80045a0:	462a      	mov	r2, r5
 80045a2:	4649      	mov	r1, r9
 80045a4:	4640      	mov	r0, r8
 80045a6:	6923      	ldr	r3, [r4, #16]
 80045a8:	47d0      	blx	sl
 80045aa:	3001      	adds	r0, #1
 80045ac:	d0ab      	beq.n	8004506 <_printf_i+0x166>
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	079b      	lsls	r3, r3, #30
 80045b2:	d413      	bmi.n	80045dc <_printf_i+0x23c>
 80045b4:	68e0      	ldr	r0, [r4, #12]
 80045b6:	9b03      	ldr	r3, [sp, #12]
 80045b8:	4298      	cmp	r0, r3
 80045ba:	bfb8      	it	lt
 80045bc:	4618      	movlt	r0, r3
 80045be:	e7a4      	b.n	800450a <_printf_i+0x16a>
 80045c0:	2301      	movs	r3, #1
 80045c2:	4632      	mov	r2, r6
 80045c4:	4649      	mov	r1, r9
 80045c6:	4640      	mov	r0, r8
 80045c8:	47d0      	blx	sl
 80045ca:	3001      	adds	r0, #1
 80045cc:	d09b      	beq.n	8004506 <_printf_i+0x166>
 80045ce:	3501      	adds	r5, #1
 80045d0:	68e3      	ldr	r3, [r4, #12]
 80045d2:	9903      	ldr	r1, [sp, #12]
 80045d4:	1a5b      	subs	r3, r3, r1
 80045d6:	42ab      	cmp	r3, r5
 80045d8:	dcf2      	bgt.n	80045c0 <_printf_i+0x220>
 80045da:	e7eb      	b.n	80045b4 <_printf_i+0x214>
 80045dc:	2500      	movs	r5, #0
 80045de:	f104 0619 	add.w	r6, r4, #25
 80045e2:	e7f5      	b.n	80045d0 <_printf_i+0x230>
 80045e4:	0800519f 	.word	0x0800519f
 80045e8:	080051b0 	.word	0x080051b0

080045ec <memchr>:
 80045ec:	4603      	mov	r3, r0
 80045ee:	b510      	push	{r4, lr}
 80045f0:	b2c9      	uxtb	r1, r1
 80045f2:	4402      	add	r2, r0
 80045f4:	4293      	cmp	r3, r2
 80045f6:	4618      	mov	r0, r3
 80045f8:	d101      	bne.n	80045fe <memchr+0x12>
 80045fa:	2000      	movs	r0, #0
 80045fc:	e003      	b.n	8004606 <memchr+0x1a>
 80045fe:	7804      	ldrb	r4, [r0, #0]
 8004600:	3301      	adds	r3, #1
 8004602:	428c      	cmp	r4, r1
 8004604:	d1f6      	bne.n	80045f4 <memchr+0x8>
 8004606:	bd10      	pop	{r4, pc}

08004608 <memmove>:
 8004608:	4288      	cmp	r0, r1
 800460a:	b510      	push	{r4, lr}
 800460c:	eb01 0402 	add.w	r4, r1, r2
 8004610:	d902      	bls.n	8004618 <memmove+0x10>
 8004612:	4284      	cmp	r4, r0
 8004614:	4623      	mov	r3, r4
 8004616:	d807      	bhi.n	8004628 <memmove+0x20>
 8004618:	1e43      	subs	r3, r0, #1
 800461a:	42a1      	cmp	r1, r4
 800461c:	d008      	beq.n	8004630 <memmove+0x28>
 800461e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004622:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004626:	e7f8      	b.n	800461a <memmove+0x12>
 8004628:	4601      	mov	r1, r0
 800462a:	4402      	add	r2, r0
 800462c:	428a      	cmp	r2, r1
 800462e:	d100      	bne.n	8004632 <memmove+0x2a>
 8004630:	bd10      	pop	{r4, pc}
 8004632:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004636:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800463a:	e7f7      	b.n	800462c <memmove+0x24>

0800463c <_free_r>:
 800463c:	b538      	push	{r3, r4, r5, lr}
 800463e:	4605      	mov	r5, r0
 8004640:	2900      	cmp	r1, #0
 8004642:	d040      	beq.n	80046c6 <_free_r+0x8a>
 8004644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004648:	1f0c      	subs	r4, r1, #4
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfb8      	it	lt
 800464e:	18e4      	addlt	r4, r4, r3
 8004650:	f000 f910 	bl	8004874 <__malloc_lock>
 8004654:	4a1c      	ldr	r2, [pc, #112]	; (80046c8 <_free_r+0x8c>)
 8004656:	6813      	ldr	r3, [r2, #0]
 8004658:	b933      	cbnz	r3, 8004668 <_free_r+0x2c>
 800465a:	6063      	str	r3, [r4, #4]
 800465c:	6014      	str	r4, [r2, #0]
 800465e:	4628      	mov	r0, r5
 8004660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004664:	f000 b90c 	b.w	8004880 <__malloc_unlock>
 8004668:	42a3      	cmp	r3, r4
 800466a:	d908      	bls.n	800467e <_free_r+0x42>
 800466c:	6820      	ldr	r0, [r4, #0]
 800466e:	1821      	adds	r1, r4, r0
 8004670:	428b      	cmp	r3, r1
 8004672:	bf01      	itttt	eq
 8004674:	6819      	ldreq	r1, [r3, #0]
 8004676:	685b      	ldreq	r3, [r3, #4]
 8004678:	1809      	addeq	r1, r1, r0
 800467a:	6021      	streq	r1, [r4, #0]
 800467c:	e7ed      	b.n	800465a <_free_r+0x1e>
 800467e:	461a      	mov	r2, r3
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	b10b      	cbz	r3, 8004688 <_free_r+0x4c>
 8004684:	42a3      	cmp	r3, r4
 8004686:	d9fa      	bls.n	800467e <_free_r+0x42>
 8004688:	6811      	ldr	r1, [r2, #0]
 800468a:	1850      	adds	r0, r2, r1
 800468c:	42a0      	cmp	r0, r4
 800468e:	d10b      	bne.n	80046a8 <_free_r+0x6c>
 8004690:	6820      	ldr	r0, [r4, #0]
 8004692:	4401      	add	r1, r0
 8004694:	1850      	adds	r0, r2, r1
 8004696:	4283      	cmp	r3, r0
 8004698:	6011      	str	r1, [r2, #0]
 800469a:	d1e0      	bne.n	800465e <_free_r+0x22>
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	4401      	add	r1, r0
 80046a2:	6011      	str	r1, [r2, #0]
 80046a4:	6053      	str	r3, [r2, #4]
 80046a6:	e7da      	b.n	800465e <_free_r+0x22>
 80046a8:	d902      	bls.n	80046b0 <_free_r+0x74>
 80046aa:	230c      	movs	r3, #12
 80046ac:	602b      	str	r3, [r5, #0]
 80046ae:	e7d6      	b.n	800465e <_free_r+0x22>
 80046b0:	6820      	ldr	r0, [r4, #0]
 80046b2:	1821      	adds	r1, r4, r0
 80046b4:	428b      	cmp	r3, r1
 80046b6:	bf01      	itttt	eq
 80046b8:	6819      	ldreq	r1, [r3, #0]
 80046ba:	685b      	ldreq	r3, [r3, #4]
 80046bc:	1809      	addeq	r1, r1, r0
 80046be:	6021      	streq	r1, [r4, #0]
 80046c0:	6063      	str	r3, [r4, #4]
 80046c2:	6054      	str	r4, [r2, #4]
 80046c4:	e7cb      	b.n	800465e <_free_r+0x22>
 80046c6:	bd38      	pop	{r3, r4, r5, pc}
 80046c8:	20000890 	.word	0x20000890

080046cc <sbrk_aligned>:
 80046cc:	b570      	push	{r4, r5, r6, lr}
 80046ce:	4e0e      	ldr	r6, [pc, #56]	; (8004708 <sbrk_aligned+0x3c>)
 80046d0:	460c      	mov	r4, r1
 80046d2:	6831      	ldr	r1, [r6, #0]
 80046d4:	4605      	mov	r5, r0
 80046d6:	b911      	cbnz	r1, 80046de <sbrk_aligned+0x12>
 80046d8:	f000 f8bc 	bl	8004854 <_sbrk_r>
 80046dc:	6030      	str	r0, [r6, #0]
 80046de:	4621      	mov	r1, r4
 80046e0:	4628      	mov	r0, r5
 80046e2:	f000 f8b7 	bl	8004854 <_sbrk_r>
 80046e6:	1c43      	adds	r3, r0, #1
 80046e8:	d00a      	beq.n	8004700 <sbrk_aligned+0x34>
 80046ea:	1cc4      	adds	r4, r0, #3
 80046ec:	f024 0403 	bic.w	r4, r4, #3
 80046f0:	42a0      	cmp	r0, r4
 80046f2:	d007      	beq.n	8004704 <sbrk_aligned+0x38>
 80046f4:	1a21      	subs	r1, r4, r0
 80046f6:	4628      	mov	r0, r5
 80046f8:	f000 f8ac 	bl	8004854 <_sbrk_r>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d101      	bne.n	8004704 <sbrk_aligned+0x38>
 8004700:	f04f 34ff 	mov.w	r4, #4294967295
 8004704:	4620      	mov	r0, r4
 8004706:	bd70      	pop	{r4, r5, r6, pc}
 8004708:	20000894 	.word	0x20000894

0800470c <_malloc_r>:
 800470c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004710:	1ccd      	adds	r5, r1, #3
 8004712:	f025 0503 	bic.w	r5, r5, #3
 8004716:	3508      	adds	r5, #8
 8004718:	2d0c      	cmp	r5, #12
 800471a:	bf38      	it	cc
 800471c:	250c      	movcc	r5, #12
 800471e:	2d00      	cmp	r5, #0
 8004720:	4607      	mov	r7, r0
 8004722:	db01      	blt.n	8004728 <_malloc_r+0x1c>
 8004724:	42a9      	cmp	r1, r5
 8004726:	d905      	bls.n	8004734 <_malloc_r+0x28>
 8004728:	230c      	movs	r3, #12
 800472a:	2600      	movs	r6, #0
 800472c:	603b      	str	r3, [r7, #0]
 800472e:	4630      	mov	r0, r6
 8004730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004734:	4e2e      	ldr	r6, [pc, #184]	; (80047f0 <_malloc_r+0xe4>)
 8004736:	f000 f89d 	bl	8004874 <__malloc_lock>
 800473a:	6833      	ldr	r3, [r6, #0]
 800473c:	461c      	mov	r4, r3
 800473e:	bb34      	cbnz	r4, 800478e <_malloc_r+0x82>
 8004740:	4629      	mov	r1, r5
 8004742:	4638      	mov	r0, r7
 8004744:	f7ff ffc2 	bl	80046cc <sbrk_aligned>
 8004748:	1c43      	adds	r3, r0, #1
 800474a:	4604      	mov	r4, r0
 800474c:	d14d      	bne.n	80047ea <_malloc_r+0xde>
 800474e:	6834      	ldr	r4, [r6, #0]
 8004750:	4626      	mov	r6, r4
 8004752:	2e00      	cmp	r6, #0
 8004754:	d140      	bne.n	80047d8 <_malloc_r+0xcc>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	4631      	mov	r1, r6
 800475a:	4638      	mov	r0, r7
 800475c:	eb04 0803 	add.w	r8, r4, r3
 8004760:	f000 f878 	bl	8004854 <_sbrk_r>
 8004764:	4580      	cmp	r8, r0
 8004766:	d13a      	bne.n	80047de <_malloc_r+0xd2>
 8004768:	6821      	ldr	r1, [r4, #0]
 800476a:	3503      	adds	r5, #3
 800476c:	1a6d      	subs	r5, r5, r1
 800476e:	f025 0503 	bic.w	r5, r5, #3
 8004772:	3508      	adds	r5, #8
 8004774:	2d0c      	cmp	r5, #12
 8004776:	bf38      	it	cc
 8004778:	250c      	movcc	r5, #12
 800477a:	4638      	mov	r0, r7
 800477c:	4629      	mov	r1, r5
 800477e:	f7ff ffa5 	bl	80046cc <sbrk_aligned>
 8004782:	3001      	adds	r0, #1
 8004784:	d02b      	beq.n	80047de <_malloc_r+0xd2>
 8004786:	6823      	ldr	r3, [r4, #0]
 8004788:	442b      	add	r3, r5
 800478a:	6023      	str	r3, [r4, #0]
 800478c:	e00e      	b.n	80047ac <_malloc_r+0xa0>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	1b52      	subs	r2, r2, r5
 8004792:	d41e      	bmi.n	80047d2 <_malloc_r+0xc6>
 8004794:	2a0b      	cmp	r2, #11
 8004796:	d916      	bls.n	80047c6 <_malloc_r+0xba>
 8004798:	1961      	adds	r1, r4, r5
 800479a:	42a3      	cmp	r3, r4
 800479c:	6025      	str	r5, [r4, #0]
 800479e:	bf18      	it	ne
 80047a0:	6059      	strne	r1, [r3, #4]
 80047a2:	6863      	ldr	r3, [r4, #4]
 80047a4:	bf08      	it	eq
 80047a6:	6031      	streq	r1, [r6, #0]
 80047a8:	5162      	str	r2, [r4, r5]
 80047aa:	604b      	str	r3, [r1, #4]
 80047ac:	4638      	mov	r0, r7
 80047ae:	f104 060b 	add.w	r6, r4, #11
 80047b2:	f000 f865 	bl	8004880 <__malloc_unlock>
 80047b6:	f026 0607 	bic.w	r6, r6, #7
 80047ba:	1d23      	adds	r3, r4, #4
 80047bc:	1af2      	subs	r2, r6, r3
 80047be:	d0b6      	beq.n	800472e <_malloc_r+0x22>
 80047c0:	1b9b      	subs	r3, r3, r6
 80047c2:	50a3      	str	r3, [r4, r2]
 80047c4:	e7b3      	b.n	800472e <_malloc_r+0x22>
 80047c6:	6862      	ldr	r2, [r4, #4]
 80047c8:	42a3      	cmp	r3, r4
 80047ca:	bf0c      	ite	eq
 80047cc:	6032      	streq	r2, [r6, #0]
 80047ce:	605a      	strne	r2, [r3, #4]
 80047d0:	e7ec      	b.n	80047ac <_malloc_r+0xa0>
 80047d2:	4623      	mov	r3, r4
 80047d4:	6864      	ldr	r4, [r4, #4]
 80047d6:	e7b2      	b.n	800473e <_malloc_r+0x32>
 80047d8:	4634      	mov	r4, r6
 80047da:	6876      	ldr	r6, [r6, #4]
 80047dc:	e7b9      	b.n	8004752 <_malloc_r+0x46>
 80047de:	230c      	movs	r3, #12
 80047e0:	4638      	mov	r0, r7
 80047e2:	603b      	str	r3, [r7, #0]
 80047e4:	f000 f84c 	bl	8004880 <__malloc_unlock>
 80047e8:	e7a1      	b.n	800472e <_malloc_r+0x22>
 80047ea:	6025      	str	r5, [r4, #0]
 80047ec:	e7de      	b.n	80047ac <_malloc_r+0xa0>
 80047ee:	bf00      	nop
 80047f0:	20000890 	.word	0x20000890

080047f4 <_realloc_r>:
 80047f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047f8:	4680      	mov	r8, r0
 80047fa:	4614      	mov	r4, r2
 80047fc:	460e      	mov	r6, r1
 80047fe:	b921      	cbnz	r1, 800480a <_realloc_r+0x16>
 8004800:	4611      	mov	r1, r2
 8004802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004806:	f7ff bf81 	b.w	800470c <_malloc_r>
 800480a:	b92a      	cbnz	r2, 8004818 <_realloc_r+0x24>
 800480c:	f7ff ff16 	bl	800463c <_free_r>
 8004810:	4625      	mov	r5, r4
 8004812:	4628      	mov	r0, r5
 8004814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004818:	f000 f838 	bl	800488c <_malloc_usable_size_r>
 800481c:	4284      	cmp	r4, r0
 800481e:	4607      	mov	r7, r0
 8004820:	d802      	bhi.n	8004828 <_realloc_r+0x34>
 8004822:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004826:	d812      	bhi.n	800484e <_realloc_r+0x5a>
 8004828:	4621      	mov	r1, r4
 800482a:	4640      	mov	r0, r8
 800482c:	f7ff ff6e 	bl	800470c <_malloc_r>
 8004830:	4605      	mov	r5, r0
 8004832:	2800      	cmp	r0, #0
 8004834:	d0ed      	beq.n	8004812 <_realloc_r+0x1e>
 8004836:	42bc      	cmp	r4, r7
 8004838:	4622      	mov	r2, r4
 800483a:	4631      	mov	r1, r6
 800483c:	bf28      	it	cs
 800483e:	463a      	movcs	r2, r7
 8004840:	f7ff fbac 	bl	8003f9c <memcpy>
 8004844:	4631      	mov	r1, r6
 8004846:	4640      	mov	r0, r8
 8004848:	f7ff fef8 	bl	800463c <_free_r>
 800484c:	e7e1      	b.n	8004812 <_realloc_r+0x1e>
 800484e:	4635      	mov	r5, r6
 8004850:	e7df      	b.n	8004812 <_realloc_r+0x1e>
	...

08004854 <_sbrk_r>:
 8004854:	b538      	push	{r3, r4, r5, lr}
 8004856:	2300      	movs	r3, #0
 8004858:	4d05      	ldr	r5, [pc, #20]	; (8004870 <_sbrk_r+0x1c>)
 800485a:	4604      	mov	r4, r0
 800485c:	4608      	mov	r0, r1
 800485e:	602b      	str	r3, [r5, #0]
 8004860:	f7fc fc62 	bl	8001128 <_sbrk>
 8004864:	1c43      	adds	r3, r0, #1
 8004866:	d102      	bne.n	800486e <_sbrk_r+0x1a>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	b103      	cbz	r3, 800486e <_sbrk_r+0x1a>
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	bd38      	pop	{r3, r4, r5, pc}
 8004870:	20000898 	.word	0x20000898

08004874 <__malloc_lock>:
 8004874:	4801      	ldr	r0, [pc, #4]	; (800487c <__malloc_lock+0x8>)
 8004876:	f000 b811 	b.w	800489c <__retarget_lock_acquire_recursive>
 800487a:	bf00      	nop
 800487c:	2000089c 	.word	0x2000089c

08004880 <__malloc_unlock>:
 8004880:	4801      	ldr	r0, [pc, #4]	; (8004888 <__malloc_unlock+0x8>)
 8004882:	f000 b80c 	b.w	800489e <__retarget_lock_release_recursive>
 8004886:	bf00      	nop
 8004888:	2000089c 	.word	0x2000089c

0800488c <_malloc_usable_size_r>:
 800488c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004890:	1f18      	subs	r0, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfbc      	itt	lt
 8004896:	580b      	ldrlt	r3, [r1, r0]
 8004898:	18c0      	addlt	r0, r0, r3
 800489a:	4770      	bx	lr

0800489c <__retarget_lock_acquire_recursive>:
 800489c:	4770      	bx	lr

0800489e <__retarget_lock_release_recursive>:
 800489e:	4770      	bx	lr

080048a0 <_init>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr

080048ac <_fini>:
 80048ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ae:	bf00      	nop
 80048b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048b2:	bc08      	pop	{r3}
 80048b4:	469e      	mov	lr, r3
 80048b6:	4770      	bx	lr
