
lora_F103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004748  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000090c  08004858  08004858  00014858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005164  08005164  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005164  08005164  00015164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800516c  0800516c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800516c  0800516c  0001516c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005170  08005170  00015170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000082c  20000070  080051e4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000089c  080051e4  0002089c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b271  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021a6  00000000  00000000  0002b30a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002d4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a08  00000000  00000000  0002dfd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001866a  00000000  00000000  0002e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5e8  00000000  00000000  00047042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086470  00000000  00000000  0005562a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dba9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000308c  00000000  00000000  000dbaec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08004840 	.word	0x08004840

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08004840 	.word	0x08004840

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_uldivmod>:
 8000164:	b953      	cbnz	r3, 800017c <__aeabi_uldivmod+0x18>
 8000166:	b94a      	cbnz	r2, 800017c <__aeabi_uldivmod+0x18>
 8000168:	2900      	cmp	r1, #0
 800016a:	bf08      	it	eq
 800016c:	2800      	cmpeq	r0, #0
 800016e:	bf1c      	itt	ne
 8000170:	f04f 31ff 	movne.w	r1, #4294967295
 8000174:	f04f 30ff 	movne.w	r0, #4294967295
 8000178:	f000 b976 	b.w	8000468 <__aeabi_idiv0>
 800017c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000180:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000184:	f000 f806 	bl	8000194 <__udivmoddi4>
 8000188:	f8dd e004 	ldr.w	lr, [sp, #4]
 800018c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000190:	b004      	add	sp, #16
 8000192:	4770      	bx	lr

08000194 <__udivmoddi4>:
 8000194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000198:	9e08      	ldr	r6, [sp, #32]
 800019a:	460d      	mov	r5, r1
 800019c:	4604      	mov	r4, r0
 800019e:	4688      	mov	r8, r1
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d14d      	bne.n	8000240 <__udivmoddi4+0xac>
 80001a4:	428a      	cmp	r2, r1
 80001a6:	4694      	mov	ip, r2
 80001a8:	d968      	bls.n	800027c <__udivmoddi4+0xe8>
 80001aa:	fab2 f282 	clz	r2, r2
 80001ae:	b152      	cbz	r2, 80001c6 <__udivmoddi4+0x32>
 80001b0:	fa01 f302 	lsl.w	r3, r1, r2
 80001b4:	f1c2 0120 	rsb	r1, r2, #32
 80001b8:	fa20 f101 	lsr.w	r1, r0, r1
 80001bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80001c0:	ea41 0803 	orr.w	r8, r1, r3
 80001c4:	4094      	lsls	r4, r2
 80001c6:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80001ca:	fbb8 f7f1 	udiv	r7, r8, r1
 80001ce:	fa1f fe8c 	uxth.w	lr, ip
 80001d2:	fb01 8817 	mls	r8, r1, r7, r8
 80001d6:	fb07 f00e 	mul.w	r0, r7, lr
 80001da:	0c23      	lsrs	r3, r4, #16
 80001dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001e0:	4298      	cmp	r0, r3
 80001e2:	d90a      	bls.n	80001fa <__udivmoddi4+0x66>
 80001e4:	eb1c 0303 	adds.w	r3, ip, r3
 80001e8:	f107 35ff 	add.w	r5, r7, #4294967295
 80001ec:	f080 811e 	bcs.w	800042c <__udivmoddi4+0x298>
 80001f0:	4298      	cmp	r0, r3
 80001f2:	f240 811b 	bls.w	800042c <__udivmoddi4+0x298>
 80001f6:	3f02      	subs	r7, #2
 80001f8:	4463      	add	r3, ip
 80001fa:	1a1b      	subs	r3, r3, r0
 80001fc:	fbb3 f0f1 	udiv	r0, r3, r1
 8000200:	fb01 3310 	mls	r3, r1, r0, r3
 8000204:	fb00 fe0e 	mul.w	lr, r0, lr
 8000208:	b2a4      	uxth	r4, r4
 800020a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800020e:	45a6      	cmp	lr, r4
 8000210:	d90a      	bls.n	8000228 <__udivmoddi4+0x94>
 8000212:	eb1c 0404 	adds.w	r4, ip, r4
 8000216:	f100 33ff 	add.w	r3, r0, #4294967295
 800021a:	f080 8109 	bcs.w	8000430 <__udivmoddi4+0x29c>
 800021e:	45a6      	cmp	lr, r4
 8000220:	f240 8106 	bls.w	8000430 <__udivmoddi4+0x29c>
 8000224:	4464      	add	r4, ip
 8000226:	3802      	subs	r0, #2
 8000228:	2100      	movs	r1, #0
 800022a:	eba4 040e 	sub.w	r4, r4, lr
 800022e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000232:	b11e      	cbz	r6, 800023c <__udivmoddi4+0xa8>
 8000234:	2300      	movs	r3, #0
 8000236:	40d4      	lsrs	r4, r2
 8000238:	e9c6 4300 	strd	r4, r3, [r6]
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	428b      	cmp	r3, r1
 8000242:	d908      	bls.n	8000256 <__udivmoddi4+0xc2>
 8000244:	2e00      	cmp	r6, #0
 8000246:	f000 80ee 	beq.w	8000426 <__udivmoddi4+0x292>
 800024a:	2100      	movs	r1, #0
 800024c:	e9c6 0500 	strd	r0, r5, [r6]
 8000250:	4608      	mov	r0, r1
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	fab3 f183 	clz	r1, r3
 800025a:	2900      	cmp	r1, #0
 800025c:	d14a      	bne.n	80002f4 <__udivmoddi4+0x160>
 800025e:	42ab      	cmp	r3, r5
 8000260:	d302      	bcc.n	8000268 <__udivmoddi4+0xd4>
 8000262:	4282      	cmp	r2, r0
 8000264:	f200 80fc 	bhi.w	8000460 <__udivmoddi4+0x2cc>
 8000268:	1a84      	subs	r4, r0, r2
 800026a:	eb65 0303 	sbc.w	r3, r5, r3
 800026e:	2001      	movs	r0, #1
 8000270:	4698      	mov	r8, r3
 8000272:	2e00      	cmp	r6, #0
 8000274:	d0e2      	beq.n	800023c <__udivmoddi4+0xa8>
 8000276:	e9c6 4800 	strd	r4, r8, [r6]
 800027a:	e7df      	b.n	800023c <__udivmoddi4+0xa8>
 800027c:	b902      	cbnz	r2, 8000280 <__udivmoddi4+0xec>
 800027e:	deff      	udf	#255	; 0xff
 8000280:	fab2 f282 	clz	r2, r2
 8000284:	2a00      	cmp	r2, #0
 8000286:	f040 8091 	bne.w	80003ac <__udivmoddi4+0x218>
 800028a:	eba1 000c 	sub.w	r0, r1, ip
 800028e:	2101      	movs	r1, #1
 8000290:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000294:	fa1f fe8c 	uxth.w	lr, ip
 8000298:	fbb0 f3f7 	udiv	r3, r0, r7
 800029c:	fb07 0013 	mls	r0, r7, r3, r0
 80002a0:	0c25      	lsrs	r5, r4, #16
 80002a2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002a6:	fb0e f003 	mul.w	r0, lr, r3
 80002aa:	42a8      	cmp	r0, r5
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0x12c>
 80002ae:	eb1c 0505 	adds.w	r5, ip, r5
 80002b2:	f103 38ff 	add.w	r8, r3, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x12a>
 80002b8:	42a8      	cmp	r0, r5
 80002ba:	f200 80ce 	bhi.w	800045a <__udivmoddi4+0x2c6>
 80002be:	4643      	mov	r3, r8
 80002c0:	1a2d      	subs	r5, r5, r0
 80002c2:	fbb5 f0f7 	udiv	r0, r5, r7
 80002c6:	fb07 5510 	mls	r5, r7, r0, r5
 80002ca:	fb0e fe00 	mul.w	lr, lr, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002d4:	45a6      	cmp	lr, r4
 80002d6:	d908      	bls.n	80002ea <__udivmoddi4+0x156>
 80002d8:	eb1c 0404 	adds.w	r4, ip, r4
 80002dc:	f100 35ff 	add.w	r5, r0, #4294967295
 80002e0:	d202      	bcs.n	80002e8 <__udivmoddi4+0x154>
 80002e2:	45a6      	cmp	lr, r4
 80002e4:	f200 80b6 	bhi.w	8000454 <__udivmoddi4+0x2c0>
 80002e8:	4628      	mov	r0, r5
 80002ea:	eba4 040e 	sub.w	r4, r4, lr
 80002ee:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80002f2:	e79e      	b.n	8000232 <__udivmoddi4+0x9e>
 80002f4:	f1c1 0720 	rsb	r7, r1, #32
 80002f8:	408b      	lsls	r3, r1
 80002fa:	fa22 fc07 	lsr.w	ip, r2, r7
 80002fe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000302:	fa25 fa07 	lsr.w	sl, r5, r7
 8000306:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800030a:	fbba f8f9 	udiv	r8, sl, r9
 800030e:	fa20 f307 	lsr.w	r3, r0, r7
 8000312:	fb09 aa18 	mls	sl, r9, r8, sl
 8000316:	408d      	lsls	r5, r1
 8000318:	fa1f fe8c 	uxth.w	lr, ip
 800031c:	431d      	orrs	r5, r3
 800031e:	fa00 f301 	lsl.w	r3, r0, r1
 8000322:	fb08 f00e 	mul.w	r0, r8, lr
 8000326:	0c2c      	lsrs	r4, r5, #16
 8000328:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800032c:	42a0      	cmp	r0, r4
 800032e:	fa02 f201 	lsl.w	r2, r2, r1
 8000332:	d90b      	bls.n	800034c <__udivmoddi4+0x1b8>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f108 3aff 	add.w	sl, r8, #4294967295
 800033c:	f080 8088 	bcs.w	8000450 <__udivmoddi4+0x2bc>
 8000340:	42a0      	cmp	r0, r4
 8000342:	f240 8085 	bls.w	8000450 <__udivmoddi4+0x2bc>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	4464      	add	r4, ip
 800034c:	1a24      	subs	r4, r4, r0
 800034e:	fbb4 f0f9 	udiv	r0, r4, r9
 8000352:	fb09 4410 	mls	r4, r9, r0, r4
 8000356:	fb00 fe0e 	mul.w	lr, r0, lr
 800035a:	b2ad      	uxth	r5, r5
 800035c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x1e2>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 35ff 	add.w	r5, r0, #4294967295
 800036c:	d26c      	bcs.n	8000448 <__udivmoddi4+0x2b4>
 800036e:	45a6      	cmp	lr, r4
 8000370:	d96a      	bls.n	8000448 <__udivmoddi4+0x2b4>
 8000372:	3802      	subs	r0, #2
 8000374:	4464      	add	r4, ip
 8000376:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800037a:	fba0 9502 	umull	r9, r5, r0, r2
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	42ac      	cmp	r4, r5
 8000384:	46c8      	mov	r8, r9
 8000386:	46ae      	mov	lr, r5
 8000388:	d356      	bcc.n	8000438 <__udivmoddi4+0x2a4>
 800038a:	d053      	beq.n	8000434 <__udivmoddi4+0x2a0>
 800038c:	2e00      	cmp	r6, #0
 800038e:	d069      	beq.n	8000464 <__udivmoddi4+0x2d0>
 8000390:	ebb3 0208 	subs.w	r2, r3, r8
 8000394:	eb64 040e 	sbc.w	r4, r4, lr
 8000398:	fa22 f301 	lsr.w	r3, r2, r1
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	431f      	orrs	r7, r3
 80003a2:	40cc      	lsrs	r4, r1
 80003a4:	e9c6 7400 	strd	r7, r4, [r6]
 80003a8:	2100      	movs	r1, #0
 80003aa:	e747      	b.n	800023c <__udivmoddi4+0xa8>
 80003ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b0:	f1c2 0120 	rsb	r1, r2, #32
 80003b4:	fa25 f301 	lsr.w	r3, r5, r1
 80003b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003bc:	fa20 f101 	lsr.w	r1, r0, r1
 80003c0:	4095      	lsls	r5, r2
 80003c2:	430d      	orrs	r5, r1
 80003c4:	fbb3 f1f7 	udiv	r1, r3, r7
 80003c8:	fb07 3311 	mls	r3, r7, r1, r3
 80003cc:	fa1f fe8c 	uxth.w	lr, ip
 80003d0:	0c28      	lsrs	r0, r5, #16
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	fb01 f30e 	mul.w	r3, r1, lr
 80003da:	4283      	cmp	r3, r0
 80003dc:	fa04 f402 	lsl.w	r4, r4, r2
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x260>
 80003e2:	eb1c 0000 	adds.w	r0, ip, r0
 80003e6:	f101 38ff 	add.w	r8, r1, #4294967295
 80003ea:	d22f      	bcs.n	800044c <__udivmoddi4+0x2b8>
 80003ec:	4283      	cmp	r3, r0
 80003ee:	d92d      	bls.n	800044c <__udivmoddi4+0x2b8>
 80003f0:	3902      	subs	r1, #2
 80003f2:	4460      	add	r0, ip
 80003f4:	1ac0      	subs	r0, r0, r3
 80003f6:	fbb0 f3f7 	udiv	r3, r0, r7
 80003fa:	fb07 0013 	mls	r0, r7, r3, r0
 80003fe:	b2ad      	uxth	r5, r5
 8000400:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000404:	fb03 f00e 	mul.w	r0, r3, lr
 8000408:	42a8      	cmp	r0, r5
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x28a>
 800040c:	eb1c 0505 	adds.w	r5, ip, r5
 8000410:	f103 38ff 	add.w	r8, r3, #4294967295
 8000414:	d216      	bcs.n	8000444 <__udivmoddi4+0x2b0>
 8000416:	42a8      	cmp	r0, r5
 8000418:	d914      	bls.n	8000444 <__udivmoddi4+0x2b0>
 800041a:	3b02      	subs	r3, #2
 800041c:	4465      	add	r5, ip
 800041e:	1a28      	subs	r0, r5, r0
 8000420:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000424:	e738      	b.n	8000298 <__udivmoddi4+0x104>
 8000426:	4631      	mov	r1, r6
 8000428:	4630      	mov	r0, r6
 800042a:	e707      	b.n	800023c <__udivmoddi4+0xa8>
 800042c:	462f      	mov	r7, r5
 800042e:	e6e4      	b.n	80001fa <__udivmoddi4+0x66>
 8000430:	4618      	mov	r0, r3
 8000432:	e6f9      	b.n	8000228 <__udivmoddi4+0x94>
 8000434:	454b      	cmp	r3, r9
 8000436:	d2a9      	bcs.n	800038c <__udivmoddi4+0x1f8>
 8000438:	ebb9 0802 	subs.w	r8, r9, r2
 800043c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000440:	3801      	subs	r0, #1
 8000442:	e7a3      	b.n	800038c <__udivmoddi4+0x1f8>
 8000444:	4643      	mov	r3, r8
 8000446:	e7ea      	b.n	800041e <__udivmoddi4+0x28a>
 8000448:	4628      	mov	r0, r5
 800044a:	e794      	b.n	8000376 <__udivmoddi4+0x1e2>
 800044c:	4641      	mov	r1, r8
 800044e:	e7d1      	b.n	80003f4 <__udivmoddi4+0x260>
 8000450:	46d0      	mov	r8, sl
 8000452:	e77b      	b.n	800034c <__udivmoddi4+0x1b8>
 8000454:	4464      	add	r4, ip
 8000456:	3802      	subs	r0, #2
 8000458:	e747      	b.n	80002ea <__udivmoddi4+0x156>
 800045a:	3b02      	subs	r3, #2
 800045c:	4465      	add	r5, ip
 800045e:	e72f      	b.n	80002c0 <__udivmoddi4+0x12c>
 8000460:	4608      	mov	r0, r1
 8000462:	e706      	b.n	8000272 <__udivmoddi4+0xde>
 8000464:	4631      	mov	r1, r6
 8000466:	e6e9      	b.n	800023c <__udivmoddi4+0xa8>

08000468 <__aeabi_idiv0>:
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop

0800046c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b088      	sub	sp, #32
 8000470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000472:	f107 0310 	add.w	r3, r7, #16
 8000476:	2200      	movs	r2, #0
 8000478:	601a      	str	r2, [r3, #0]
 800047a:	605a      	str	r2, [r3, #4]
 800047c:	609a      	str	r2, [r3, #8]
 800047e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000480:	4b40      	ldr	r3, [pc, #256]	; (8000584 <MX_GPIO_Init+0x118>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a3f      	ldr	r2, [pc, #252]	; (8000584 <MX_GPIO_Init+0x118>)
 8000486:	f043 0310 	orr.w	r3, r3, #16
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b3d      	ldr	r3, [pc, #244]	; (8000584 <MX_GPIO_Init+0x118>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0310 	and.w	r3, r3, #16
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b3a      	ldr	r3, [pc, #232]	; (8000584 <MX_GPIO_Init+0x118>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a39      	ldr	r2, [pc, #228]	; (8000584 <MX_GPIO_Init+0x118>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b37      	ldr	r3, [pc, #220]	; (8000584 <MX_GPIO_Init+0x118>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004b0:	4b34      	ldr	r3, [pc, #208]	; (8000584 <MX_GPIO_Init+0x118>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	4a33      	ldr	r2, [pc, #204]	; (8000584 <MX_GPIO_Init+0x118>)
 80004b6:	f043 0308 	orr.w	r3, r3, #8
 80004ba:	6193      	str	r3, [r2, #24]
 80004bc:	4b31      	ldr	r3, [pc, #196]	; (8000584 <MX_GPIO_Init+0x118>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	f003 0308 	and.w	r3, r3, #8
 80004c4:	607b      	str	r3, [r7, #4]
 80004c6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUILDIN_LED_GPIO_Port, BUILDIN_LED_Pin, GPIO_PIN_RESET);
 80004c8:	2200      	movs	r2, #0
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	482e      	ldr	r0, [pc, #184]	; (8000588 <MX_GPIO_Init+0x11c>)
 80004d0:	f002 f81f 	bl	8002512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RESET_Pin|RED_LED_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f248 0120 	movw	r1, #32800	; 0x8020
 80004da:	482c      	ldr	r0, [pc, #176]	; (800058c <MX_GPIO_Init+0x120>)
 80004dc:	f002 f819 	bl	8002512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|BLUE_LED_Pin|GREEN_LED_Pin, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
 80004e6:	482a      	ldr	r0, [pc, #168]	; (8000590 <MX_GPIO_Init+0x124>)
 80004e8:	f002 f813 	bl	8002512 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUILDIN_LED_Pin;
 80004ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004f2:	2301      	movs	r3, #1
 80004f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f6:	2300      	movs	r3, #0
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004fa:	2302      	movs	r3, #2
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUILDIN_LED_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4619      	mov	r1, r3
 8000504:	4820      	ldr	r0, [pc, #128]	; (8000588 <MX_GPIO_Init+0x11c>)
 8000506:	f001 fe69 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SENSOR_2_Pin|SENSOR_1_Pin|RIGHT_BUTTON_Pin|LEFT_BUTTON_Pin;
 800050a:	f246 0303 	movw	r3, #24579	; 0x6003
 800050e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000510:	2300      	movs	r3, #0
 8000512:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000514:	2302      	movs	r3, #2
 8000516:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	4619      	mov	r1, r3
 800051e:	481b      	ldr	r0, [pc, #108]	; (800058c <MX_GPIO_Init+0x120>)
 8000520:	f001 fe5c 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = RESET_Pin|RED_LED_Pin;
 8000524:	f248 0320 	movw	r3, #32800	; 0x8020
 8000528:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800052a:	2301      	movs	r3, #1
 800052c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052e:	2300      	movs	r3, #0
 8000530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000532:	2302      	movs	r3, #2
 8000534:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000536:	f107 0310 	add.w	r3, r7, #16
 800053a:	4619      	mov	r1, r3
 800053c:	4813      	ldr	r0, [pc, #76]	; (800058c <MX_GPIO_Init+0x120>)
 800053e:	f001 fe4d 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|BLUE_LED_Pin|GREEN_LED_Pin;
 8000542:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000548:	2301      	movs	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2302      	movs	r3, #2
 8000552:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	4619      	mov	r1, r3
 800055a:	480d      	ldr	r0, [pc, #52]	; (8000590 <MX_GPIO_Init+0x124>)
 800055c:	f001 fe3e 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO0_Pin|MODE_Pin;
 8000560:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800056a:	2302      	movs	r3, #2
 800056c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4806      	ldr	r0, [pc, #24]	; (8000590 <MX_GPIO_Init+0x124>)
 8000576:	f001 fe31 	bl	80021dc <HAL_GPIO_Init>

}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40011000 	.word	0x40011000
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40010800 	.word	0x40010800

08000594 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000598:	4b12      	ldr	r3, [pc, #72]	; (80005e4 <MX_I2C1_Init+0x50>)
 800059a:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <MX_I2C1_Init+0x54>)
 800059c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800059e:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005a0:	4a12      	ldr	r2, [pc, #72]	; (80005ec <MX_I2C1_Init+0x58>)
 80005a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005b8:	4b0a      	ldr	r3, [pc, #40]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005be:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c4:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d0:	4804      	ldr	r0, [pc, #16]	; (80005e4 <MX_I2C1_Init+0x50>)
 80005d2:	f001 ffb7 	bl	8002544 <HAL_I2C_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005dc:	f000 fce7 	bl	8000fae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	40005400 	.word	0x40005400
 80005ec:	000186a0 	.word	0x000186a0

080005f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b08a      	sub	sp, #40	; 0x28
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f8:	f107 0314 	add.w	r3, r7, #20
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a1d      	ldr	r2, [pc, #116]	; (8000680 <HAL_I2C_MspInit+0x90>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d132      	bne.n	8000676 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <HAL_I2C_MspInit+0x94>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <HAL_I2C_MspInit+0x94>)
 8000616:	f043 0308 	orr.w	r3, r3, #8
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <HAL_I2C_MspInit+0x94>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0308 	and.w	r3, r3, #8
 8000624:	613b      	str	r3, [r7, #16]
 8000626:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000628:	f44f 7340 	mov.w	r3, #768	; 0x300
 800062c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800062e:	2312      	movs	r3, #18
 8000630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000632:	2303      	movs	r3, #3
 8000634:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4619      	mov	r1, r3
 800063c:	4812      	ldr	r0, [pc, #72]	; (8000688 <HAL_I2C_MspInit+0x98>)
 800063e:	f001 fdcd 	bl	80021dc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000642:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_I2C_MspInit+0x9c>)
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
 8000648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800064a:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
 8000650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000652:	f043 0302 	orr.w	r3, r3, #2
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
 8000658:	4a0c      	ldr	r2, [pc, #48]	; (800068c <HAL_I2C_MspInit+0x9c>)
 800065a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065c:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_I2C_MspInit+0x94>)
 8000660:	69db      	ldr	r3, [r3, #28]
 8000662:	4a08      	ldr	r2, [pc, #32]	; (8000684 <HAL_I2C_MspInit+0x94>)
 8000664:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000668:	61d3      	str	r3, [r2, #28]
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_I2C_MspInit+0x94>)
 800066c:	69db      	ldr	r3, [r3, #28]
 800066e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000672:	60fb      	str	r3, [r7, #12]
 8000674:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000676:	bf00      	nop
 8000678:	3728      	adds	r7, #40	; 0x28
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40005400 	.word	0x40005400
 8000684:	40021000 	.word	0x40021000
 8000688:	40010c00 	.word	0x40010c00
 800068c:	40010000 	.word	0x40010000

08000690 <assembleAndPutTextIntoDisplay>:
	newMsgCome = (GPIO_Pin == DIO0_Pin);
}



void assembleAndPutTextIntoDisplay(_mode loraMode, char * txt1, char * txt2, char * txt3){
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af02      	add	r7, sp, #8
 8000696:	60b9      	str	r1, [r7, #8]
 8000698:	607a      	str	r2, [r7, #4]
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	4603      	mov	r3, r0
 800069e:	73fb      	strb	r3, [r7, #15]

	ssd1306_Fill(Black);
 80006a0:	2000      	movs	r0, #0
 80006a2:	f001 fa9d 	bl	8001be0 <ssd1306_Fill>

	uint8_t fontHeight = 10, lineNo, initX = 5, initY = 5;
 80006a6:	230a      	movs	r3, #10
 80006a8:	75fb      	strb	r3, [r7, #23]
 80006aa:	2305      	movs	r3, #5
 80006ac:	75bb      	strb	r3, [r7, #22]
 80006ae:	2305      	movs	r3, #5
 80006b0:	757b      	strb	r3, [r7, #21]

	lineNo = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 80006b6:	7dfb      	ldrb	r3, [r7, #23]
 80006b8:	3301      	adds	r3, #1
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	7d3a      	ldrb	r2, [r7, #20]
 80006be:	fb02 f303 	mul.w	r3, r2, r3
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	7d7b      	ldrb	r3, [r7, #21]
 80006c6:	4413      	add	r3, r2
 80006c8:	b2da      	uxtb	r2, r3
 80006ca:	7dbb      	ldrb	r3, [r7, #22]
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fbd0 	bl	8001e74 <ssd1306_SetCursor>
	if(loraMode == _TRANSMITER){
 80006d4:	7bfb      	ldrb	r3, [r7, #15]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d107      	bne.n	80006ea <assembleAndPutTextIntoDisplay+0x5a>
		ssd1306_WriteString("M: TRANSMITER", Font_7x10, White);
 80006da:	4b24      	ldr	r3, [pc, #144]	; (800076c <assembleAndPutTextIntoDisplay+0xdc>)
 80006dc:	2201      	movs	r2, #1
 80006de:	9200      	str	r2, [sp, #0]
 80006e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006e2:	4823      	ldr	r0, [pc, #140]	; (8000770 <assembleAndPutTextIntoDisplay+0xe0>)
 80006e4:	f001 fba0 	bl	8001e28 <ssd1306_WriteString>
 80006e8:	e009      	b.n	80006fe <assembleAndPutTextIntoDisplay+0x6e>
	}
	else if(loraMode == _RECEIVER){
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	d106      	bne.n	80006fe <assembleAndPutTextIntoDisplay+0x6e>
		ssd1306_WriteString("M: RECEIVER", Font_7x10, White);
 80006f0:	4b1e      	ldr	r3, [pc, #120]	; (800076c <assembleAndPutTextIntoDisplay+0xdc>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	9200      	str	r2, [sp, #0]
 80006f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80006f8:	481e      	ldr	r0, [pc, #120]	; (8000774 <assembleAndPutTextIntoDisplay+0xe4>)
 80006fa:	f001 fb95 	bl	8001e28 <ssd1306_WriteString>
	}

	lineNo = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 8000702:	7dfb      	ldrb	r3, [r7, #23]
 8000704:	3301      	adds	r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	7d3a      	ldrb	r2, [r7, #20]
 800070a:	fb02 f303 	mul.w	r3, r2, r3
 800070e:	b2da      	uxtb	r2, r3
 8000710:	7d7b      	ldrb	r3, [r7, #21]
 8000712:	4413      	add	r3, r2
 8000714:	b2da      	uxtb	r2, r3
 8000716:	7dbb      	ldrb	r3, [r7, #22]
 8000718:	4611      	mov	r1, r2
 800071a:	4618      	mov	r0, r3
 800071c:	f001 fbaa 	bl	8001e74 <ssd1306_SetCursor>
	ssd1306_WriteString(txt1, Font_7x10, White);
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <assembleAndPutTextIntoDisplay+0xdc>)
 8000722:	2201      	movs	r2, #1
 8000724:	9200      	str	r2, [sp, #0]
 8000726:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000728:	68b8      	ldr	r0, [r7, #8]
 800072a:	f001 fb7d 	bl	8001e28 <ssd1306_WriteString>

	lineNo = 2;
 800072e:	2302      	movs	r3, #2
 8000730:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 8000732:	7dfb      	ldrb	r3, [r7, #23]
 8000734:	3301      	adds	r3, #1
 8000736:	b2db      	uxtb	r3, r3
 8000738:	7d3a      	ldrb	r2, [r7, #20]
 800073a:	fb02 f303 	mul.w	r3, r2, r3
 800073e:	b2da      	uxtb	r2, r3
 8000740:	7d7b      	ldrb	r3, [r7, #21]
 8000742:	4413      	add	r3, r2
 8000744:	b2da      	uxtb	r2, r3
 8000746:	7dbb      	ldrb	r3, [r7, #22]
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f001 fb92 	bl	8001e74 <ssd1306_SetCursor>
	ssd1306_WriteString(txt2, Font_7x10, White);
 8000750:	4b06      	ldr	r3, [pc, #24]	; (800076c <assembleAndPutTextIntoDisplay+0xdc>)
 8000752:	2201      	movs	r2, #1
 8000754:	9200      	str	r2, [sp, #0]
 8000756:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f001 fb65 	bl	8001e28 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800075e:	f001 fa57 	bl	8001c10 <ssd1306_UpdateScreen>
}
 8000762:	bf00      	nop
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	08005110 	.word	0x08005110
 8000770:	08004858 	.word	0x08004858
 8000774:	08004868 	.word	0x08004868

08000778 <writeLineByLine>:

void writeLineByLine(char * txt, char * txt1, char * txt2, char * txt3){
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af02      	add	r7, sp, #8
 800077e:	60f8      	str	r0, [r7, #12]
 8000780:	60b9      	str	r1, [r7, #8]
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	603b      	str	r3, [r7, #0]

	ssd1306_Fill(Black);
 8000786:	2000      	movs	r0, #0
 8000788:	f001 fa2a 	bl	8001be0 <ssd1306_Fill>

	uint8_t fontHeight = 10, lineNo, initX = 5, initY = 5;
 800078c:	230a      	movs	r3, #10
 800078e:	75fb      	strb	r3, [r7, #23]
 8000790:	2305      	movs	r3, #5
 8000792:	75bb      	strb	r3, [r7, #22]
 8000794:	2305      	movs	r3, #5
 8000796:	757b      	strb	r3, [r7, #21]

	lineNo = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 800079c:	7dfb      	ldrb	r3, [r7, #23]
 800079e:	3301      	adds	r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	7d3a      	ldrb	r2, [r7, #20]
 80007a4:	fb02 f303 	mul.w	r3, r2, r3
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	7d7b      	ldrb	r3, [r7, #21]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	7dbb      	ldrb	r3, [r7, #22]
 80007b2:	4611      	mov	r1, r2
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fb5d 	bl	8001e74 <ssd1306_SetCursor>
	ssd1306_WriteString(txt, Font_7x10, White);
 80007ba:	4b1e      	ldr	r3, [pc, #120]	; (8000834 <writeLineByLine+0xbc>)
 80007bc:	2201      	movs	r2, #1
 80007be:	9200      	str	r2, [sp, #0]
 80007c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007c2:	68f8      	ldr	r0, [r7, #12]
 80007c4:	f001 fb30 	bl	8001e28 <ssd1306_WriteString>

	lineNo = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 80007cc:	7dfb      	ldrb	r3, [r7, #23]
 80007ce:	3301      	adds	r3, #1
 80007d0:	b2db      	uxtb	r3, r3
 80007d2:	7d3a      	ldrb	r2, [r7, #20]
 80007d4:	fb02 f303 	mul.w	r3, r2, r3
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	7d7b      	ldrb	r3, [r7, #21]
 80007dc:	4413      	add	r3, r2
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	7dbb      	ldrb	r3, [r7, #22]
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 fb45 	bl	8001e74 <ssd1306_SetCursor>
	ssd1306_WriteString(txt1, Font_7x10, White);
 80007ea:	4b12      	ldr	r3, [pc, #72]	; (8000834 <writeLineByLine+0xbc>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	9200      	str	r2, [sp, #0]
 80007f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80007f2:	68b8      	ldr	r0, [r7, #8]
 80007f4:	f001 fb18 	bl	8001e28 <ssd1306_WriteString>

	lineNo = 2;
 80007f8:	2302      	movs	r3, #2
 80007fa:	753b      	strb	r3, [r7, #20]
	ssd1306_SetCursor(initX, initY + (fontHeight + 1)* lineNo);
 80007fc:	7dfb      	ldrb	r3, [r7, #23]
 80007fe:	3301      	adds	r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	7d3a      	ldrb	r2, [r7, #20]
 8000804:	fb02 f303 	mul.w	r3, r2, r3
 8000808:	b2da      	uxtb	r2, r3
 800080a:	7d7b      	ldrb	r3, [r7, #21]
 800080c:	4413      	add	r3, r2
 800080e:	b2da      	uxtb	r2, r3
 8000810:	7dbb      	ldrb	r3, [r7, #22]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f001 fb2d 	bl	8001e74 <ssd1306_SetCursor>
	ssd1306_WriteString(txt2, Font_7x10, White);
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <writeLineByLine+0xbc>)
 800081c:	2201      	movs	r2, #1
 800081e:	9200      	str	r2, [sp, #0]
 8000820:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f001 fb00 	bl	8001e28 <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 8000828:	f001 f9f2 	bl	8001c10 <ssd1306_UpdateScreen>
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	08005110 	.word	0x08005110

08000838 <isButtonPressed>:

bool isButtonPressed(_button b){
 8000838:	b580      	push	{r7, lr}
 800083a:	b084      	sub	sp, #16
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]

	uint32_t debounceTime_ms = 50;
 8000842:	2332      	movs	r3, #50	; 0x32
 8000844:	60fb      	str	r3, [r7, #12]
	uint32_t pressingTime_ms = 100;
 8000846:	2364      	movs	r3, #100	; 0x64
 8000848:	60bb      	str	r3, [r7, #8]
	switch(b){
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	2b00      	cmp	r3, #0
 800084e:	d002      	beq.n	8000856 <isButtonPressed+0x1e>
 8000850:	2b01      	cmp	r3, #1
 8000852:	d018      	beq.n	8000886 <isButtonPressed+0x4e>
 8000854:	e032      	b.n	80008bc <isButtonPressed+0x84>
	case _LEFT_BUTTON:
		if(HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin) == GPIO_PIN_SET){
 8000856:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800085a:	481b      	ldr	r0, [pc, #108]	; (80008c8 <isButtonPressed+0x90>)
 800085c:	f001 fe42 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000860:	4603      	mov	r3, r0
 8000862:	2b01      	cmp	r3, #1
 8000864:	d127      	bne.n	80008b6 <isButtonPressed+0x7e>
			HAL_Delay(debounceTime_ms);
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f001 fbb0 	bl	8001fcc <HAL_Delay>
			if(HAL_GPIO_ReadPin(LEFT_BUTTON_GPIO_Port, LEFT_BUTTON_Pin) == GPIO_PIN_SET){
 800086c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000870:	4815      	ldr	r0, [pc, #84]	; (80008c8 <isButtonPressed+0x90>)
 8000872:	f001 fe37 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	d11c      	bne.n	80008b6 <isButtonPressed+0x7e>
				HAL_Delay(pressingTime_ms);
 800087c:	68b8      	ldr	r0, [r7, #8]
 800087e:	f001 fba5 	bl	8001fcc <HAL_Delay>
				return true;
 8000882:	2301      	movs	r3, #1
 8000884:	e01b      	b.n	80008be <isButtonPressed+0x86>
			}
		}
		break;
	case _RIGHT_BUTTON:
		if(HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin) == GPIO_PIN_SET){
 8000886:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <isButtonPressed+0x90>)
 800088c:	f001 fe2a 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b01      	cmp	r3, #1
 8000894:	d111      	bne.n	80008ba <isButtonPressed+0x82>
			HAL_Delay(debounceTime_ms);
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	f001 fb98 	bl	8001fcc <HAL_Delay>
			if(HAL_GPIO_ReadPin(RIGHT_BUTTON_GPIO_Port, RIGHT_BUTTON_Pin) == GPIO_PIN_SET){
 800089c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008a0:	4809      	ldr	r0, [pc, #36]	; (80008c8 <isButtonPressed+0x90>)
 80008a2:	f001 fe1f 	bl	80024e4 <HAL_GPIO_ReadPin>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d106      	bne.n	80008ba <isButtonPressed+0x82>
				HAL_Delay(pressingTime_ms);
 80008ac:	68b8      	ldr	r0, [r7, #8]
 80008ae:	f001 fb8d 	bl	8001fcc <HAL_Delay>
				return true;
 80008b2:	2301      	movs	r3, #1
 80008b4:	e003      	b.n	80008be <isButtonPressed+0x86>
		break;
 80008b6:	bf00      	nop
 80008b8:	e000      	b.n	80008bc <isButtonPressed+0x84>
			}
		}
		break;
 80008ba:	bf00      	nop
	}
	return false;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3710      	adds	r7, #16
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	40010c00 	.word	0x40010c00

080008cc <sendMsg_Basic>:

void sendMsg_Basic(char * msg){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
	if(!txInitialized){
 80008d4:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <sendMsg_Basic+0x7c>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d00e      	beq.n	8000900 <sendMsg_Basic+0x34>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 80008e2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80008e6:	2110      	movs	r1, #16
 80008e8:	4818      	ldr	r0, [pc, #96]	; (800094c <sendMsg_Basic+0x80>)
 80008ea:	f000 ff34 	bl	8001756 <SX1278_LoRaEntryTx>
 80008ee:	4603      	mov	r3, r0
 80008f0:	4a17      	ldr	r2, [pc, #92]	; (8000950 <sendMsg_Basic+0x84>)
 80008f2:	6013      	str	r3, [r2, #0]
		txInitialized = true;
 80008f4:	4b14      	ldr	r3, [pc, #80]	; (8000948 <sendMsg_Basic+0x7c>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
		rxInitialized = false;
 80008fa:	4b16      	ldr	r3, [pc, #88]	; (8000954 <sendMsg_Basic+0x88>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	701a      	strb	r2, [r3, #0]
	}

	message_length = sprintf(buffer, msg);
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	4815      	ldr	r0, [pc, #84]	; (8000958 <sendMsg_Basic+0x8c>)
 8000904:	f003 fb30 	bl	8003f68 <siprintf>
 8000908:	4603      	mov	r3, r0
 800090a:	4a14      	ldr	r2, [pc, #80]	; (800095c <sendMsg_Basic+0x90>)
 800090c:	6013      	str	r3, [r2, #0]
	ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <sendMsg_Basic+0x90>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	b2db      	uxtb	r3, r3
 8000914:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000918:	4619      	mov	r1, r3
 800091a:	480c      	ldr	r0, [pc, #48]	; (800094c <sendMsg_Basic+0x80>)
 800091c:	f000 ff1b 	bl	8001756 <SX1278_LoRaEntryTx>
 8000920:	4603      	mov	r3, r0
 8000922:	4a0b      	ldr	r2, [pc, #44]	; (8000950 <sendMsg_Basic+0x84>)
 8000924:	6013      	str	r3, [r2, #0]

	ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <sendMsg_Basic+0x90>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000930:	4909      	ldr	r1, [pc, #36]	; (8000958 <sendMsg_Basic+0x8c>)
 8000932:	4806      	ldr	r0, [pc, #24]	; (800094c <sendMsg_Basic+0x80>)
 8000934:	f000 ff67 	bl	8001806 <SX1278_LoRaTxPacket>
 8000938:	4603      	mov	r3, r0
 800093a:	4a05      	ldr	r2, [pc, #20]	; (8000950 <sendMsg_Basic+0x84>)
 800093c:	6013      	str	r3, [r2, #0]
			message_length, 2000);
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000420 	.word	0x20000420
 800094c:	20000100 	.word	0x20000100
 8000950:	20000218 	.word	0x20000218
 8000954:	20000421 	.word	0x20000421
 8000958:	2000021c 	.word	0x2000021c
 800095c:	2000041c 	.word	0x2000041c

08000960 <readMsg>:

bool readMsg(){
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	if(!rxInitialized){
 8000964:	4b16      	ldr	r3, [pc, #88]	; (80009c0 <readMsg+0x60>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	f083 0301 	eor.w	r3, r3, #1
 800096c:	b2db      	uxtb	r3, r3
 800096e:	2b00      	cmp	r3, #0
 8000970:	d00e      	beq.n	8000990 <readMsg+0x30>
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000972:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000976:	2110      	movs	r1, #16
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <readMsg+0x64>)
 800097a:	f000 fe43 	bl	8001604 <SX1278_LoRaEntryRx>
 800097e:	4603      	mov	r3, r0
 8000980:	4a11      	ldr	r2, [pc, #68]	; (80009c8 <readMsg+0x68>)
 8000982:	6013      	str	r3, [r2, #0]
		rxInitialized = true;
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <readMsg+0x60>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
		txInitialized = false;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <readMsg+0x6c>)
 800098c:	2200      	movs	r2, #0
 800098e:	701a      	strb	r2, [r3, #0]
	}

	ret = SX1278_LoRaRxPacket(&SX1278);
 8000990:	480c      	ldr	r0, [pc, #48]	; (80009c4 <readMsg+0x64>)
 8000992:	f000 fe9c 	bl	80016ce <SX1278_LoRaRxPacket>
 8000996:	4603      	mov	r3, r0
 8000998:	461a      	mov	r2, r3
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <readMsg+0x68>)
 800099c:	601a      	str	r2, [r3, #0]
	if (ret > 0) {
 800099e:	4b0a      	ldr	r3, [pc, #40]	; (80009c8 <readMsg+0x68>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	dd09      	ble.n	80009ba <readMsg+0x5a>
		SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 80009a6:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <readMsg+0x68>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	461a      	mov	r2, r3
 80009ae:	4908      	ldr	r1, [pc, #32]	; (80009d0 <readMsg+0x70>)
 80009b0:	4804      	ldr	r0, [pc, #16]	; (80009c4 <readMsg+0x64>)
 80009b2:	f000 ff94 	bl	80018de <SX1278_read>
		return true;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <readMsg+0x5c>
	}
	return false;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000421 	.word	0x20000421
 80009c4:	20000100 	.word	0x20000100
 80009c8:	20000218 	.word	0x20000218
 80009cc:	20000420 	.word	0x20000420
 80009d0:	2000021c 	.word	0x2000021c
 80009d4:	00000000 	.word	0x00000000

080009d8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08c      	sub	sp, #48	; 0x30
 80009dc:	af06      	add	r7, sp, #24
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009de:	f001 fa93 	bl	8001f08 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009e2:	f000 faa9 	bl	8000f38 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009e6:	f7ff fd41 	bl	800046c <MX_GPIO_Init>
	MX_I2C1_Init();
 80009ea:	f7ff fdd3 	bl	8000594 <MX_I2C1_Init>
	MX_SPI1_Init();
 80009ee:	f000 fae3 	bl	8000fb8 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	_mode loraMode;
	_screen currentScreen = _MAIN;
 80009f2:	2300      	movs	r3, #0
 80009f4:	75bb      	strb	r3, [r7, #22]
	uint8_t option = 0, cmdNo = 0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	757b      	strb	r3, [r7, #21]
 80009fa:	2300      	movs	r3, #0
 80009fc:	71bb      	strb	r3, [r7, #6]
	bool newMsg = false;
 80009fe:	2300      	movs	r3, #0
 8000a00:	717b      	strb	r3, [r7, #5]
	bool sendMsg = false;
 8000a02:	2300      	movs	r3, #0
 8000a04:	753b      	strb	r3, [r7, #20]

	ssd1306_Init();
 8000a06:	f001 f881 	bl	8001b0c <ssd1306_Init>

	ssd1306_Fill(Black);
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f001 f8e8 	bl	8001be0 <ssd1306_Fill>

	ssd1306_SetCursor(45, 20);
 8000a10:	2114      	movs	r1, #20
 8000a12:	202d      	movs	r0, #45	; 0x2d
 8000a14:	f001 fa2e 	bl	8001e74 <ssd1306_SetCursor>
	ssd1306_WriteString("HELLO", Font_7x10, White);
 8000a18:	4bad      	ldr	r3, [pc, #692]	; (8000cd0 <main+0x2f8>)
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	9200      	str	r2, [sp, #0]
 8000a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000a20:	48ac      	ldr	r0, [pc, #688]	; (8000cd4 <main+0x2fc>)
 8000a22:	f001 fa01 	bl	8001e28 <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8000a26:	f001 f8f3 	bl	8001c10 <ssd1306_UpdateScreen>

	if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == GPIO_PIN_SET){
 8000a2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a2e:	48aa      	ldr	r0, [pc, #680]	; (8000cd8 <main+0x300>)
 8000a30:	f001 fd58 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d102      	bne.n	8000a40 <main+0x68>
		loraMode = _TRANSMITER;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	75fb      	strb	r3, [r7, #23]
 8000a3e:	e001      	b.n	8000a44 <main+0x6c>
	}
	else{
		loraMode = _RECEIVER;
 8000a40:	2301      	movs	r3, #1
 8000a42:	75fb      	strb	r3, [r7, #23]
	}

	uint32_t newMsgDispTime, currTime, openWindowStart_IN, openWindowStart_OUT;
	newMsgDispTime = currTime = openWindowStart_IN = openWindowStart_OUT = HAL_GetTick();
 8000a44:	f001 fab8 	bl	8001fb8 <HAL_GetTick>
 8000a48:	60b8      	str	r0, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	603b      	str	r3, [r7, #0]
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	613b      	str	r3, [r7, #16]

	bool beSensitiveForSignal = true;
 8000a56:	2301      	movs	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]

	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000a5a:	4ba0      	ldr	r3, [pc, #640]	; (8000cdc <main+0x304>)
 8000a5c:	4a9e      	ldr	r2, [pc, #632]	; (8000cd8 <main+0x300>)
 8000a5e:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 8000a60:	4b9e      	ldr	r3, [pc, #632]	; (8000cdc <main+0x304>)
 8000a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a66:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000a68:	4b9c      	ldr	r3, [pc, #624]	; (8000cdc <main+0x304>)
 8000a6a:	4a9b      	ldr	r2, [pc, #620]	; (8000cd8 <main+0x300>)
 8000a6c:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 8000a6e:	4b9b      	ldr	r3, [pc, #620]	; (8000cdc <main+0x304>)
 8000a70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a74:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000a76:	4b99      	ldr	r3, [pc, #612]	; (8000cdc <main+0x304>)
 8000a78:	4a99      	ldr	r2, [pc, #612]	; (8000ce0 <main+0x308>)
 8000a7a:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 8000a7c:	4b97      	ldr	r3, [pc, #604]	; (8000cdc <main+0x304>)
 8000a7e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a82:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 8000a84:	4b95      	ldr	r3, [pc, #596]	; (8000cdc <main+0x304>)
 8000a86:	4a97      	ldr	r2, [pc, #604]	; (8000ce4 <main+0x30c>)
 8000a88:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 8000a8a:	4b97      	ldr	r3, [pc, #604]	; (8000ce8 <main+0x310>)
 8000a8c:	4a93      	ldr	r2, [pc, #588]	; (8000cdc <main+0x304>)
 8000a8e:	601a      	str	r2, [r3, #0]

	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 8000a90:	230a      	movs	r3, #10
 8000a92:	9305      	str	r3, [sp, #20]
 8000a94:	2300      	movs	r3, #0
 8000a96:	9304      	str	r3, [sp, #16]
 8000a98:	2300      	movs	r3, #0
 8000a9a:	9303      	str	r3, [sp, #12]
 8000a9c:	2307      	movs	r3, #7
 8000a9e:	9302      	str	r3, [sp, #8]
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	9301      	str	r3, [sp, #4]
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	9300      	str	r3, [sp, #0]
 8000aa8:	a387      	add	r3, pc, #540	; (adr r3, 8000cc8 <main+0x2f0>)
 8000aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aae:	488e      	ldr	r0, [pc, #568]	; (8000ce8 <main+0x310>)
 8000ab0:	f000 fee8 	bl	8001884 <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);

	if (loraMode == _TRANSMITER) {
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10c      	bne.n	8000ad4 <main+0xfc>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 2000);
 8000aba:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000abe:	2110      	movs	r1, #16
 8000ac0:	4889      	ldr	r0, [pc, #548]	; (8000ce8 <main+0x310>)
 8000ac2:	f000 fe48 	bl	8001756 <SX1278_LoRaEntryTx>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	4a88      	ldr	r2, [pc, #544]	; (8000cec <main+0x314>)
 8000aca:	6013      	str	r3, [r2, #0]
		txInitialized = true;
 8000acc:	4b88      	ldr	r3, [pc, #544]	; (8000cf0 <main+0x318>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e00b      	b.n	8000aec <main+0x114>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 2000);
 8000ad4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ad8:	2110      	movs	r1, #16
 8000ada:	4883      	ldr	r0, [pc, #524]	; (8000ce8 <main+0x310>)
 8000adc:	f000 fd92 	bl	8001604 <SX1278_LoRaEntryRx>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	4a82      	ldr	r2, [pc, #520]	; (8000cec <main+0x314>)
 8000ae4:	6013      	str	r3, [r2, #0]
		rxInitialized = true;
 8000ae6:	4b83      	ldr	r3, [pc, #524]	; (8000cf4 <main+0x31c>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8000aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000af0:	f001 fa6c 	bl	8001fcc <HAL_Delay>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		currTime = HAL_GetTick();
 8000af4:	f001 fa60 	bl	8001fb8 <HAL_GetTick>
 8000af8:	6038      	str	r0, [r7, #0]
		//				}




		switch(loraMode){
 8000afa:	7dfb      	ldrb	r3, [r7, #23]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d031      	beq.n	8000b64 <main+0x18c>
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	f040 809b 	bne.w	8000c3c <main+0x264>

		case _RECEIVER:
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_SET);
 8000b06:	2201      	movs	r2, #1
 8000b08:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b0c:	4872      	ldr	r0, [pc, #456]	; (8000cd8 <main+0x300>)
 8000b0e:	f001 fd00 	bl	8002512 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b18:	486f      	ldr	r0, [pc, #444]	; (8000cd8 <main+0x300>)
 8000b1a:	f001 fcfa 	bl	8002512 <HAL_GPIO_WritePin>

			if(readMsg()){
 8000b1e:	f7ff ff1f 	bl	8000960 <readMsg>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	f000 8086 	beq.w	8000c36 <main+0x25e>
				newMsgDispTime = HAL_GetTick();
 8000b2a:	f001 fa45 	bl	8001fb8 <HAL_GetTick>
 8000b2e:	6138      	str	r0, [r7, #16]
				if(strcmp(buffer, "LED ON") == 0){
 8000b30:	4971      	ldr	r1, [pc, #452]	; (8000cf8 <main+0x320>)
 8000b32:	4872      	ldr	r0, [pc, #456]	; (8000cfc <main+0x324>)
 8000b34:	f7ff fb0c 	bl	8000150 <strcmp>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d105      	bne.n	8000b4a <main+0x172>
					HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2120      	movs	r1, #32
 8000b42:	4867      	ldr	r0, [pc, #412]	; (8000ce0 <main+0x308>)
 8000b44:	f001 fce5 	bl	8002512 <HAL_GPIO_WritePin>
				else if(strcmp(buffer, "LED OFF") == 0){
					HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
				}
			}

			break;
 8000b48:	e075      	b.n	8000c36 <main+0x25e>
				else if(strcmp(buffer, "LED OFF") == 0){
 8000b4a:	496d      	ldr	r1, [pc, #436]	; (8000d00 <main+0x328>)
 8000b4c:	486b      	ldr	r0, [pc, #428]	; (8000cfc <main+0x324>)
 8000b4e:	f7ff faff 	bl	8000150 <strcmp>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d16e      	bne.n	8000c36 <main+0x25e>
					HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2120      	movs	r1, #32
 8000b5c:	4860      	ldr	r0, [pc, #384]	; (8000ce0 <main+0x308>)
 8000b5e:	f001 fcd8 	bl	8002512 <HAL_GPIO_WritePin>
			break;
 8000b62:	e068      	b.n	8000c36 <main+0x25e>

		case _TRANSMITER:
			HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b6a:	485b      	ldr	r0, [pc, #364]	; (8000cd8 <main+0x300>)
 8000b6c:	f001 fcd1 	bl	8002512 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b76:	4858      	ldr	r0, [pc, #352]	; (8000cd8 <main+0x300>)
 8000b78:	f001 fccb 	bl	8002512 <HAL_GPIO_WritePin>

			if((HAL_GPIO_ReadPin(SENSOR_1_GPIO_Port, SENSOR_1_Pin) == GPIO_PIN_RESET) && beSensitiveForSignal){
 8000b7c:	2102      	movs	r1, #2
 8000b7e:	4858      	ldr	r0, [pc, #352]	; (8000ce0 <main+0x308>)
 8000b80:	f001 fcb0 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d107      	bne.n	8000b9a <main+0x1c2>
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <main+0x1c2>
				openWindowStart_IN = HAL_GetTick();
 8000b90:	f001 fa12 	bl	8001fb8 <HAL_GetTick>
 8000b94:	60f8      	str	r0, [r7, #12]
				beSensitiveForSignal = false;
 8000b96:	2300      	movs	r3, #0
 8000b98:	71fb      	strb	r3, [r7, #7]
			}

			if(currTime - openWindowStart_IN < 500){
 8000b9a:	683a      	ldr	r2, [r7, #0]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ba4:	d20c      	bcs.n	8000bc0 <main+0x1e8>
				if((HAL_GPIO_ReadPin(SENSOR_2_GPIO_Port, SENSOR_2_Pin) == GPIO_PIN_RESET)){
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	484d      	ldr	r0, [pc, #308]	; (8000ce0 <main+0x308>)
 8000baa:	f001 fc9b 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d105      	bne.n	8000bc0 <main+0x1e8>
					sprintf(buffer, "LED ON");
 8000bb4:	4950      	ldr	r1, [pc, #320]	; (8000cf8 <main+0x320>)
 8000bb6:	4851      	ldr	r0, [pc, #324]	; (8000cfc <main+0x324>)
 8000bb8:	f003 f9d6 	bl	8003f68 <siprintf>
					sendMsg = true;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	753b      	strb	r3, [r7, #20]
				}
			}

			if(((HAL_GPIO_ReadPin(SENSOR_2_GPIO_Port, SENSOR_2_Pin) == GPIO_PIN_RESET)) && beSensitiveForSignal){
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4847      	ldr	r0, [pc, #284]	; (8000ce0 <main+0x308>)
 8000bc4:	f001 fc8e 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d107      	bne.n	8000bde <main+0x206>
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d004      	beq.n	8000bde <main+0x206>
				openWindowStart_OUT = HAL_GetTick();
 8000bd4:	f001 f9f0 	bl	8001fb8 <HAL_GetTick>
 8000bd8:	60b8      	str	r0, [r7, #8]
				beSensitiveForSignal = false;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	71fb      	strb	r3, [r7, #7]
			}

			if(currTime - openWindowStart_OUT < 500){
 8000bde:	683a      	ldr	r2, [r7, #0]
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000be8:	d20c      	bcs.n	8000c04 <main+0x22c>
				if(HAL_GPIO_ReadPin(SENSOR_1_GPIO_Port, SENSOR_1_Pin) == GPIO_PIN_RESET){
 8000bea:	2102      	movs	r1, #2
 8000bec:	483c      	ldr	r0, [pc, #240]	; (8000ce0 <main+0x308>)
 8000bee:	f001 fc79 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d105      	bne.n	8000c04 <main+0x22c>
					sprintf(buffer, "LED OFF");
 8000bf8:	4941      	ldr	r1, [pc, #260]	; (8000d00 <main+0x328>)
 8000bfa:	4840      	ldr	r0, [pc, #256]	; (8000cfc <main+0x324>)
 8000bfc:	f003 f9b4 	bl	8003f68 <siprintf>
					sendMsg = true;
 8000c00:	2301      	movs	r3, #1
 8000c02:	753b      	strb	r3, [r7, #20]
				}
			}

			if((HAL_GPIO_ReadPin(SENSOR_2_GPIO_Port, SENSOR_2_Pin) == GPIO_PIN_SET) &&
 8000c04:	2101      	movs	r1, #1
 8000c06:	4836      	ldr	r0, [pc, #216]	; (8000ce0 <main+0x308>)
 8000c08:	f001 fc6c 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d108      	bne.n	8000c24 <main+0x24c>
					HAL_GPIO_ReadPin(SENSOR_1_GPIO_Port, SENSOR_1_Pin) == GPIO_PIN_SET){
 8000c12:	2102      	movs	r1, #2
 8000c14:	4832      	ldr	r0, [pc, #200]	; (8000ce0 <main+0x308>)
 8000c16:	f001 fc65 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000c1a:	4603      	mov	r3, r0
			if((HAL_GPIO_ReadPin(SENSOR_2_GPIO_Port, SENSOR_2_Pin) == GPIO_PIN_SET) &&
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d101      	bne.n	8000c24 <main+0x24c>
				beSensitiveForSignal = true;
 8000c20:	2301      	movs	r3, #1
 8000c22:	71fb      	strb	r3, [r7, #7]
			}

			if(sendMsg){
 8000c24:	7d3b      	ldrb	r3, [r7, #20]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d007      	beq.n	8000c3a <main+0x262>
				sendMsg_Basic(buffer);
 8000c2a:	4834      	ldr	r0, [pc, #208]	; (8000cfc <main+0x324>)
 8000c2c:	f7ff fe4e 	bl	80008cc <sendMsg_Basic>
				sendMsg = false;
 8000c30:	2300      	movs	r3, #0
 8000c32:	753b      	strb	r3, [r7, #20]
			}
			break;
 8000c34:	e001      	b.n	8000c3a <main+0x262>
			break;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <main+0x264>
			break;
 8000c3a:	bf00      	nop
		}


		switch(currentScreen){
 8000c3c:	7dbb      	ldrb	r3, [r7, #22]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	f63f af58 	bhi.w	8000af4 <main+0x11c>
 8000c44:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <main+0x274>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c61 	.word	0x08000c61
 8000c50:	08000d91 	.word	0x08000d91
 8000c54:	08000c9b 	.word	0x08000c9b
 8000c58:	08000e05 	.word	0x08000e05
 8000c5c:	08000eb9 	.word	0x08000eb9
		case _MAIN:
			if(currTime - newMsgDispTime < 1000){
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c6a:	d206      	bcs.n	8000c7a <main+0x2a2>
				assembleAndPutTextIntoDisplay(loraMode, "New msg:", buffer, "");
 8000c6c:	7df8      	ldrb	r0, [r7, #23]
 8000c6e:	4b25      	ldr	r3, [pc, #148]	; (8000d04 <main+0x32c>)
 8000c70:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <main+0x324>)
 8000c72:	4925      	ldr	r1, [pc, #148]	; (8000d08 <main+0x330>)
 8000c74:	f7ff fd0c 	bl	8000690 <assembleAndPutTextIntoDisplay>
 8000c78:	e005      	b.n	8000c86 <main+0x2ae>
			}
			else{
				assembleAndPutTextIntoDisplay(loraMode, "","","");
 8000c7a:	7df8      	ldrb	r0, [r7, #23]
 8000c7c:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <main+0x32c>)
 8000c7e:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <main+0x32c>)
 8000c80:	4920      	ldr	r1, [pc, #128]	; (8000d04 <main+0x32c>)
 8000c82:	f7ff fd05 	bl	8000690 <assembleAndPutTextIntoDisplay>
			}
			if(isButtonPressed(_LEFT_BUTTON)){
 8000c86:	2000      	movs	r0, #0
 8000c88:	f7ff fdd6 	bl	8000838 <isButtonPressed>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	f000 811f 	beq.w	8000ed2 <main+0x4fa>
				currentScreen = _MENU;
 8000c94:	2302      	movs	r3, #2
 8000c96:	75bb      	strb	r3, [r7, #22]
			}
			break;
 8000c98:	e11b      	b.n	8000ed2 <main+0x4fa>

		case _MENU:
			if(option == 0){
 8000c9a:	7d7b      	ldrb	r3, [r7, #21]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d13b      	bne.n	8000d18 <main+0x340>
				writeLineByLine("->Select mode", "Send cmd", "Options", "");
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <main+0x32c>)
 8000ca2:	4a1a      	ldr	r2, [pc, #104]	; (8000d0c <main+0x334>)
 8000ca4:	491a      	ldr	r1, [pc, #104]	; (8000d10 <main+0x338>)
 8000ca6:	481b      	ldr	r0, [pc, #108]	; (8000d14 <main+0x33c>)
 8000ca8:	f7ff fd66 	bl	8000778 <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff fdc3 	bl	8000838 <isButtonPressed>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d056      	beq.n	8000d66 <main+0x38e>
					currentScreen = _SELECT_MODE;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	75bb      	strb	r3, [r7, #22]
					option = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	757b      	strb	r3, [r7, #21]
 8000cc0:	e051      	b.n	8000d66 <main+0x38e>
 8000cc2:	bf00      	nop
 8000cc4:	f3af 8000 	nop.w
 8000cc8:	19de5080 	.word	0x19de5080
 8000ccc:	00000000 	.word	0x00000000
 8000cd0:	08005110 	.word	0x08005110
 8000cd4:	08004874 	.word	0x08004874
 8000cd8:	40010800 	.word	0x40010800
 8000cdc:	200000e0 	.word	0x200000e0
 8000ce0:	40010c00 	.word	0x40010c00
 8000ce4:	20000424 	.word	0x20000424
 8000ce8:	20000100 	.word	0x20000100
 8000cec:	20000218 	.word	0x20000218
 8000cf0:	20000420 	.word	0x20000420
 8000cf4:	20000421 	.word	0x20000421
 8000cf8:	0800487c 	.word	0x0800487c
 8000cfc:	2000021c 	.word	0x2000021c
 8000d00:	08004884 	.word	0x08004884
 8000d04:	0800488c 	.word	0x0800488c
 8000d08:	08004890 	.word	0x08004890
 8000d0c:	0800489c 	.word	0x0800489c
 8000d10:	080048a4 	.word	0x080048a4
 8000d14:	080048b0 	.word	0x080048b0
				}
			}
			else if(option == 1){
 8000d18:	7d7b      	ldrb	r3, [r7, #21]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d110      	bne.n	8000d40 <main+0x368>
				writeLineByLine("Select mode", "->Send cmd", "Options", "");
 8000d1e:	4b71      	ldr	r3, [pc, #452]	; (8000ee4 <main+0x50c>)
 8000d20:	4a71      	ldr	r2, [pc, #452]	; (8000ee8 <main+0x510>)
 8000d22:	4972      	ldr	r1, [pc, #456]	; (8000eec <main+0x514>)
 8000d24:	4872      	ldr	r0, [pc, #456]	; (8000ef0 <main+0x518>)
 8000d26:	f7ff fd27 	bl	8000778 <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fd84 	bl	8000838 <isButtonPressed>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d017      	beq.n	8000d66 <main+0x38e>
					currentScreen = _SEND_CMD;
 8000d36:	2303      	movs	r3, #3
 8000d38:	75bb      	strb	r3, [r7, #22]
					option = 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	757b      	strb	r3, [r7, #21]
 8000d3e:	e012      	b.n	8000d66 <main+0x38e>
				}
			}
			else if(option == 2){
 8000d40:	7d7b      	ldrb	r3, [r7, #21]
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d10f      	bne.n	8000d66 <main+0x38e>
				writeLineByLine("Select mode", "Send cmd", "->Options", "");
 8000d46:	4b67      	ldr	r3, [pc, #412]	; (8000ee4 <main+0x50c>)
 8000d48:	4a6a      	ldr	r2, [pc, #424]	; (8000ef4 <main+0x51c>)
 8000d4a:	496b      	ldr	r1, [pc, #428]	; (8000ef8 <main+0x520>)
 8000d4c:	4868      	ldr	r0, [pc, #416]	; (8000ef0 <main+0x518>)
 8000d4e:	f7ff fd13 	bl	8000778 <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fd70 	bl	8000838 <isButtonPressed>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d003      	beq.n	8000d66 <main+0x38e>
					currentScreen = _OPTIONS;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	75bb      	strb	r3, [r7, #22]
					option = 0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	757b      	strb	r3, [r7, #21]
				}
			}

			if(isButtonPressed(_RIGHT_BUTTON)){
 8000d66:	2001      	movs	r0, #1
 8000d68:	f7ff fd66 	bl	8000838 <isButtonPressed>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 80b1 	beq.w	8000ed6 <main+0x4fe>
				option = (option + 1)%3;
 8000d74:	7d7b      	ldrb	r3, [r7, #21]
 8000d76:	1c5a      	adds	r2, r3, #1
 8000d78:	4b60      	ldr	r3, [pc, #384]	; (8000efc <main+0x524>)
 8000d7a:	fb83 3102 	smull	r3, r1, r3, r2
 8000d7e:	17d3      	asrs	r3, r2, #31
 8000d80:	1ac9      	subs	r1, r1, r3
 8000d82:	460b      	mov	r3, r1
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	440b      	add	r3, r1
 8000d88:	1ad1      	subs	r1, r2, r3
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	757b      	strb	r3, [r7, #21]
			}
			break;
 8000d8e:	e0a2      	b.n	8000ed6 <main+0x4fe>

		case _SELECT_MODE:
			if(option == 0){
 8000d90:	7d7b      	ldrb	r3, [r7, #21]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d112      	bne.n	8000dbc <main+0x3e4>
				writeLineByLine("->RECEIVER", "TRANSMITER", "", "");
 8000d96:	4b53      	ldr	r3, [pc, #332]	; (8000ee4 <main+0x50c>)
 8000d98:	4a52      	ldr	r2, [pc, #328]	; (8000ee4 <main+0x50c>)
 8000d9a:	4959      	ldr	r1, [pc, #356]	; (8000f00 <main+0x528>)
 8000d9c:	4859      	ldr	r0, [pc, #356]	; (8000f04 <main+0x52c>)
 8000d9e:	f7ff fceb 	bl	8000778 <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000da2:	2000      	movs	r0, #0
 8000da4:	f7ff fd48 	bl	8000838 <isButtonPressed>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d01b      	beq.n	8000de6 <main+0x40e>
					loraMode = _RECEIVER;
 8000dae:	2301      	movs	r3, #1
 8000db0:	75fb      	strb	r3, [r7, #23]
					currentScreen = _MAIN;
 8000db2:	2300      	movs	r3, #0
 8000db4:	75bb      	strb	r3, [r7, #22]
					option = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	757b      	strb	r3, [r7, #21]
 8000dba:	e014      	b.n	8000de6 <main+0x40e>
				}
			}
			else if(option == 1){
 8000dbc:	7d7b      	ldrb	r3, [r7, #21]
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d111      	bne.n	8000de6 <main+0x40e>
				writeLineByLine("RECEIVER", "->TRANSMITER", "", "");
 8000dc2:	4b48      	ldr	r3, [pc, #288]	; (8000ee4 <main+0x50c>)
 8000dc4:	4a47      	ldr	r2, [pc, #284]	; (8000ee4 <main+0x50c>)
 8000dc6:	4950      	ldr	r1, [pc, #320]	; (8000f08 <main+0x530>)
 8000dc8:	4850      	ldr	r0, [pc, #320]	; (8000f0c <main+0x534>)
 8000dca:	f7ff fcd5 	bl	8000778 <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000dce:	2000      	movs	r0, #0
 8000dd0:	f7ff fd32 	bl	8000838 <isButtonPressed>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <main+0x40e>
					loraMode = _TRANSMITER;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	75fb      	strb	r3, [r7, #23]
					currentScreen = _MAIN;
 8000dde:	2300      	movs	r3, #0
 8000de0:	75bb      	strb	r3, [r7, #22]
					option = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	757b      	strb	r3, [r7, #21]
				}
			}

			if(isButtonPressed(_RIGHT_BUTTON)){
 8000de6:	2001      	movs	r0, #1
 8000de8:	f7ff fd26 	bl	8000838 <isButtonPressed>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d073      	beq.n	8000eda <main+0x502>
				option = (option + 1)%2;
 8000df2:	7d7b      	ldrb	r3, [r7, #21]
 8000df4:	3301      	adds	r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	bfb8      	it	lt
 8000dfe:	425b      	neglt	r3, r3
 8000e00:	757b      	strb	r3, [r7, #21]
			}

			break;
 8000e02:	e06a      	b.n	8000eda <main+0x502>

		case _SEND_CMD:
			if(option == 0){
 8000e04:	7d7b      	ldrb	r3, [r7, #21]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d122      	bne.n	8000e50 <main+0x478>
				writeLineByLine("->LED ON", "LED OFF", "", "");
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <main+0x50c>)
 8000e0c:	4a35      	ldr	r2, [pc, #212]	; (8000ee4 <main+0x50c>)
 8000e0e:	4940      	ldr	r1, [pc, #256]	; (8000f10 <main+0x538>)
 8000e10:	4840      	ldr	r0, [pc, #256]	; (8000f14 <main+0x53c>)
 8000e12:	f7ff fcb1 	bl	8000778 <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fd0e 	bl	8000838 <isButtonPressed>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d03b      	beq.n	8000e9a <main+0x4c2>
					sprintf(buffer, "LED ON");
 8000e22:	493d      	ldr	r1, [pc, #244]	; (8000f18 <main+0x540>)
 8000e24:	483d      	ldr	r0, [pc, #244]	; (8000f1c <main+0x544>)
 8000e26:	f003 f89f 	bl	8003f68 <siprintf>
					sendMsg = true;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	753b      	strb	r3, [r7, #20]
					currentScreen = _MAIN;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	75bb      	strb	r3, [r7, #22]
					option = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	757b      	strb	r3, [r7, #21]

					writeLineByLine("", "Msg sent!", "(Perharps)", "");
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <main+0x50c>)
 8000e38:	4a39      	ldr	r2, [pc, #228]	; (8000f20 <main+0x548>)
 8000e3a:	493a      	ldr	r1, [pc, #232]	; (8000f24 <main+0x54c>)
 8000e3c:	4829      	ldr	r0, [pc, #164]	; (8000ee4 <main+0x50c>)
 8000e3e:	f7ff fc9b 	bl	8000778 <writeLineByLine>
					HAL_Delay(1000);
 8000e42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e46:	f001 f8c1 	bl	8001fcc <HAL_Delay>
					currentScreen = _MAIN;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	75bb      	strb	r3, [r7, #22]
 8000e4e:	e024      	b.n	8000e9a <main+0x4c2>
				}
			}
			else if(option == 1){
 8000e50:	7d7b      	ldrb	r3, [r7, #21]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d121      	bne.n	8000e9a <main+0x4c2>
				writeLineByLine("LED ON", "->LED OFF", "", "");
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <main+0x50c>)
 8000e58:	4a22      	ldr	r2, [pc, #136]	; (8000ee4 <main+0x50c>)
 8000e5a:	4933      	ldr	r1, [pc, #204]	; (8000f28 <main+0x550>)
 8000e5c:	482e      	ldr	r0, [pc, #184]	; (8000f18 <main+0x540>)
 8000e5e:	f7ff fc8b 	bl	8000778 <writeLineByLine>
				if(isButtonPressed(_LEFT_BUTTON)){
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fce8 	bl	8000838 <isButtonPressed>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d015      	beq.n	8000e9a <main+0x4c2>
					sprintf(buffer, "LED OFF");
 8000e6e:	4928      	ldr	r1, [pc, #160]	; (8000f10 <main+0x538>)
 8000e70:	482a      	ldr	r0, [pc, #168]	; (8000f1c <main+0x544>)
 8000e72:	f003 f879 	bl	8003f68 <siprintf>
					sendMsg = true;
 8000e76:	2301      	movs	r3, #1
 8000e78:	753b      	strb	r3, [r7, #20]
					currentScreen = _MAIN;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	75bb      	strb	r3, [r7, #22]
					option = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	757b      	strb	r3, [r7, #21]

					writeLineByLine("", "Msg sent!", "(Perharps)", "");
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <main+0x50c>)
 8000e84:	4a26      	ldr	r2, [pc, #152]	; (8000f20 <main+0x548>)
 8000e86:	4927      	ldr	r1, [pc, #156]	; (8000f24 <main+0x54c>)
 8000e88:	4816      	ldr	r0, [pc, #88]	; (8000ee4 <main+0x50c>)
 8000e8a:	f7ff fc75 	bl	8000778 <writeLineByLine>
					HAL_Delay(1000);
 8000e8e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e92:	f001 f89b 	bl	8001fcc <HAL_Delay>
					currentScreen = _MAIN;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75bb      	strb	r3, [r7, #22]
				}
			}

			if(isButtonPressed(_RIGHT_BUTTON)){
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff fccc 	bl	8000838 <isButtonPressed>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d01b      	beq.n	8000ede <main+0x506>
				option = (option + 1)%2;
 8000ea6:	7d7b      	ldrb	r3, [r7, #21]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	bfb8      	it	lt
 8000eb2:	425b      	neglt	r3, r3
 8000eb4:	757b      	strb	r3, [r7, #21]
			}
			break;
 8000eb6:	e012      	b.n	8000ede <main+0x506>

		case _OPTIONS:
			writeLineByLine("Nothing is", "written here", "yet :)", "");
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <main+0x50c>)
 8000eba:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <main+0x554>)
 8000ebc:	491c      	ldr	r1, [pc, #112]	; (8000f30 <main+0x558>)
 8000ebe:	481d      	ldr	r0, [pc, #116]	; (8000f34 <main+0x55c>)
 8000ec0:	f7ff fc5a 	bl	8000778 <writeLineByLine>
			HAL_Delay(1000);
 8000ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec8:	f001 f880 	bl	8001fcc <HAL_Delay>
			currentScreen = _MAIN;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	75bb      	strb	r3, [r7, #22]
			break;
 8000ed0:	e006      	b.n	8000ee0 <main+0x508>
			break;
 8000ed2:	bf00      	nop
 8000ed4:	e60e      	b.n	8000af4 <main+0x11c>
			break;
 8000ed6:	bf00      	nop
 8000ed8:	e60c      	b.n	8000af4 <main+0x11c>
			break;
 8000eda:	bf00      	nop
 8000edc:	e60a      	b.n	8000af4 <main+0x11c>
			break;
 8000ede:	bf00      	nop
		currTime = HAL_GetTick();
 8000ee0:	e608      	b.n	8000af4 <main+0x11c>
 8000ee2:	bf00      	nop
 8000ee4:	0800488c 	.word	0x0800488c
 8000ee8:	0800489c 	.word	0x0800489c
 8000eec:	080048c0 	.word	0x080048c0
 8000ef0:	080048cc 	.word	0x080048cc
 8000ef4:	080048d8 	.word	0x080048d8
 8000ef8:	080048a4 	.word	0x080048a4
 8000efc:	55555556 	.word	0x55555556
 8000f00:	080048e4 	.word	0x080048e4
 8000f04:	080048f0 	.word	0x080048f0
 8000f08:	080048fc 	.word	0x080048fc
 8000f0c:	0800490c 	.word	0x0800490c
 8000f10:	08004884 	.word	0x08004884
 8000f14:	08004918 	.word	0x08004918
 8000f18:	0800487c 	.word	0x0800487c
 8000f1c:	2000021c 	.word	0x2000021c
 8000f20:	08004924 	.word	0x08004924
 8000f24:	08004930 	.word	0x08004930
 8000f28:	0800493c 	.word	0x0800493c
 8000f2c:	08004948 	.word	0x08004948
 8000f30:	08004950 	.word	0x08004950
 8000f34:	08004960 	.word	0x08004960

08000f38 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b090      	sub	sp, #64	; 0x40
 8000f3c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	2228      	movs	r2, #40	; 0x28
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f003 f806 	bl	8003f58 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	1d3b      	adds	r3, r7, #4
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f62:	2310      	movs	r3, #16
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f66:	2300      	movs	r3, #0
 8000f68:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 ff94 	bl	8002e9c <HAL_RCC_OscConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x46>
	{
		Error_Handler();
 8000f7a:	f000 f818 	bl	8000fae <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7e:	230f      	movs	r3, #15
 8000f80:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f002 fa02 	bl	80033a0 <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0x6e>
	{
		Error_Handler();
 8000fa2:	f000 f804 	bl	8000fae <Error_Handler>
	}
}
 8000fa6:	bf00      	nop
 8000fa8:	3740      	adds	r7, #64	; 0x40
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb2:	b672      	cpsid	i
}
 8000fb4:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <Error_Handler+0x8>

08000fb8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_SPI1_Init+0x64>)
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <MX_SPI1_Init+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_SPI1_Init+0x64>)
 8000fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_SPI1_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_SPI1_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_SPI1_Init+0x64>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SPI1_Init+0x64>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_SPI1_Init+0x64>)
 8000fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SPI1_Init+0x64>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_SPI1_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_SPI1_Init+0x64>)
 8001004:	220a      	movs	r2, #10
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_SPI1_Init+0x64>)
 800100a:	f002 fb43 	bl	8003694 <HAL_SPI_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001014:	f7ff ffcb 	bl	8000fae <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000424 	.word	0x20000424
 8001020:	40013000 	.word	0x40013000

08001024 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b088      	sub	sp, #32
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0310 	add.w	r3, r7, #16
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a1b      	ldr	r2, [pc, #108]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d12f      	bne.n	80010a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001044:	4b1a      	ldr	r3, [pc, #104]	; (80010b0 <HAL_SPI_MspInit+0x8c>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <HAL_SPI_MspInit+0x8c>)
 800104a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800104e:	6193      	str	r3, [r2, #24]
 8001050:	4b17      	ldr	r3, [pc, #92]	; (80010b0 <HAL_SPI_MspInit+0x8c>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <HAL_SPI_MspInit+0x8c>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	4a13      	ldr	r2, [pc, #76]	; (80010b0 <HAL_SPI_MspInit+0x8c>)
 8001062:	f043 0304 	orr.w	r3, r3, #4
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <HAL_SPI_MspInit+0x8c>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f003 0304 	and.w	r3, r3, #4
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001074:	23a0      	movs	r3, #160	; 0xa0
 8001076:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	4619      	mov	r1, r3
 8001086:	480b      	ldr	r0, [pc, #44]	; (80010b4 <HAL_SPI_MspInit+0x90>)
 8001088:	f001 f8a8 	bl	80021dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800108c:	2340      	movs	r3, #64	; 0x40
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001094:	2300      	movs	r3, #0
 8001096:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	4805      	ldr	r0, [pc, #20]	; (80010b4 <HAL_SPI_MspInit+0x90>)
 80010a0:	f001 f89c 	bl	80021dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010a4:	bf00      	nop
 80010a6:	3720      	adds	r7, #32
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40013000 	.word	0x40013000
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40010800 	.word	0x40010800

080010b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_MspInit+0x40>)
 80010c0:	699b      	ldr	r3, [r3, #24]
 80010c2:	4a0d      	ldr	r2, [pc, #52]	; (80010f8 <HAL_MspInit+0x40>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6193      	str	r3, [r2, #24]
 80010ca:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <HAL_MspInit+0x40>)
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <HAL_MspInit+0x40>)
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	4a07      	ldr	r2, [pc, #28]	; (80010f8 <HAL_MspInit+0x40>)
 80010dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e0:	61d3      	str	r3, [r2, #28]
 80010e2:	4b05      	ldr	r3, [pc, #20]	; (80010f8 <HAL_MspInit+0x40>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001142:	f000 ff27 	bl	8001f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001154:	4a14      	ldr	r2, [pc, #80]	; (80011a8 <_sbrk+0x5c>)
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <_sbrk+0x60>)
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <_sbrk+0x64>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d102      	bne.n	800116e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <_sbrk+0x64>)
 800116a:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <_sbrk+0x68>)
 800116c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	429a      	cmp	r2, r3
 800117a:	d207      	bcs.n	800118c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800117c:	f002 feb4 	bl	8003ee8 <__errno>
 8001180:	4603      	mov	r3, r0
 8001182:	220c      	movs	r2, #12
 8001184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	e009      	b.n	80011a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800118c:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001192:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	4a05      	ldr	r2, [pc, #20]	; (80011b0 <_sbrk+0x64>)
 800119c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119e:	68fb      	ldr	r3, [r7, #12]
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	20005000 	.word	0x20005000
 80011ac:	00000400 	.word	0x00000400
 80011b0:	2000047c 	.word	0x2000047c
 80011b4:	200008a0 	.word	0x200008a0

080011b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c4:	f7ff fff8 	bl	80011b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480b      	ldr	r0, [pc, #44]	; (80011f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ca:	490c      	ldr	r1, [pc, #48]	; (80011fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011e0:	4c09      	ldr	r4, [pc, #36]	; (8001208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f002 fe81 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011f2:	f7ff fbf1 	bl	80009d8 <main>
  bx lr
 80011f6:	4770      	bx	lr
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001200:	08005174 	.word	0x08005174
  ldr r2, =_sbss
 8001204:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001208:	2000089c 	.word	0x2000089c

0800120c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800120c:	e7fe      	b.n	800120c <ADC1_2_IRQHandler>

0800120e <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
 8001216:	460b      	mov	r3, r1
 8001218:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	78fa      	ldrb	r2, [r7, #3]
 8001220:	4611      	mov	r1, r2
 8001222:	4618      	mov	r0, r3
 8001224:	f000 fbd1 	bl	80019ca <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4618      	mov	r0, r3
 800122e:	f000 fbec 	bl	8001a0a <SX1278_hw_SPIReadByte>
 8001232:	4603      	mov	r3, r0
 8001234:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2101      	movs	r1, #1
 800123c:	4618      	mov	r0, r3
 800123e:	f000 fb89 	bl	8001954 <SX1278_hw_SetNSS>
	return tmp;
 8001242:	7bfb      	ldrb	r3, [r7, #15]
}
 8001244:	4618      	mov	r0, r3
 8001246:	3710      	adds	r7, #16
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	460b      	mov	r3, r1
 8001256:	70fb      	strb	r3, [r7, #3]
 8001258:	4613      	mov	r3, r2
 800125a:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f000 fb76 	bl	8001954 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001272:	b2db      	uxtb	r3, r3
 8001274:	4619      	mov	r1, r3
 8001276:	4610      	mov	r0, r2
 8001278:	f000 fba7 	bl	80019ca <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	78ba      	ldrb	r2, [r7, #2]
 8001282:	4611      	mov	r1, r2
 8001284:	4618      	mov	r0, r3
 8001286:	f000 fba0 	bl	80019ca <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2101      	movs	r1, #1
 8001290:	4618      	mov	r0, r3
 8001292:	f000 fb5f 	bl	8001954 <SX1278_hw_SetNSS>
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800129e:	b590      	push	{r4, r7, lr}
 80012a0:	b087      	sub	sp, #28
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	607a      	str	r2, [r7, #4]
 80012a8:	461a      	mov	r2, r3
 80012aa:	460b      	mov	r3, r1
 80012ac:	72fb      	strb	r3, [r7, #11]
 80012ae:	4613      	mov	r3, r2
 80012b0:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80012b2:	7abb      	ldrb	r3, [r7, #10]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d927      	bls.n	8001308 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fb48 	bl	8001954 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	7afa      	ldrb	r2, [r7, #11]
 80012ca:	4611      	mov	r1, r2
 80012cc:	4618      	mov	r0, r3
 80012ce:	f000 fb7c 	bl	80019ca <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	e00c      	b.n	80012f2 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6819      	ldr	r1, [r3, #0]
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	18d4      	adds	r4, r2, r3
 80012e2:	4608      	mov	r0, r1
 80012e4:	f000 fb91 	bl	8001a0a <SX1278_hw_SPIReadByte>
 80012e8:	4603      	mov	r3, r0
 80012ea:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80012ec:	7dfb      	ldrb	r3, [r7, #23]
 80012ee:	3301      	adds	r3, #1
 80012f0:	75fb      	strb	r3, [r7, #23]
 80012f2:	7dfa      	ldrb	r2, [r7, #23]
 80012f4:	7abb      	ldrb	r3, [r7, #10]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	d3ee      	bcc.n	80012d8 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2101      	movs	r1, #1
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fb27 	bl	8001954 <SX1278_hw_SetNSS>
 8001306:	e000      	b.n	800130a <SX1278_SPIBurstRead+0x6c>
		return;
 8001308:	bf00      	nop
	}
}
 800130a:	371c      	adds	r7, #28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd90      	pop	{r4, r7, pc}

08001310 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	461a      	mov	r2, r3
 800131c:	460b      	mov	r3, r1
 800131e:	72fb      	strb	r3, [r7, #11]
 8001320:	4613      	mov	r3, r2
 8001322:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8001324:	7abb      	ldrb	r3, [r7, #10]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d929      	bls.n	800137e <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f000 fb0f 	bl	8001954 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	7afb      	ldrb	r3, [r7, #11]
 800133c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f000 fb40 	bl	80019ca <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]
 800134e:	e00b      	b.n	8001368 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	6818      	ldr	r0, [r3, #0]
 8001354:	7dfb      	ldrb	r3, [r7, #23]
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f000 fb34 	bl	80019ca <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8001362:	7dfb      	ldrb	r3, [r7, #23]
 8001364:	3301      	adds	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
 8001368:	7dfa      	ldrb	r2, [r7, #23]
 800136a:	7abb      	ldrb	r3, [r7, #10]
 800136c:	429a      	cmp	r2, r3
 800136e:	d3ef      	bcc.n	8001350 <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2101      	movs	r1, #1
 8001376:	4618      	mov	r0, r3
 8001378:	f000 faec 	bl	8001954 <SX1278_hw_SetNSS>
 800137c:	e000      	b.n	8001380 <SX1278_SPIBurstWrite+0x70>
		return;
 800137e:	bf00      	nop
	}
}
 8001380:	3718      	adds	r7, #24
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
	...

08001388 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8001390:	6878      	ldr	r0, [r7, #4]
 8001392:	f000 f90d 	bl	80015b0 <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8001396:	200f      	movs	r0, #15
 8001398:	f000 fb5d 	bl	8001a56 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 f917 	bl	80015d0 <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80013a8:	f04f 0000 	mov.w	r0, #0
 80013ac:	f04f 0100 	mov.w	r1, #0
 80013b0:	04d9      	lsls	r1, r3, #19
 80013b2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80013b6:	04d0      	lsls	r0, r2, #19
 80013b8:	4a6f      	ldr	r2, [pc, #444]	; (8001578 <SX1278_config+0x1f0>)
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	f7fe fed1 	bl	8000164 <__aeabi_uldivmod>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 80013ca:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	f04f 0300 	mov.w	r3, #0
 80013d6:	0c02      	lsrs	r2, r0, #16
 80013d8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80013dc:	0c0b      	lsrs	r3, r1, #16
 80013de:	b2d3      	uxtb	r3, r2
 80013e0:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80013e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	0a02      	lsrs	r2, r0, #8
 80013f0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80013f4:	0a0b      	lsrs	r3, r1, #8
 80013f6:	b2d3      	uxtb	r3, r2
 80013f8:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80013fa:	7c3b      	ldrb	r3, [r7, #16]
 80013fc:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80013fe:	f107 020c 	add.w	r2, r7, #12
 8001402:	2303      	movs	r3, #3
 8001404:	2106      	movs	r1, #6
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff ff82 	bl	8001310 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 800140c:	2234      	movs	r2, #52	; 0x34
 800140e:	2139      	movs	r1, #57	; 0x39
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff ff1b 	bl	800124c <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7c1b      	ldrb	r3, [r3, #16]
 800141a:	461a      	mov	r2, r3
 800141c:	4b57      	ldr	r3, [pc, #348]	; (800157c <SX1278_config+0x1f4>)
 800141e:	5c9b      	ldrb	r3, [r3, r2]
 8001420:	461a      	mov	r2, r3
 8001422:	2109      	movs	r1, #9
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ff11 	bl	800124c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800142a:	220b      	movs	r2, #11
 800142c:	210b      	movs	r1, #11
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ff0c 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8001434:	2223      	movs	r2, #35	; 0x23
 8001436:	210c      	movs	r1, #12
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff07 	bl	800124c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7c5b      	ldrb	r3, [r3, #17]
 8001442:	461a      	mov	r2, r3
 8001444:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <SX1278_config+0x1f8>)
 8001446:	5c9b      	ldrb	r3, [r3, r2]
 8001448:	2b06      	cmp	r3, #6
 800144a:	d147      	bne.n	80014dc <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	7c9b      	ldrb	r3, [r3, #18]
 8001450:	461a      	mov	r2, r3
 8001452:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <SX1278_config+0x1fc>)
 8001454:	5c9b      	ldrb	r3, [r3, r2]
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7cdb      	ldrb	r3, [r3, #19]
 800145e:	4619      	mov	r1, r3
 8001460:	4b49      	ldr	r3, [pc, #292]	; (8001588 <SX1278_config+0x200>)
 8001462:	5c5b      	ldrb	r3, [r3, r1]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	b2db      	uxtb	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800146c:	3301      	adds	r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	211d      	movs	r1, #29
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fee9 	bl	800124c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	7c5b      	ldrb	r3, [r3, #17]
 800147e:	461a      	mov	r2, r3
 8001480:	4b3f      	ldr	r3, [pc, #252]	; (8001580 <SX1278_config+0x1f8>)
 8001482:	5c9b      	ldrb	r3, [r3, r2]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7d1b      	ldrb	r3, [r3, #20]
 800148c:	4619      	mov	r1, r3
 800148e:	4b3f      	ldr	r3, [pc, #252]	; (800158c <SX1278_config+0x204>)
 8001490:	5c5b      	ldrb	r3, [r3, r1]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4413      	add	r3, r2
 8001498:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800149a:	3303      	adds	r3, #3
 800149c:	b2db      	uxtb	r3, r3
 800149e:	461a      	mov	r2, r3
 80014a0:	211e      	movs	r1, #30
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff fed2 	bl	800124c <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 80014a8:	2131      	movs	r1, #49	; 0x31
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f7ff feaf 	bl	800120e <SX1278_SPIRead>
 80014b0:	4603      	mov	r3, r0
 80014b2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f023 0307 	bic.w	r3, r3, #7
 80014ba:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	f043 0305 	orr.w	r3, r3, #5
 80014c2:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
 80014c6:	461a      	mov	r2, r3
 80014c8:	2131      	movs	r1, #49	; 0x31
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff febe 	bl	800124c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 80014d0:	220c      	movs	r2, #12
 80014d2:	2137      	movs	r1, #55	; 0x37
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff feb9 	bl	800124c <SX1278_SPIWrite>
 80014da:	e029      	b.n	8001530 <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7c9b      	ldrb	r3, [r3, #18]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <SX1278_config+0x1fc>)
 80014e4:	5c9b      	ldrb	r3, [r3, r2]
 80014e6:	011b      	lsls	r3, r3, #4
 80014e8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	7cdb      	ldrb	r3, [r3, #19]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4b25      	ldr	r3, [pc, #148]	; (8001588 <SX1278_config+0x200>)
 80014f2:	5c5b      	ldrb	r3, [r3, r1]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80014f8:	4413      	add	r3, r2
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	461a      	mov	r2, r3
 80014fe:	211d      	movs	r1, #29
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff fea3 	bl	800124c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	7c5b      	ldrb	r3, [r3, #17]
 800150a:	461a      	mov	r2, r3
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <SX1278_config+0x1f8>)
 800150e:	5c9b      	ldrb	r3, [r3, r2]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7d1b      	ldrb	r3, [r3, #20]
 8001518:	4619      	mov	r1, r3
 800151a:	4b1c      	ldr	r3, [pc, #112]	; (800158c <SX1278_config+0x204>)
 800151c:	5c5b      	ldrb	r3, [r3, r1]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8001522:	4413      	add	r3, r2
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	211e      	movs	r1, #30
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff fe8e 	bl	800124c <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8001530:	2204      	movs	r2, #4
 8001532:	2126      	movs	r1, #38	; 0x26
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff fe89 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800153a:	2208      	movs	r2, #8
 800153c:	211f      	movs	r1, #31
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f7ff fe84 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8001544:	2200      	movs	r2, #0
 8001546:	2120      	movs	r1, #32
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f7ff fe7f 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800154e:	2208      	movs	r2, #8
 8001550:	2121      	movs	r1, #33	; 0x21
 8001552:	6878      	ldr	r0, [r7, #4]
 8001554:	f7ff fe7a 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8001558:	2201      	movs	r2, #1
 800155a:	2141      	movs	r1, #65	; 0x41
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f7ff fe75 	bl	800124c <SX1278_SPIWrite>
	module->readBytes = 0;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2200      	movs	r2, #0
 8001566:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1278_standby(module); //Entry standby mode
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f810 	bl	8001590 <SX1278_standby>
}
 8001570:	bf00      	nop
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	01e84800 	.word	0x01e84800
 800157c:	08004984 	.word	0x08004984
 8001580:	08004988 	.word	0x08004988
 8001584:	08004990 	.word	0x08004990
 8001588:	0800499c 	.word	0x0800499c
 800158c:	080049a0 	.word	0x080049a0

08001590 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8001598:	2209      	movs	r2, #9
 800159a:	2101      	movs	r1, #1
 800159c:	6878      	ldr	r0, [r7, #4]
 800159e:	f7ff fe55 	bl	800124c <SX1278_SPIWrite>
	module->status = STANDBY;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2201      	movs	r2, #1
 80015a6:	759a      	strb	r2, [r3, #22]
}
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 80015b8:	2208      	movs	r2, #8
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f7ff fe45 	bl	800124c <SX1278_SPIWrite>
	module->status = SLEEP;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	759a      	strb	r2, [r3, #22]
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80015d8:	2288      	movs	r2, #136	; 0x88
 80015da:	2101      	movs	r1, #1
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff fe35 	bl	800124c <SX1278_SPIWrite>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80015f2:	22ff      	movs	r2, #255	; 0xff
 80015f4:	2112      	movs	r1, #18
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff fe28 	bl	800124c <SX1278_SPIWrite>
}
 80015fc:	bf00      	nop
 80015fe:	3708      	adds	r7, #8
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	460b      	mov	r3, r1
 800160e:	607a      	str	r2, [r7, #4]
 8001610:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	7afa      	ldrb	r2, [r7, #11]
 8001616:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 8001618:	68f8      	ldr	r0, [r7, #12]
 800161a:	f7ff feb5 	bl	8001388 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800161e:	2284      	movs	r2, #132	; 0x84
 8001620:	214d      	movs	r1, #77	; 0x4d
 8001622:	68f8      	ldr	r0, [r7, #12]
 8001624:	f7ff fe12 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8001628:	22ff      	movs	r2, #255	; 0xff
 800162a:	2124      	movs	r1, #36	; 0x24
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f7ff fe0d 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8001632:	2201      	movs	r2, #1
 8001634:	2140      	movs	r1, #64	; 0x40
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fe08 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800163c:	223f      	movs	r2, #63	; 0x3f
 800163e:	2111      	movs	r1, #17
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f7ff fe03 	bl	800124c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f7ff ffcf 	bl	80015ea <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800164c:	7afb      	ldrb	r3, [r7, #11]
 800164e:	461a      	mov	r2, r3
 8001650:	2122      	movs	r1, #34	; 0x22
 8001652:	68f8      	ldr	r0, [r7, #12]
 8001654:	f7ff fdfa 	bl	800124c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8001658:	210f      	movs	r1, #15
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff fdd7 	bl	800120e <SX1278_SPIRead>
 8001660:	4603      	mov	r3, r0
 8001662:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8001664:	7dfb      	ldrb	r3, [r7, #23]
 8001666:	461a      	mov	r2, r3
 8001668:	210d      	movs	r1, #13
 800166a:	68f8      	ldr	r0, [r7, #12]
 800166c:	f7ff fdee 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8001670:	228d      	movs	r2, #141	; 0x8d
 8001672:	2101      	movs	r1, #1
 8001674:	68f8      	ldr	r0, [r7, #12]
 8001676:	f7ff fde9 	bl	800124c <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8001682:	2118      	movs	r1, #24
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7ff fdc2 	bl	800120e <SX1278_SPIRead>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b04      	cmp	r3, #4
 8001692:	d104      	bne.n	800169e <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2203      	movs	r2, #3
 8001698:	759a      	strb	r2, [r3, #22]
			return 1;
 800169a:	2301      	movs	r3, #1
 800169c:	e013      	b.n	80016c6 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f967 	bl	8001982 <SX1278_hw_Reset>
			SX1278_config(module);
 80016b4:	68f8      	ldr	r0, [r7, #12]
 80016b6:	f7ff fe67 	bl	8001388 <SX1278_config>
			return 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	e003      	b.n	80016c6 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 80016be:	2001      	movs	r0, #1
 80016c0:	f000 f9c9 	bl	8001a56 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80016c4:	e7dd      	b.n	8001682 <SX1278_LoRaEntryRx+0x7e>
	}
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f9c6 	bl	8001a6c <SX1278_hw_GetDIO0>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d030      	beq.n	8001748 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3317      	adds	r3, #23
 80016ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ee:	2100      	movs	r1, #0
 80016f0:	4618      	mov	r0, r3
 80016f2:	f002 fc31 	bl	8003f58 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80016f6:	2110      	movs	r1, #16
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	f7ff fd88 	bl	800120e <SX1278_SPIRead>
 80016fe:	4603      	mov	r3, r0
 8001700:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8001702:	7bbb      	ldrb	r3, [r7, #14]
 8001704:	461a      	mov	r2, r3
 8001706:	210d      	movs	r1, #13
 8001708:	6878      	ldr	r0, [r7, #4]
 800170a:	f7ff fd9f 	bl	800124c <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7c5b      	ldrb	r3, [r3, #17]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d103      	bne.n	800171e <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7d5b      	ldrb	r3, [r3, #21]
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e005      	b.n	800172a <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800171e:	2113      	movs	r1, #19
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f7ff fd74 	bl	800120e <SX1278_SPIRead>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f103 0217 	add.w	r2, r3, #23
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2100      	movs	r1, #0
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff fdb2 	bl	800129e <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1278_clearLoRaIrq(module);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f7ff ff51 	bl	80015ea <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800174e:	4618      	mov	r0, r3
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	460b      	mov	r3, r1
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	7afa      	ldrb	r2, [r7, #11]
 8001768:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f7ff fe0c 	bl	8001388 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 8001770:	2287      	movs	r2, #135	; 0x87
 8001772:	214d      	movs	r1, #77	; 0x4d
 8001774:	68f8      	ldr	r0, [r7, #12]
 8001776:	f7ff fd69 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 800177a:	2200      	movs	r2, #0
 800177c:	2124      	movs	r1, #36	; 0x24
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f7ff fd64 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8001784:	2241      	movs	r2, #65	; 0x41
 8001786:	2140      	movs	r1, #64	; 0x40
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f7ff fd5f 	bl	800124c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 800178e:	68f8      	ldr	r0, [r7, #12]
 8001790:	f7ff ff2b 	bl	80015ea <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8001794:	22f7      	movs	r2, #247	; 0xf7
 8001796:	2111      	movs	r1, #17
 8001798:	68f8      	ldr	r0, [r7, #12]
 800179a:	f7ff fd57 	bl	800124c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800179e:	7afb      	ldrb	r3, [r7, #11]
 80017a0:	461a      	mov	r2, r3
 80017a2:	2122      	movs	r1, #34	; 0x22
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f7ff fd51 	bl	800124c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80017aa:	210e      	movs	r1, #14
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fd2e 	bl	800120e <SX1278_SPIRead>
 80017b2:	4603      	mov	r3, r0
 80017b4:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	461a      	mov	r2, r3
 80017ba:	210d      	movs	r1, #13
 80017bc:	68f8      	ldr	r0, [r7, #12]
 80017be:	f7ff fd45 	bl	800124c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80017c2:	2122      	movs	r1, #34	; 0x22
 80017c4:	68f8      	ldr	r0, [r7, #12]
 80017c6:	f7ff fd22 	bl	800120e <SX1278_SPIRead>
 80017ca:	4603      	mov	r3, r0
 80017cc:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80017ce:	7dba      	ldrb	r2, [r7, #22]
 80017d0:	7afb      	ldrb	r3, [r7, #11]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d104      	bne.n	80017e0 <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	2202      	movs	r2, #2
 80017da:	759a      	strb	r2, [r3, #22]
			return 1;
 80017dc:	2301      	movs	r3, #1
 80017de:	e00e      	b.n	80017fe <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ea      	bne.n	80017c2 <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f8c6 	bl	8001982 <SX1278_hw_Reset>
			SX1278_config(module);
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fdc6 	bl	8001388 <SX1278_config>
			return 0;
 80017fc:	2300      	movs	r3, #0
		}
	}
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3718      	adds	r7, #24
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8001806:	b580      	push	{r7, lr}
 8001808:	b084      	sub	sp, #16
 800180a:	af00      	add	r7, sp, #0
 800180c:	60f8      	str	r0, [r7, #12]
 800180e:	60b9      	str	r1, [r7, #8]
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4613      	mov	r3, r2
 8001814:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	2100      	movs	r1, #0
 800181c:	68f8      	ldr	r0, [r7, #12]
 800181e:	f7ff fd77 	bl	8001310 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8001822:	228b      	movs	r2, #139	; 0x8b
 8001824:	2101      	movs	r1, #1
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f7ff fd10 	bl	800124c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f91b 	bl	8001a6c <SX1278_hw_GetDIO0>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d00b      	beq.n	8001854 <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800183c:	2112      	movs	r1, #18
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff fce5 	bl	800120e <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f7ff fed0 	bl	80015ea <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800184a:	68f8      	ldr	r0, [r7, #12]
 800184c:	f7ff fea0 	bl	8001590 <SX1278_standby>
			return 1;
 8001850:	2301      	movs	r3, #1
 8001852:	e013      	b.n	800187c <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	3b01      	subs	r3, #1
 8001858:	603b      	str	r3, [r7, #0]
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d109      	bne.n	8001874 <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4618      	mov	r0, r3
 8001866:	f000 f88c 	bl	8001982 <SX1278_hw_Reset>
			SX1278_config(module);
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff fd8c 	bl	8001388 <SX1278_config>
			return 0;
 8001870:	2300      	movs	r3, #0
 8001872:	e003      	b.n	800187c <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8001874:	2001      	movs	r0, #1
 8001876:	f000 f8ee 	bl	8001a56 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800187a:	e7d7      	b.n	800182c <SX1278_LoRaTxPacket+0x26>
	}
}
 800187c:	4618      	mov	r0, r3
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f000 f848 	bl	800192a <SX1278_hw_init>
	module->frequency = frequency;
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018a0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	7e3a      	ldrb	r2, [r7, #24]
 80018a8:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	7f3a      	ldrb	r2, [r7, #28]
 80018ae:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80018b6:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80018be:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80018c6:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80018ce:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f7ff fd59 	bl	8001388 <SX1278_config>
}
 80018d6:	bf00      	nop
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	4613      	mov	r3, r2
 80018ea:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80018f2:	79fa      	ldrb	r2, [r7, #7]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d003      	beq.n	8001900 <SX1278_read+0x22>
		length = module->readBytes;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 80018fe:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	3317      	adds	r3, #23
 8001904:	79fa      	ldrb	r2, [r7, #7]
 8001906:	4619      	mov	r1, r3
 8001908:	68b8      	ldr	r0, [r7, #8]
 800190a:	f002 fb17 	bl	8003f3c <memcpy>
	rxBuf[length] = '\0';
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	4413      	add	r3, r2
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8001920:	79fb      	ldrb	r3, [r7, #7]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 800192a:	b580      	push	{r7, lr}
 800192c:	b082      	sub	sp, #8
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8001932:	2101      	movs	r1, #1
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f000 f80d 	bl	8001954 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6858      	ldr	r0, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	2201      	movs	r2, #1
 8001946:	4619      	mov	r1, r3
 8001948:	f000 fde3 	bl	8002512 <HAL_GPIO_WritePin>
}
 800194c:	bf00      	nop
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6958      	ldr	r0, [r3, #20]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	b299      	uxth	r1, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	2b01      	cmp	r3, #1
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	f000 fdcc 	bl	8002512 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8001982:	b580      	push	{r7, lr}
 8001984:	b082      	sub	sp, #8
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 800198a:	2101      	movs	r1, #1
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe1 	bl	8001954 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6858      	ldr	r0, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	2200      	movs	r2, #0
 800199e:	4619      	mov	r1, r3
 80019a0:	f000 fdb7 	bl	8002512 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f000 f856 	bl	8001a56 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6858      	ldr	r0, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	2201      	movs	r2, #1
 80019b6:	4619      	mov	r1, r3
 80019b8:	f000 fdab 	bl	8002512 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 80019bc:	2064      	movs	r0, #100	; 0x64
 80019be:	f000 f84a 	bl	8001a56 <SX1278_hw_DelayMs>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 80019d6:	2100      	movs	r1, #0
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ffbb 	bl	8001954 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6998      	ldr	r0, [r3, #24]
 80019e2:	1cf9      	adds	r1, r7, #3
 80019e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e8:	2201      	movs	r2, #1
 80019ea:	f001 fed7 	bl	800379c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 80019ee:	bf00      	nop
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f002 f9c4 	bl	8003d82 <HAL_SPI_GetState>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b01      	cmp	r3, #1
 80019fe:	d1f7      	bne.n	80019f0 <SX1278_hw_SPICommand+0x26>
		;
}
 8001a00:	bf00      	nop
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b086      	sub	sp, #24
 8001a0e:	af02      	add	r7, sp, #8
 8001a10:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8001a16:	2300      	movs	r3, #0
 8001a18:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f7ff ff99 	bl	8001954 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6998      	ldr	r0, [r3, #24]
 8001a26:	f107 020e 	add.w	r2, r7, #14
 8001a2a:	f107 010f 	add.w	r1, r7, #15
 8001a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	2301      	movs	r3, #1
 8001a36:	f001 fff4 	bl	8003a22 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8001a3a:	bf00      	nop
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 f99e 	bl	8003d82 <HAL_SPI_GetState>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d1f7      	bne.n	8001a3c <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8001a4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 fab4 	bl	8001fcc <HAL_Delay>
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4610      	mov	r0, r2
 8001a82:	f000 fd2f 	bl	80024e4 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	bf0c      	ite	eq
 8001a8c:	2301      	moveq	r3, #1
 8001a8e:	2300      	movne	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
	...

08001aa8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af04      	add	r7, sp, #16
 8001aae:	4603      	mov	r3, r0
 8001ab0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	9302      	str	r3, [sp, #8]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	1dfb      	adds	r3, r7, #7
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <ssd1306_WriteCommand+0x2c>)
 8001ac8:	f000 fe80 	bl	80027cc <HAL_I2C_Mem_Write>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	2000008c 	.word	0x2000008c

08001ad8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af04      	add	r7, sp, #16
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aea:	9202      	str	r2, [sp, #8]
 8001aec:	9301      	str	r3, [sp, #4]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	9300      	str	r3, [sp, #0]
 8001af2:	2301      	movs	r3, #1
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	2178      	movs	r1, #120	; 0x78
 8001af8:	4803      	ldr	r0, [pc, #12]	; (8001b08 <ssd1306_WriteData+0x30>)
 8001afa:	f000 fe67 	bl	80027cc <HAL_I2C_Mem_Write>
}
 8001afe:	bf00      	nop
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	2000008c 	.word	0x2000008c

08001b0c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001b10:	f7ff ffc3 	bl	8001a9a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001b14:	2064      	movs	r0, #100	; 0x64
 8001b16:	f000 fa59 	bl	8001fcc <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f000 f9d6 	bl	8001ecc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001b20:	2020      	movs	r0, #32
 8001b22:	f7ff ffc1 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001b26:	2000      	movs	r0, #0
 8001b28:	f7ff ffbe 	bl	8001aa8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001b2c:	20b0      	movs	r0, #176	; 0xb0
 8001b2e:	f7ff ffbb 	bl	8001aa8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001b32:	20c8      	movs	r0, #200	; 0xc8
 8001b34:	f7ff ffb8 	bl	8001aa8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff ffb5 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001b3e:	2010      	movs	r0, #16
 8001b40:	f7ff ffb2 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001b44:	2040      	movs	r0, #64	; 0x40
 8001b46:	f7ff ffaf 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001b4a:	20ff      	movs	r0, #255	; 0xff
 8001b4c:	f000 f9aa 	bl	8001ea4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001b50:	20a1      	movs	r0, #161	; 0xa1
 8001b52:	f7ff ffa9 	bl	8001aa8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001b56:	20a6      	movs	r0, #166	; 0xa6
 8001b58:	f7ff ffa6 	bl	8001aa8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001b5c:	20a8      	movs	r0, #168	; 0xa8
 8001b5e:	f7ff ffa3 	bl	8001aa8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001b62:	203f      	movs	r0, #63	; 0x3f
 8001b64:	f7ff ffa0 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001b68:	20a4      	movs	r0, #164	; 0xa4
 8001b6a:	f7ff ff9d 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001b6e:	20d3      	movs	r0, #211	; 0xd3
 8001b70:	f7ff ff9a 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff ff97 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b7a:	20d5      	movs	r0, #213	; 0xd5
 8001b7c:	f7ff ff94 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001b80:	20f0      	movs	r0, #240	; 0xf0
 8001b82:	f7ff ff91 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001b86:	20d9      	movs	r0, #217	; 0xd9
 8001b88:	f7ff ff8e 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001b8c:	2022      	movs	r0, #34	; 0x22
 8001b8e:	f7ff ff8b 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001b92:	20da      	movs	r0, #218	; 0xda
 8001b94:	f7ff ff88 	bl	8001aa8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001b98:	2012      	movs	r0, #18
 8001b9a:	f7ff ff85 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001b9e:	20db      	movs	r0, #219	; 0xdb
 8001ba0:	f7ff ff82 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ba4:	2020      	movs	r0, #32
 8001ba6:	f7ff ff7f 	bl	8001aa8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001baa:	208d      	movs	r0, #141	; 0x8d
 8001bac:	f7ff ff7c 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001bb0:	2014      	movs	r0, #20
 8001bb2:	f7ff ff79 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	f000 f988 	bl	8001ecc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	f000 f80f 	bl	8001be0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001bc2:	f000 f825 	bl	8001c10 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001bc6:	4b05      	ldr	r3, [pc, #20]	; (8001bdc <ssd1306_Init+0xd0>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <ssd1306_Init+0xd0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001bd2:	4b02      	ldr	r3, [pc, #8]	; (8001bdc <ssd1306_Init+0xd0>)
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	711a      	strb	r2, [r3, #4]
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20000880 	.word	0x20000880

08001be0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001bea:	79fb      	ldrb	r3, [r7, #7]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d101      	bne.n	8001bf4 <ssd1306_Fill+0x14>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	e000      	b.n	8001bf6 <ssd1306_Fill+0x16>
 8001bf4:	23ff      	movs	r3, #255	; 0xff
 8001bf6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4803      	ldr	r0, [pc, #12]	; (8001c0c <ssd1306_Fill+0x2c>)
 8001bfe:	f002 f9ab 	bl	8003f58 <memset>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000480 	.word	0x20000480

08001c10 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c16:	2300      	movs	r3, #0
 8001c18:	71fb      	strb	r3, [r7, #7]
 8001c1a:	e016      	b.n	8001c4a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	3b50      	subs	r3, #80	; 0x50
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff40 	bl	8001aa8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001c28:	2000      	movs	r0, #0
 8001c2a:	f7ff ff3d 	bl	8001aa8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001c2e:	2010      	movs	r0, #16
 8001c30:	f7ff ff3a 	bl	8001aa8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001c34:	79fb      	ldrb	r3, [r7, #7]
 8001c36:	01db      	lsls	r3, r3, #7
 8001c38:	4a08      	ldr	r2, [pc, #32]	; (8001c5c <ssd1306_UpdateScreen+0x4c>)
 8001c3a:	4413      	add	r3, r2
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff4a 	bl	8001ad8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	3301      	adds	r3, #1
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b07      	cmp	r3, #7
 8001c4e:	d9e5      	bls.n	8001c1c <ssd1306_UpdateScreen+0xc>
    }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000480 	.word	0x20000480

08001c60 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	71bb      	strb	r3, [r7, #6]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	db3d      	blt.n	8001cf6 <ssd1306_DrawPixel+0x96>
 8001c7a:	79bb      	ldrb	r3, [r7, #6]
 8001c7c:	2b3f      	cmp	r3, #63	; 0x3f
 8001c7e:	d83a      	bhi.n	8001cf6 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001c80:	797b      	ldrb	r3, [r7, #5]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d11a      	bne.n	8001cbc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	79bb      	ldrb	r3, [r7, #6]
 8001c8a:	08db      	lsrs	r3, r3, #3
 8001c8c:	b2d8      	uxtb	r0, r3
 8001c8e:	4603      	mov	r3, r0
 8001c90:	01db      	lsls	r3, r3, #7
 8001c92:	4413      	add	r3, r2
 8001c94:	4a1a      	ldr	r2, [pc, #104]	; (8001d00 <ssd1306_DrawPixel+0xa0>)
 8001c96:	5cd3      	ldrb	r3, [r2, r3]
 8001c98:	b25a      	sxtb	r2, r3
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca6:	b25b      	sxtb	r3, r3
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	b259      	sxtb	r1, r3
 8001cac:	79fa      	ldrb	r2, [r7, #7]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	01db      	lsls	r3, r3, #7
 8001cb2:	4413      	add	r3, r2
 8001cb4:	b2c9      	uxtb	r1, r1
 8001cb6:	4a12      	ldr	r2, [pc, #72]	; (8001d00 <ssd1306_DrawPixel+0xa0>)
 8001cb8:	54d1      	strb	r1, [r2, r3]
 8001cba:	e01d      	b.n	8001cf8 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001cbc:	79fa      	ldrb	r2, [r7, #7]
 8001cbe:	79bb      	ldrb	r3, [r7, #6]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	b2d8      	uxtb	r0, r3
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	01db      	lsls	r3, r3, #7
 8001cc8:	4413      	add	r3, r2
 8001cca:	4a0d      	ldr	r2, [pc, #52]	; (8001d00 <ssd1306_DrawPixel+0xa0>)
 8001ccc:	5cd3      	ldrb	r3, [r2, r3]
 8001cce:	b25a      	sxtb	r2, r3
 8001cd0:	79bb      	ldrb	r3, [r7, #6]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	2101      	movs	r1, #1
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	b25b      	sxtb	r3, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	b25b      	sxtb	r3, r3
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b259      	sxtb	r1, r3
 8001ce6:	79fa      	ldrb	r2, [r7, #7]
 8001ce8:	4603      	mov	r3, r0
 8001cea:	01db      	lsls	r3, r3, #7
 8001cec:	4413      	add	r3, r2
 8001cee:	b2c9      	uxtb	r1, r1
 8001cf0:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <ssd1306_DrawPixel+0xa0>)
 8001cf2:	54d1      	strb	r1, [r2, r3]
 8001cf4:	e000      	b.n	8001cf8 <ssd1306_DrawPixel+0x98>
        return;
 8001cf6:	bf00      	nop
    }
}
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	20000480 	.word	0x20000480

08001d04 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001d04:	b590      	push	{r4, r7, lr}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	4638      	mov	r0, r7
 8001d0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001d12:	4623      	mov	r3, r4
 8001d14:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	2b1f      	cmp	r3, #31
 8001d1a:	d902      	bls.n	8001d22 <ssd1306_WriteChar+0x1e>
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	2b7e      	cmp	r3, #126	; 0x7e
 8001d20:	d901      	bls.n	8001d26 <ssd1306_WriteChar+0x22>
        return 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e079      	b.n	8001e1a <ssd1306_WriteChar+0x116>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001d26:	4b3f      	ldr	r3, [pc, #252]	; (8001e24 <ssd1306_WriteChar+0x120>)
 8001d28:	881b      	ldrh	r3, [r3, #0]
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	783b      	ldrb	r3, [r7, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	2b80      	cmp	r3, #128	; 0x80
 8001d32:	dc06      	bgt.n	8001d42 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8001d34:	4b3b      	ldr	r3, [pc, #236]	; (8001e24 <ssd1306_WriteChar+0x120>)
 8001d36:	885b      	ldrh	r3, [r3, #2]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	787b      	ldrb	r3, [r7, #1]
 8001d3c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8001d3e:	2b40      	cmp	r3, #64	; 0x40
 8001d40:	dd01      	ble.n	8001d46 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e069      	b.n	8001e1a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
 8001d4a:	e04e      	b.n	8001dea <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	3b20      	subs	r3, #32
 8001d52:	7879      	ldrb	r1, [r7, #1]
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	4619      	mov	r1, r3
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	440b      	add	r3, r1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	4413      	add	r3, r2
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	e036      	b.n	8001dda <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d013      	beq.n	8001da4 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001d7c:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <ssd1306_WriteChar+0x120>)
 8001d7e:	881b      	ldrh	r3, [r3, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4413      	add	r3, r2
 8001d88:	b2d8      	uxtb	r0, r3
 8001d8a:	4b26      	ldr	r3, [pc, #152]	; (8001e24 <ssd1306_WriteChar+0x120>)
 8001d8c:	885b      	ldrh	r3, [r3, #2]
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	b2db      	uxtb	r3, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7ff ff5f 	bl	8001c60 <ssd1306_DrawPixel>
 8001da2:	e017      	b.n	8001dd4 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001da4:	4b1f      	ldr	r3, [pc, #124]	; (8001e24 <ssd1306_WriteChar+0x120>)
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4413      	add	r3, r2
 8001db0:	b2d8      	uxtb	r0, r3
 8001db2:	4b1c      	ldr	r3, [pc, #112]	; (8001e24 <ssd1306_WriteChar+0x120>)
 8001db4:	885b      	ldrh	r3, [r3, #2]
 8001db6:	b2da      	uxtb	r2, r3
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	b2d9      	uxtb	r1, r3
 8001dc0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461a      	mov	r2, r3
 8001dd0:	f7ff ff46 	bl	8001c60 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	783b      	ldrb	r3, [r7, #0]
 8001ddc:	461a      	mov	r2, r3
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d3c3      	bcc.n	8001d6c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	3301      	adds	r3, #1
 8001de8:	61fb      	str	r3, [r7, #28]
 8001dea:	787b      	ldrb	r3, [r7, #1]
 8001dec:	461a      	mov	r2, r3
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d3ab      	bcc.n	8001d4c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8001df4:	4b0b      	ldr	r3, [pc, #44]	; (8001e24 <ssd1306_WriteChar+0x120>)
 8001df6:	881a      	ldrh	r2, [r3, #0]
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <ssd1306_WriteChar+0x108>
 8001dfe:	68b9      	ldr	r1, [r7, #8]
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	3b20      	subs	r3, #32
 8001e04:	440b      	add	r3, r1
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	e001      	b.n	8001e10 <ssd1306_WriteChar+0x10c>
 8001e0c:	783b      	ldrb	r3, [r7, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4413      	add	r3, r2
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	4b03      	ldr	r3, [pc, #12]	; (8001e24 <ssd1306_WriteChar+0x120>)
 8001e16:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3724      	adds	r7, #36	; 0x24
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd90      	pop	{r4, r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000880 	.word	0x20000880

08001e28 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	4638      	mov	r0, r7
 8001e32:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8001e36:	e013      	b.n	8001e60 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	7818      	ldrb	r0, [r3, #0]
 8001e3c:	7e3b      	ldrb	r3, [r7, #24]
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	463b      	mov	r3, r7
 8001e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e44:	f7ff ff5e 	bl	8001d04 <ssd1306_WriteChar>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d002      	beq.n	8001e5a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	e008      	b.n	8001e6c <ssd1306_WriteString+0x44>
        }
        str++;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d1e7      	bne.n	8001e38 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001e74:	b480      	push	{r7}
 8001e76:	b083      	sub	sp, #12
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	460a      	mov	r2, r1
 8001e7e:	71fb      	strb	r3, [r7, #7]
 8001e80:	4613      	mov	r3, r2
 8001e82:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <ssd1306_SetCursor+0x2c>)
 8001e8a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001e8c:	79bb      	ldrb	r3, [r7, #6]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <ssd1306_SetCursor+0x2c>)
 8001e92:	805a      	strh	r2, [r3, #2]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bc80      	pop	{r7}
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000880 	.word	0x20000880

08001ea4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001eae:	2381      	movs	r3, #129	; 0x81
 8001eb0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001eb2:	7bfb      	ldrb	r3, [r7, #15]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fdf7 	bl	8001aa8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fdf3 	bl	8001aa8 <ssd1306_WriteCommand>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001edc:	23af      	movs	r3, #175	; 0xaf
 8001ede:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001ee0:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <ssd1306_SetDisplayOn+0x38>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	715a      	strb	r2, [r3, #5]
 8001ee6:	e004      	b.n	8001ef2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001ee8:	23ae      	movs	r3, #174	; 0xae
 8001eea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001eec:	4b05      	ldr	r3, [pc, #20]	; (8001f04 <ssd1306_SetDisplayOn+0x38>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fdd7 	bl	8001aa8 <ssd1306_WriteCommand>
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000880 	.word	0x20000880

08001f08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_Init+0x28>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <HAL_Init+0x28>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f000 f92b 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f1e:	200f      	movs	r0, #15
 8001f20:	f000 f808 	bl	8001f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f24:	f7ff f8c8 	bl	80010b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	40022000 	.word	0x40022000

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f3c:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_InitTick+0x54>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_InitTick+0x58>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	4619      	mov	r1, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f935 	bl	80021c2 <HAL_SYSTICK_Config>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e00e      	b.n	8001f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b0f      	cmp	r3, #15
 8001f66:	d80a      	bhi.n	8001f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f68:	2200      	movs	r2, #0
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f70:	f000 f90b 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f74:	4a06      	ldr	r2, [pc, #24]	; (8001f90 <HAL_InitTick+0x5c>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e000      	b.n	8001f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	20000000 	.word	0x20000000
 8001f8c:	20000008 	.word	0x20000008
 8001f90:	20000004 	.word	0x20000004

08001f94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_IncTick+0x1c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_IncTick+0x20>)
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr
 8001fb0:	20000008 	.word	0x20000008
 8001fb4:	20000888 	.word	0x20000888

08001fb8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return uwTick;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	; (8001fc8 <HAL_GetTick+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000888 	.word	0x20000888

08001fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fd4:	f7ff fff0 	bl	8001fb8 <HAL_GetTick>
 8001fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe4:	d005      	beq.n	8001ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_Delay+0x44>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4413      	add	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ff2:	bf00      	nop
 8001ff4:	f7ff ffe0 	bl	8001fb8 <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	429a      	cmp	r2, r3
 8002002:	d8f7      	bhi.n	8001ff4 <HAL_Delay+0x28>
  {
  }
}
 8002004:	bf00      	nop
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008

08002014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002024:	4b0c      	ldr	r3, [pc, #48]	; (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800202a:	68ba      	ldr	r2, [r7, #8]
 800202c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002030:	4013      	ands	r3, r2
 8002032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800203c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002040:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002044:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002046:	4a04      	ldr	r2, [pc, #16]	; (8002058 <__NVIC_SetPriorityGrouping+0x44>)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	60d3      	str	r3, [r2, #12]
}
 800204c:	bf00      	nop
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <__NVIC_GetPriorityGrouping+0x18>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	0a1b      	lsrs	r3, r3, #8
 8002066:	f003 0307 	and.w	r3, r3, #7
}
 800206a:	4618      	mov	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bc80      	pop	{r7}
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	; (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	; (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	; 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff90 	bl	8002078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	; (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff49 	bl	8002014 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff5e 	bl	800205c <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ff90 	bl	80020cc <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5f 	bl	8002078 <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff ffb0 	bl	8002130 <SysTick_Config>
 80021d0:	4603      	mov	r3, r0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	3708      	adds	r7, #8
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
	...

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b08b      	sub	sp, #44	; 0x2c
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	e169      	b.n	80024c4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f0:	2201      	movs	r2, #1
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	4013      	ands	r3, r2
 8002202:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8158 	bne.w	80024be <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	4a9a      	ldr	r2, [pc, #616]	; (800247c <HAL_GPIO_Init+0x2a0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d05e      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002218:	4a98      	ldr	r2, [pc, #608]	; (800247c <HAL_GPIO_Init+0x2a0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d875      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800221e:	4a98      	ldr	r2, [pc, #608]	; (8002480 <HAL_GPIO_Init+0x2a4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d058      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002224:	4a96      	ldr	r2, [pc, #600]	; (8002480 <HAL_GPIO_Init+0x2a4>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d86f      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800222a:	4a96      	ldr	r2, [pc, #600]	; (8002484 <HAL_GPIO_Init+0x2a8>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d052      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002230:	4a94      	ldr	r2, [pc, #592]	; (8002484 <HAL_GPIO_Init+0x2a8>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d869      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002236:	4a94      	ldr	r2, [pc, #592]	; (8002488 <HAL_GPIO_Init+0x2ac>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d04c      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 800223c:	4a92      	ldr	r2, [pc, #584]	; (8002488 <HAL_GPIO_Init+0x2ac>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d863      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002242:	4a92      	ldr	r2, [pc, #584]	; (800248c <HAL_GPIO_Init+0x2b0>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d046      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
 8002248:	4a90      	ldr	r2, [pc, #576]	; (800248c <HAL_GPIO_Init+0x2b0>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d85d      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 800224e:	2b12      	cmp	r3, #18
 8002250:	d82a      	bhi.n	80022a8 <HAL_GPIO_Init+0xcc>
 8002252:	2b12      	cmp	r3, #18
 8002254:	d859      	bhi.n	800230a <HAL_GPIO_Init+0x12e>
 8002256:	a201      	add	r2, pc, #4	; (adr r2, 800225c <HAL_GPIO_Init+0x80>)
 8002258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800225c:	080022d7 	.word	0x080022d7
 8002260:	080022b1 	.word	0x080022b1
 8002264:	080022c3 	.word	0x080022c3
 8002268:	08002305 	.word	0x08002305
 800226c:	0800230b 	.word	0x0800230b
 8002270:	0800230b 	.word	0x0800230b
 8002274:	0800230b 	.word	0x0800230b
 8002278:	0800230b 	.word	0x0800230b
 800227c:	0800230b 	.word	0x0800230b
 8002280:	0800230b 	.word	0x0800230b
 8002284:	0800230b 	.word	0x0800230b
 8002288:	0800230b 	.word	0x0800230b
 800228c:	0800230b 	.word	0x0800230b
 8002290:	0800230b 	.word	0x0800230b
 8002294:	0800230b 	.word	0x0800230b
 8002298:	0800230b 	.word	0x0800230b
 800229c:	0800230b 	.word	0x0800230b
 80022a0:	080022b9 	.word	0x080022b9
 80022a4:	080022cd 	.word	0x080022cd
 80022a8:	4a79      	ldr	r2, [pc, #484]	; (8002490 <HAL_GPIO_Init+0x2b4>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d013      	beq.n	80022d6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022ae:	e02c      	b.n	800230a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	623b      	str	r3, [r7, #32]
          break;
 80022b6:	e029      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	3304      	adds	r3, #4
 80022be:	623b      	str	r3, [r7, #32]
          break;
 80022c0:	e024      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	68db      	ldr	r3, [r3, #12]
 80022c6:	3308      	adds	r3, #8
 80022c8:	623b      	str	r3, [r7, #32]
          break;
 80022ca:	e01f      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	330c      	adds	r3, #12
 80022d2:	623b      	str	r3, [r7, #32]
          break;
 80022d4:	e01a      	b.n	800230c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d102      	bne.n	80022e4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022de:	2304      	movs	r3, #4
 80022e0:	623b      	str	r3, [r7, #32]
          break;
 80022e2:	e013      	b.n	800230c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022ec:	2308      	movs	r3, #8
 80022ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	611a      	str	r2, [r3, #16]
          break;
 80022f6:	e009      	b.n	800230c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f8:	2308      	movs	r3, #8
 80022fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69fa      	ldr	r2, [r7, #28]
 8002300:	615a      	str	r2, [r3, #20]
          break;
 8002302:	e003      	b.n	800230c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002304:	2300      	movs	r3, #0
 8002306:	623b      	str	r3, [r7, #32]
          break;
 8002308:	e000      	b.n	800230c <HAL_GPIO_Init+0x130>
          break;
 800230a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800230c:	69bb      	ldr	r3, [r7, #24]
 800230e:	2bff      	cmp	r3, #255	; 0xff
 8002310:	d801      	bhi.n	8002316 <HAL_GPIO_Init+0x13a>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	e001      	b.n	800231a <HAL_GPIO_Init+0x13e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3304      	adds	r3, #4
 800231a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	2bff      	cmp	r3, #255	; 0xff
 8002320:	d802      	bhi.n	8002328 <HAL_GPIO_Init+0x14c>
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	e002      	b.n	800232e <HAL_GPIO_Init+0x152>
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	3b08      	subs	r3, #8
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	210f      	movs	r1, #15
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	fa01 f303 	lsl.w	r3, r1, r3
 800233c:	43db      	mvns	r3, r3
 800233e:	401a      	ands	r2, r3
 8002340:	6a39      	ldr	r1, [r7, #32]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	431a      	orrs	r2, r3
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80b1 	beq.w	80024be <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800235c:	4b4d      	ldr	r3, [pc, #308]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	4a4c      	ldr	r2, [pc, #304]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6193      	str	r3, [r2, #24]
 8002368:	4b4a      	ldr	r3, [pc, #296]	; (8002494 <HAL_GPIO_Init+0x2b8>)
 800236a:	699b      	ldr	r3, [r3, #24]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	60bb      	str	r3, [r7, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002374:	4a48      	ldr	r2, [pc, #288]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 8002376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002378:	089b      	lsrs	r3, r3, #2
 800237a:	3302      	adds	r3, #2
 800237c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002380:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f003 0303 	and.w	r3, r3, #3
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	220f      	movs	r2, #15
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4013      	ands	r3, r2
 8002396:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a40      	ldr	r2, [pc, #256]	; (800249c <HAL_GPIO_Init+0x2c0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <HAL_GPIO_Init+0x1ec>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a3f      	ldr	r2, [pc, #252]	; (80024a0 <HAL_GPIO_Init+0x2c4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00d      	beq.n	80023c4 <HAL_GPIO_Init+0x1e8>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a3e      	ldr	r2, [pc, #248]	; (80024a4 <HAL_GPIO_Init+0x2c8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <HAL_GPIO_Init+0x1e4>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a3d      	ldr	r2, [pc, #244]	; (80024a8 <HAL_GPIO_Init+0x2cc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_GPIO_Init+0x1e0>
 80023b8:	2303      	movs	r3, #3
 80023ba:	e006      	b.n	80023ca <HAL_GPIO_Init+0x1ee>
 80023bc:	2304      	movs	r3, #4
 80023be:	e004      	b.n	80023ca <HAL_GPIO_Init+0x1ee>
 80023c0:	2302      	movs	r3, #2
 80023c2:	e002      	b.n	80023ca <HAL_GPIO_Init+0x1ee>
 80023c4:	2301      	movs	r3, #1
 80023c6:	e000      	b.n	80023ca <HAL_GPIO_Init+0x1ee>
 80023c8:	2300      	movs	r3, #0
 80023ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023cc:	f002 0203 	and.w	r2, r2, #3
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	4093      	lsls	r3, r2
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023da:	492f      	ldr	r1, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x2bc>)
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f4:	4b2d      	ldr	r3, [pc, #180]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	492c      	ldr	r1, [pc, #176]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002402:	4b2a      	ldr	r3, [pc, #168]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	43db      	mvns	r3, r3
 800240a:	4928      	ldr	r1, [pc, #160]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800240c:	4013      	ands	r3, r2
 800240e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002418:	2b00      	cmp	r3, #0
 800241a:	d006      	beq.n	800242a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800241c:	4b23      	ldr	r3, [pc, #140]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4922      	ldr	r1, [pc, #136]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	4313      	orrs	r3, r2
 8002426:	60cb      	str	r3, [r1, #12]
 8002428:	e006      	b.n	8002438 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	43db      	mvns	r3, r3
 8002432:	491e      	ldr	r1, [pc, #120]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002434:	4013      	ands	r3, r2
 8002436:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002444:	4b19      	ldr	r3, [pc, #100]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002446:	685a      	ldr	r2, [r3, #4]
 8002448:	4918      	ldr	r1, [pc, #96]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	4914      	ldr	r1, [pc, #80]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800245c:	4013      	ands	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d021      	beq.n	80024b0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800246c:	4b0f      	ldr	r3, [pc, #60]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	490e      	ldr	r1, [pc, #56]	; (80024ac <HAL_GPIO_Init+0x2d0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	600b      	str	r3, [r1, #0]
 8002478:	e021      	b.n	80024be <HAL_GPIO_Init+0x2e2>
 800247a:	bf00      	nop
 800247c:	10320000 	.word	0x10320000
 8002480:	10310000 	.word	0x10310000
 8002484:	10220000 	.word	0x10220000
 8002488:	10210000 	.word	0x10210000
 800248c:	10120000 	.word	0x10120000
 8002490:	10110000 	.word	0x10110000
 8002494:	40021000 	.word	0x40021000
 8002498:	40010000 	.word	0x40010000
 800249c:	40010800 	.word	0x40010800
 80024a0:	40010c00 	.word	0x40010c00
 80024a4:	40011000 	.word	0x40011000
 80024a8:	40011400 	.word	0x40011400
 80024ac:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_GPIO_Init+0x304>)
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	4909      	ldr	r1, [pc, #36]	; (80024e0 <HAL_GPIO_Init+0x304>)
 80024ba:	4013      	ands	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	3301      	adds	r3, #1
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	fa22 f303 	lsr.w	r3, r2, r3
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f47f ae8e 	bne.w	80021f0 <HAL_GPIO_Init+0x14>
  }
}
 80024d4:	bf00      	nop
 80024d6:	bf00      	nop
 80024d8:	372c      	adds	r7, #44	; 0x2c
 80024da:	46bd      	mov	sp, r7
 80024dc:	bc80      	pop	{r7}
 80024de:	4770      	bx	lr
 80024e0:	40010400 	.word	0x40010400

080024e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689a      	ldr	r2, [r3, #8]
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e001      	b.n	8002506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]
 800251e:	4613      	mov	r3, r2
 8002520:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002522:	787b      	ldrb	r3, [r7, #1]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002528:	887a      	ldrh	r2, [r7, #2]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800252e:	e003      	b.n	8002538 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	041a      	lsls	r2, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	611a      	str	r2, [r3, #16]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	bc80      	pop	{r7}
 8002540:	4770      	bx	lr
	...

08002544 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e12b      	b.n	80027ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800255c:	b2db      	uxtb	r3, r3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d106      	bne.n	8002570 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7fe f840 	bl	80005f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2224      	movs	r2, #36	; 0x24
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0201 	bic.w	r2, r2, #1
 8002586:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002596:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025a8:	f001 f842 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 80025ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a81      	ldr	r2, [pc, #516]	; (80027b8 <HAL_I2C_Init+0x274>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d807      	bhi.n	80025c8 <HAL_I2C_Init+0x84>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4a80      	ldr	r2, [pc, #512]	; (80027bc <HAL_I2C_Init+0x278>)
 80025bc:	4293      	cmp	r3, r2
 80025be:	bf94      	ite	ls
 80025c0:	2301      	movls	r3, #1
 80025c2:	2300      	movhi	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	e006      	b.n	80025d6 <HAL_I2C_Init+0x92>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4a7d      	ldr	r2, [pc, #500]	; (80027c0 <HAL_I2C_Init+0x27c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	bf94      	ite	ls
 80025d0:	2301      	movls	r3, #1
 80025d2:	2300      	movhi	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e0e7      	b.n	80027ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	4a78      	ldr	r2, [pc, #480]	; (80027c4 <HAL_I2C_Init+0x280>)
 80025e2:	fba2 2303 	umull	r2, r3, r2, r3
 80025e6:	0c9b      	lsrs	r3, r3, #18
 80025e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68ba      	ldr	r2, [r7, #8]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a6a      	ldr	r2, [pc, #424]	; (80027b8 <HAL_I2C_Init+0x274>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d802      	bhi.n	8002618 <HAL_I2C_Init+0xd4>
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3301      	adds	r3, #1
 8002616:	e009      	b.n	800262c <HAL_I2C_Init+0xe8>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800261e:	fb02 f303 	mul.w	r3, r2, r3
 8002622:	4a69      	ldr	r2, [pc, #420]	; (80027c8 <HAL_I2C_Init+0x284>)
 8002624:	fba2 2303 	umull	r2, r3, r2, r3
 8002628:	099b      	lsrs	r3, r3, #6
 800262a:	3301      	adds	r3, #1
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	430b      	orrs	r3, r1
 8002632:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800263e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	495c      	ldr	r1, [pc, #368]	; (80027b8 <HAL_I2C_Init+0x274>)
 8002648:	428b      	cmp	r3, r1
 800264a:	d819      	bhi.n	8002680 <HAL_I2C_Init+0x13c>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e59      	subs	r1, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	fbb1 f3f3 	udiv	r3, r1, r3
 800265a:	1c59      	adds	r1, r3, #1
 800265c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002660:	400b      	ands	r3, r1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00a      	beq.n	800267c <HAL_I2C_Init+0x138>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	1e59      	subs	r1, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	005b      	lsls	r3, r3, #1
 8002670:	fbb1 f3f3 	udiv	r3, r1, r3
 8002674:	3301      	adds	r3, #1
 8002676:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267a:	e051      	b.n	8002720 <HAL_I2C_Init+0x1dc>
 800267c:	2304      	movs	r3, #4
 800267e:	e04f      	b.n	8002720 <HAL_I2C_Init+0x1dc>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d111      	bne.n	80026ac <HAL_I2C_Init+0x168>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1e58      	subs	r0, r3, #1
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6859      	ldr	r1, [r3, #4]
 8002690:	460b      	mov	r3, r1
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	440b      	add	r3, r1
 8002696:	fbb0 f3f3 	udiv	r3, r0, r3
 800269a:	3301      	adds	r3, #1
 800269c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	bf0c      	ite	eq
 80026a4:	2301      	moveq	r3, #1
 80026a6:	2300      	movne	r3, #0
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	e012      	b.n	80026d2 <HAL_I2C_Init+0x18e>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	1e58      	subs	r0, r3, #1
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	460b      	mov	r3, r1
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	0099      	lsls	r1, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	fbb0 f3f3 	udiv	r3, r0, r3
 80026c2:	3301      	adds	r3, #1
 80026c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	bf0c      	ite	eq
 80026cc:	2301      	moveq	r3, #1
 80026ce:	2300      	movne	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_I2C_Init+0x196>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e022      	b.n	8002720 <HAL_I2C_Init+0x1dc>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10e      	bne.n	8002700 <HAL_I2C_Init+0x1bc>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	1e58      	subs	r0, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	440b      	add	r3, r1
 80026f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f4:	3301      	adds	r3, #1
 80026f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026fe:	e00f      	b.n	8002720 <HAL_I2C_Init+0x1dc>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	1e58      	subs	r0, r3, #1
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6859      	ldr	r1, [r3, #4]
 8002708:	460b      	mov	r3, r1
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	0099      	lsls	r1, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	fbb0 f3f3 	udiv	r3, r0, r3
 8002716:	3301      	adds	r3, #1
 8002718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800271c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	6809      	ldr	r1, [r1, #0]
 8002724:	4313      	orrs	r3, r2
 8002726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800274e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	6911      	ldr	r1, [r2, #16]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68d2      	ldr	r2, [r2, #12]
 800275a:	4311      	orrs	r1, r2
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	430b      	orrs	r3, r1
 8002762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	431a      	orrs	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	430a      	orrs	r2, r1
 800277e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0201 	orr.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3710      	adds	r7, #16
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	000186a0 	.word	0x000186a0
 80027bc:	001e847f 	.word	0x001e847f
 80027c0:	003d08ff 	.word	0x003d08ff
 80027c4:	431bde83 	.word	0x431bde83
 80027c8:	10624dd3 	.word	0x10624dd3

080027cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	4608      	mov	r0, r1
 80027d6:	4611      	mov	r1, r2
 80027d8:	461a      	mov	r2, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	817b      	strh	r3, [r7, #10]
 80027de:	460b      	mov	r3, r1
 80027e0:	813b      	strh	r3, [r7, #8]
 80027e2:	4613      	mov	r3, r2
 80027e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027e6:	f7ff fbe7 	bl	8001fb8 <HAL_GetTick>
 80027ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b20      	cmp	r3, #32
 80027f6:	f040 80d9 	bne.w	80029ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	2319      	movs	r3, #25
 8002800:	2201      	movs	r2, #1
 8002802:	496d      	ldr	r1, [pc, #436]	; (80029b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f971 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 800280a:	4603      	mov	r3, r0
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002810:	2302      	movs	r3, #2
 8002812:	e0cc      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800281a:	2b01      	cmp	r3, #1
 800281c:	d101      	bne.n	8002822 <HAL_I2C_Mem_Write+0x56>
 800281e:	2302      	movs	r3, #2
 8002820:	e0c5      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2201      	movs	r2, #1
 8002826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d007      	beq.n	8002848 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002856:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2221      	movs	r2, #33	; 0x21
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2240      	movs	r2, #64	; 0x40
 8002864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a3a      	ldr	r2, [r7, #32]
 8002872:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002878:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_I2C_Mem_Write+0x1f0>)
 8002888:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800288a:	88f8      	ldrh	r0, [r7, #6]
 800288c:	893a      	ldrh	r2, [r7, #8]
 800288e:	8979      	ldrh	r1, [r7, #10]
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	9301      	str	r3, [sp, #4]
 8002894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	4603      	mov	r3, r0
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f890 	bl	80029c0 <I2C_RequestMemoryWrite>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d052      	beq.n	800294c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e081      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fa36 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	781a      	ldrb	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f0:	3b01      	subs	r3, #1
 80028f2:	b29a      	uxth	r2, r3
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b04      	cmp	r3, #4
 8002912:	d11b      	bne.n	800294c <HAL_I2C_Mem_Write+0x180>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002918:	2b00      	cmp	r3, #0
 800291a:	d017      	beq.n	800294c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	781a      	ldrb	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002936:	3b01      	subs	r3, #1
 8002938:	b29a      	uxth	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002942:	b29b      	uxth	r3, r3
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b00      	cmp	r3, #0
 8002952:	d1aa      	bne.n	80028aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fa29 	bl	8002db0 <I2C_WaitOnBTFFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00d      	beq.n	8002980 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	2b04      	cmp	r3, #4
 800296a:	d107      	bne.n	800297c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800297a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e016      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2220      	movs	r2, #32
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80029a8:	2300      	movs	r3, #0
 80029aa:	e000      	b.n	80029ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80029ac:	2302      	movs	r3, #2
  }
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	00100002 	.word	0x00100002
 80029bc:	ffff0000 	.word	0xffff0000

080029c0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af02      	add	r7, sp, #8
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	4608      	mov	r0, r1
 80029ca:	4611      	mov	r1, r2
 80029cc:	461a      	mov	r2, r3
 80029ce:	4603      	mov	r3, r0
 80029d0:	817b      	strh	r3, [r7, #10]
 80029d2:	460b      	mov	r3, r1
 80029d4:	813b      	strh	r3, [r7, #8]
 80029d6:	4613      	mov	r3, r2
 80029d8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029e8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	6a3b      	ldr	r3, [r7, #32]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029f6:	68f8      	ldr	r0, [r7, #12]
 80029f8:	f000 f878 	bl	8002aec <I2C_WaitOnFlagUntilTimeout>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00d      	beq.n	8002a1e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a10:	d103      	bne.n	8002a1a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e05f      	b.n	8002ade <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	461a      	mov	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a2c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	492d      	ldr	r1, [pc, #180]	; (8002ae8 <I2C_RequestMemoryWrite+0x128>)
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f8d3 	bl	8002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e04c      	b.n	8002ade <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a44:	2300      	movs	r3, #0
 8002a46:	617b      	str	r3, [r7, #20]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	617b      	str	r3, [r7, #20]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5c:	6a39      	ldr	r1, [r7, #32]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f95e 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00d      	beq.n	8002a86 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d107      	bne.n	8002a82 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a80:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e02b      	b.n	8002ade <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a86:	88fb      	ldrh	r3, [r7, #6]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d105      	bne.n	8002a98 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a8c:	893b      	ldrh	r3, [r7, #8]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	611a      	str	r2, [r3, #16]
 8002a96:	e021      	b.n	8002adc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a98:	893b      	ldrh	r3, [r7, #8]
 8002a9a:	0a1b      	lsrs	r3, r3, #8
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa8:	6a39      	ldr	r1, [r7, #32]
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f000 f938 	bl	8002d20 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00d      	beq.n	8002ad2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d107      	bne.n	8002ace <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002acc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e005      	b.n	8002ade <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ad2:	893b      	ldrh	r3, [r7, #8]
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	00010002 	.word	0x00010002

08002aec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002afc:	e048      	b.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d044      	beq.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7ff fa57 	bl	8001fb8 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d139      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d10d      	bne.n	8002b42 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	43da      	mvns	r2, r3
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	4013      	ands	r3, r2
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	bf0c      	ite	eq
 8002b38:	2301      	moveq	r3, #1
 8002b3a:	2300      	movne	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
 8002b40:	e00c      	b.n	8002b5c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	43da      	mvns	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	bf0c      	ite	eq
 8002b54:	2301      	moveq	r3, #1
 8002b56:	2300      	movne	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e023      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	0c1b      	lsrs	r3, r3, #16
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d10d      	bne.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	43da      	mvns	r2, r3
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bf0c      	ite	eq
 8002bac:	2301      	moveq	r3, #1
 8002bae:	2300      	movne	r3, #0
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	e00c      	b.n	8002bd0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	43da      	mvns	r2, r3
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	b29b      	uxth	r3, r3
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	bf0c      	ite	eq
 8002bc8:	2301      	moveq	r3, #1
 8002bca:	2300      	movne	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	461a      	mov	r2, r3
 8002bd0:	79fb      	ldrb	r3, [r7, #7]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d093      	beq.n	8002afe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3710      	adds	r7, #16
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002bee:	e071      	b.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bfe:	d123      	bne.n	8002c48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2220      	movs	r2, #32
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0204 	orr.w	r2, r3, #4
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e067      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4e:	d041      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c50:	f7ff f9b2 	bl	8001fb8 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d136      	bne.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	0c1b      	lsrs	r3, r3, #16
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10c      	bne.n	8002c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	b29b      	uxth	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	bf14      	ite	ne
 8002c82:	2301      	movne	r3, #1
 8002c84:	2300      	moveq	r3, #0
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	e00b      	b.n	8002ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	43da      	mvns	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	4013      	ands	r3, r2
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d016      	beq.n	8002cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	f043 0220 	orr.w	r2, r3, #32
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e021      	b.n	8002d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0c1b      	lsrs	r3, r3, #16
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d10c      	bne.n	8002cf8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	695b      	ldr	r3, [r3, #20]
 8002ce4:	43da      	mvns	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	bf14      	ite	ne
 8002cf0:	2301      	movne	r3, #1
 8002cf2:	2300      	moveq	r3, #0
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	e00b      	b.n	8002d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4013      	ands	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bf14      	ite	ne
 8002d0a:	2301      	movne	r3, #1
 8002d0c:	2300      	moveq	r3, #0
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f47f af6d 	bne.w	8002bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}

08002d20 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	60f8      	str	r0, [r7, #12]
 8002d28:	60b9      	str	r1, [r7, #8]
 8002d2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d2c:	e034      	b.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d2e:	68f8      	ldr	r0, [r7, #12]
 8002d30:	f000 f886 	bl	8002e40 <I2C_IsAcknowledgeFailed>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e034      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d44:	d028      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7ff f937 	bl	8001fb8 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d11d      	bne.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d66:	2b80      	cmp	r3, #128	; 0x80
 8002d68:	d016      	beq.n	8002d98 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0220 	orr.w	r2, r3, #32
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e007      	b.n	8002da8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d1c3      	bne.n	8002d2e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002dbc:	e034      	b.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 f83e 	bl	8002e40 <I2C_IsAcknowledgeFailed>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e034      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d028      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd6:	f7ff f8ef 	bl	8001fb8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d11d      	bne.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	f003 0304 	and.w	r3, r3, #4
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d016      	beq.n	8002e28 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e14:	f043 0220 	orr.w	r2, r3, #32
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e007      	b.n	8002e38 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d1c3      	bne.n	8002dbe <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3710      	adds	r7, #16
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e56:	d11b      	bne.n	8002e90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2200      	movs	r2, #0
 8002e66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7c:	f043 0204 	orr.w	r2, r3, #4
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e272      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8087 	beq.w	8002fca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ebc:	4b92      	ldr	r3, [pc, #584]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	d00c      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ec8:	4b8f      	ldr	r3, [pc, #572]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d112      	bne.n	8002efa <HAL_RCC_OscConfig+0x5e>
 8002ed4:	4b8c      	ldr	r3, [pc, #560]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ee0:	d10b      	bne.n	8002efa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee2:	4b89      	ldr	r3, [pc, #548]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d06c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x12c>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d168      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e24c      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f02:	d106      	bne.n	8002f12 <HAL_RCC_OscConfig+0x76>
 8002f04:	4b80      	ldr	r3, [pc, #512]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a7f      	ldr	r2, [pc, #508]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	e02e      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0x98>
 8002f1a:	4b7b      	ldr	r3, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a7a      	ldr	r2, [pc, #488]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b78      	ldr	r3, [pc, #480]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a77      	ldr	r2, [pc, #476]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e01d      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f3c:	d10c      	bne.n	8002f58 <HAL_RCC_OscConfig+0xbc>
 8002f3e:	4b72      	ldr	r3, [pc, #456]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a71      	ldr	r2, [pc, #452]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f48:	6013      	str	r3, [r2, #0]
 8002f4a:	4b6f      	ldr	r3, [pc, #444]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a6e      	ldr	r2, [pc, #440]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	e00b      	b.n	8002f70 <HAL_RCC_OscConfig+0xd4>
 8002f58:	4b6b      	ldr	r3, [pc, #428]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a6a      	ldr	r2, [pc, #424]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	4b68      	ldr	r3, [pc, #416]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a67      	ldr	r2, [pc, #412]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7ff f81e 	bl	8001fb8 <HAL_GetTick>
 8002f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f7e:	e008      	b.n	8002f92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f80:	f7ff f81a 	bl	8001fb8 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	2b64      	cmp	r3, #100	; 0x64
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e200      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f92:	4b5d      	ldr	r3, [pc, #372]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f0      	beq.n	8002f80 <HAL_RCC_OscConfig+0xe4>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa0:	f7ff f80a 	bl	8001fb8 <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fa6:	e008      	b.n	8002fba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7ff f806 	bl	8001fb8 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	2b64      	cmp	r3, #100	; 0x64
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e1ec      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fba:	4b53      	ldr	r3, [pc, #332]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f0      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x10c>
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d063      	beq.n	800309e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fd6:	4b4c      	ldr	r3, [pc, #304]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 030c 	and.w	r3, r3, #12
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00b      	beq.n	8002ffa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fe2:	4b49      	ldr	r3, [pc, #292]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d11c      	bne.n	8003028 <HAL_RCC_OscConfig+0x18c>
 8002fee:	4b46      	ldr	r3, [pc, #280]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d116      	bne.n	8003028 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	4b43      	ldr	r3, [pc, #268]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d005      	beq.n	8003012 <HAL_RCC_OscConfig+0x176>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d001      	beq.n	8003012 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e1c0      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	00db      	lsls	r3, r3, #3
 8003020:	4939      	ldr	r1, [pc, #228]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003022:	4313      	orrs	r3, r2
 8003024:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003026:	e03a      	b.n	800309e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	691b      	ldr	r3, [r3, #16]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d020      	beq.n	8003072 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003030:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe ffbf 	bl	8001fb8 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303e:	f7fe ffbb 	bl	8001fb8 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e1a1      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003050:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	00db      	lsls	r3, r3, #3
 800306a:	4927      	ldr	r1, [pc, #156]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 800306c:	4313      	orrs	r3, r2
 800306e:	600b      	str	r3, [r1, #0]
 8003070:	e015      	b.n	800309e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003072:	4b26      	ldr	r3, [pc, #152]	; (800310c <HAL_RCC_OscConfig+0x270>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe ff9e 	bl	8001fb8 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003080:	f7fe ff9a 	bl	8001fb8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e180      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003092:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d03a      	beq.n	8003120 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d019      	beq.n	80030e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030b2:	4b17      	ldr	r3, [pc, #92]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7fe ff7e 	bl	8001fb8 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030be:	e008      	b.n	80030d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c0:	f7fe ff7a 	bl	8001fb8 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e160      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030d2:	4b0d      	ldr	r3, [pc, #52]	; (8003108 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d0f0      	beq.n	80030c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030de:	2001      	movs	r0, #1
 80030e0:	f000 faba 	bl	8003658 <RCC_Delay>
 80030e4:	e01c      	b.n	8003120 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <HAL_RCC_OscConfig+0x274>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ec:	f7fe ff64 	bl	8001fb8 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f2:	e00f      	b.n	8003114 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030f4:	f7fe ff60 	bl	8001fb8 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d908      	bls.n	8003114 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e146      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
 800310c:	42420000 	.word	0x42420000
 8003110:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003114:	4b92      	ldr	r3, [pc, #584]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e9      	bne.n	80030f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a6 	beq.w	800327a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800312e:	2300      	movs	r3, #0
 8003130:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003132:	4b8b      	ldr	r3, [pc, #556]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003134:	69db      	ldr	r3, [r3, #28]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10d      	bne.n	800315a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800313e:	4b88      	ldr	r3, [pc, #544]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	4a87      	ldr	r2, [pc, #540]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003148:	61d3      	str	r3, [r2, #28]
 800314a:	4b85      	ldr	r3, [pc, #532]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003152:	60bb      	str	r3, [r7, #8]
 8003154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003156:	2301      	movs	r3, #1
 8003158:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800315a:	4b82      	ldr	r3, [pc, #520]	; (8003364 <HAL_RCC_OscConfig+0x4c8>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003162:	2b00      	cmp	r3, #0
 8003164:	d118      	bne.n	8003198 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003166:	4b7f      	ldr	r3, [pc, #508]	; (8003364 <HAL_RCC_OscConfig+0x4c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a7e      	ldr	r2, [pc, #504]	; (8003364 <HAL_RCC_OscConfig+0x4c8>)
 800316c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003172:	f7fe ff21 	bl	8001fb8 <HAL_GetTick>
 8003176:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003178:	e008      	b.n	800318c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800317a:	f7fe ff1d 	bl	8001fb8 <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	; 0x64
 8003186:	d901      	bls.n	800318c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	e103      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800318c:	4b75      	ldr	r3, [pc, #468]	; (8003364 <HAL_RCC_OscConfig+0x4c8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003194:	2b00      	cmp	r3, #0
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d106      	bne.n	80031ae <HAL_RCC_OscConfig+0x312>
 80031a0:	4b6f      	ldr	r3, [pc, #444]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031a2:	6a1b      	ldr	r3, [r3, #32]
 80031a4:	4a6e      	ldr	r2, [pc, #440]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031a6:	f043 0301 	orr.w	r3, r3, #1
 80031aa:	6213      	str	r3, [r2, #32]
 80031ac:	e02d      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x334>
 80031b6:	4b6a      	ldr	r3, [pc, #424]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	6a1b      	ldr	r3, [r3, #32]
 80031ba:	4a69      	ldr	r2, [pc, #420]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031bc:	f023 0301 	bic.w	r3, r3, #1
 80031c0:	6213      	str	r3, [r2, #32]
 80031c2:	4b67      	ldr	r3, [pc, #412]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	4a66      	ldr	r2, [pc, #408]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f023 0304 	bic.w	r3, r3, #4
 80031cc:	6213      	str	r3, [r2, #32]
 80031ce:	e01c      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2b05      	cmp	r3, #5
 80031d6:	d10c      	bne.n	80031f2 <HAL_RCC_OscConfig+0x356>
 80031d8:	4b61      	ldr	r3, [pc, #388]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	4a60      	ldr	r2, [pc, #384]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031de:	f043 0304 	orr.w	r3, r3, #4
 80031e2:	6213      	str	r3, [r2, #32]
 80031e4:	4b5e      	ldr	r3, [pc, #376]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a5d      	ldr	r2, [pc, #372]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	e00b      	b.n	800320a <HAL_RCC_OscConfig+0x36e>
 80031f2:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	4a5a      	ldr	r2, [pc, #360]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80031f8:	f023 0301 	bic.w	r3, r3, #1
 80031fc:	6213      	str	r3, [r2, #32]
 80031fe:	4b58      	ldr	r3, [pc, #352]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003204:	f023 0304 	bic.w	r3, r3, #4
 8003208:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d015      	beq.n	800323e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fe fed1 	bl	8001fb8 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fe fecd 	bl	8001fb8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0b1      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003230:	4b4b      	ldr	r3, [pc, #300]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0ee      	beq.n	800321a <HAL_RCC_OscConfig+0x37e>
 800323c:	e014      	b.n	8003268 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800323e:	f7fe febb 	bl	8001fb8 <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003244:	e00a      	b.n	800325c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003246:	f7fe feb7 	bl	8001fb8 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	f241 3288 	movw	r2, #5000	; 0x1388
 8003254:	4293      	cmp	r3, r2
 8003256:	d901      	bls.n	800325c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e09b      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325c:	4b40      	ldr	r3, [pc, #256]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1ee      	bne.n	8003246 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d105      	bne.n	800327a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326e:	4b3c      	ldr	r3, [pc, #240]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	4a3b      	ldr	r2, [pc, #236]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003274:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003278:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8087 	beq.w	8003392 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003284:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b08      	cmp	r3, #8
 800328e:	d061      	beq.n	8003354 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	69db      	ldr	r3, [r3, #28]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d146      	bne.n	8003326 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003298:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_RCC_OscConfig+0x4cc>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329e:	f7fe fe8b 	bl	8001fb8 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032a6:	f7fe fe87 	bl	8001fb8 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e06d      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032b8:	4b29      	ldr	r3, [pc, #164]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f0      	bne.n	80032a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a1b      	ldr	r3, [r3, #32]
 80032c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032cc:	d108      	bne.n	80032e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032ce:	4b24      	ldr	r3, [pc, #144]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	4921      	ldr	r1, [pc, #132]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e0:	4b1f      	ldr	r3, [pc, #124]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a19      	ldr	r1, [r3, #32]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	430b      	orrs	r3, r1
 80032f2:	491b      	ldr	r1, [pc, #108]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_OscConfig+0x4cc>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032fe:	f7fe fe5b 	bl	8001fb8 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003306:	f7fe fe57 	bl	8001fb8 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e03d      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x46a>
 8003324:	e035      	b.n	8003392 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_RCC_OscConfig+0x4cc>)
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800332c:	f7fe fe44 	bl	8001fb8 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003332:	e008      	b.n	8003346 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003334:	f7fe fe40 	bl	8001fb8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	2b02      	cmp	r3, #2
 8003340:	d901      	bls.n	8003346 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003342:	2303      	movs	r3, #3
 8003344:	e026      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003346:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_OscConfig+0x4c4>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f0      	bne.n	8003334 <HAL_RCC_OscConfig+0x498>
 8003352:	e01e      	b.n	8003392 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e019      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
 8003360:	40021000 	.word	0x40021000
 8003364:	40007000 	.word	0x40007000
 8003368:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_OscConfig+0x500>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	429a      	cmp	r2, r3
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d001      	beq.n	8003392 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e000      	b.n	8003394 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000

080033a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0d0      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b6a      	ldr	r3, [pc, #424]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d910      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b67      	ldr	r3, [pc, #412]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 0207 	bic.w	r2, r3, #7
 80033ca:	4965      	ldr	r1, [pc, #404]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b63      	ldr	r3, [pc, #396]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b8      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	4a58      	ldr	r2, [pc, #352]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003406:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003414:	4b53      	ldr	r3, [pc, #332]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800341e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b50      	ldr	r3, [pc, #320]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	494d      	ldr	r1, [pc, #308]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800342e:	4313      	orrs	r3, r2
 8003430:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d040      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b47      	ldr	r3, [pc, #284]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d115      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e07f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d107      	bne.n	800346e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800345e:	4b41      	ldr	r3, [pc, #260]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d109      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e073      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800346e:	4b3d      	ldr	r3, [pc, #244]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e06b      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800347e:	4b39      	ldr	r3, [pc, #228]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f023 0203 	bic.w	r2, r3, #3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	4936      	ldr	r1, [pc, #216]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003490:	f7fe fd92 	bl	8001fb8 <HAL_GetTick>
 8003494:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003496:	e00a      	b.n	80034ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe fd8e 	bl	8001fb8 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e053      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034ae:	4b2d      	ldr	r3, [pc, #180]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 020c 	and.w	r2, r3, #12
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	429a      	cmp	r2, r3
 80034be:	d1eb      	bne.n	8003498 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d210      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034ce:	4b24      	ldr	r3, [pc, #144]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 0207 	bic.w	r2, r3, #7
 80034d6:	4922      	ldr	r1, [pc, #136]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	; (8003560 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e032      	b.n	8003556 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b19      	ldr	r3, [pc, #100]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4916      	ldr	r1, [pc, #88]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	4313      	orrs	r3, r2
 800350c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800351a:	4b12      	ldr	r3, [pc, #72]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490e      	ldr	r1, [pc, #56]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800352e:	f000 f821 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0b      	ldr	r3, [pc, #44]	; (8003564 <HAL_RCC_ClockConfig+0x1c4>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490a      	ldr	r1, [pc, #40]	; (8003568 <HAL_RCC_ClockConfig+0x1c8>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a09      	ldr	r2, [pc, #36]	; (800356c <HAL_RCC_ClockConfig+0x1cc>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800354a:	4b09      	ldr	r3, [pc, #36]	; (8003570 <HAL_RCC_ClockConfig+0x1d0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7fe fcf0 	bl	8001f34 <HAL_InitTick>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40022000 	.word	0x40022000
 8003564:	40021000 	.word	0x40021000
 8003568:	0800496c 	.word	0x0800496c
 800356c:	20000000 	.word	0x20000000
 8003570:	20000004 	.word	0x20000004

08003574 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	b087      	sub	sp, #28
 8003578:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
 8003586:	2300      	movs	r3, #0
 8003588:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800358a:	2300      	movs	r3, #0
 800358c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <HAL_RCC_GetSysClockFreq+0x94>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b04      	cmp	r3, #4
 800359c:	d002      	beq.n	80035a4 <HAL_RCC_GetSysClockFreq+0x30>
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d003      	beq.n	80035aa <HAL_RCC_GetSysClockFreq+0x36>
 80035a2:	e027      	b.n	80035f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035a4:	4b19      	ldr	r3, [pc, #100]	; (800360c <HAL_RCC_GetSysClockFreq+0x98>)
 80035a6:	613b      	str	r3, [r7, #16]
      break;
 80035a8:	e027      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	0c9b      	lsrs	r3, r3, #18
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	4a17      	ldr	r2, [pc, #92]	; (8003610 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035b4:	5cd3      	ldrb	r3, [r2, r3]
 80035b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d010      	beq.n	80035e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCC_GetSysClockFreq+0x94>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	0c5b      	lsrs	r3, r3, #17
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	4a11      	ldr	r2, [pc, #68]	; (8003614 <HAL_RCC_GetSysClockFreq+0xa0>)
 80035ce:	5cd3      	ldrb	r3, [r2, r3]
 80035d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a0d      	ldr	r2, [pc, #52]	; (800360c <HAL_RCC_GetSysClockFreq+0x98>)
 80035d6:	fb03 f202 	mul.w	r2, r3, r2
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e004      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a0c      	ldr	r2, [pc, #48]	; (8003618 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035e8:	fb02 f303 	mul.w	r3, r2, r3
 80035ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	613b      	str	r3, [r7, #16]
      break;
 80035f2:	e002      	b.n	80035fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035f4:	4b05      	ldr	r3, [pc, #20]	; (800360c <HAL_RCC_GetSysClockFreq+0x98>)
 80035f6:	613b      	str	r3, [r7, #16]
      break;
 80035f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fa:	693b      	ldr	r3, [r7, #16]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40021000 	.word	0x40021000
 800360c:	007a1200 	.word	0x007a1200
 8003610:	0800511c 	.word	0x0800511c
 8003614:	0800512c 	.word	0x0800512c
 8003618:	003d0900 	.word	0x003d0900

0800361c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b02      	ldr	r3, [pc, #8]	; (800362c <HAL_RCC_GetHCLKFreq+0x10>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr
 800362c:	20000000 	.word	0x20000000

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003634:	f7ff fff2 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	; (8003650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	0a1b      	lsrs	r3, r3, #8
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40021000 	.word	0x40021000
 8003654:	0800497c 	.word	0x0800497c

08003658 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003658:	b480      	push	{r7}
 800365a:	b085      	sub	sp, #20
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <RCC_Delay+0x34>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0a      	ldr	r2, [pc, #40]	; (8003690 <RCC_Delay+0x38>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0a5b      	lsrs	r3, r3, #9
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003674:	bf00      	nop
  }
  while (Delay --);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	1e5a      	subs	r2, r3, #1
 800367a:	60fa      	str	r2, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f9      	bne.n	8003674 <RCC_Delay+0x1c>
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	3714      	adds	r7, #20
 8003686:	46bd      	mov	sp, r7
 8003688:	bc80      	pop	{r7}
 800368a:	4770      	bx	lr
 800368c:	20000000 	.word	0x20000000
 8003690:	10624dd3 	.word	0x10624dd3

08003694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e076      	b.n	8003794 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d108      	bne.n	80036c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036b6:	d009      	beq.n	80036cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	61da      	str	r2, [r3, #28]
 80036be:	e005      	b.n	80036cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fd fc9c 	bl	8001024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2202      	movs	r2, #2
 80036f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003702:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800371e:	431a      	orrs	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	431a      	orrs	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a1b      	ldr	r3, [r3, #32]
 800374c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003750:	ea42 0103 	orr.w	r1, r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	0c1a      	lsrs	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f002 0204 	and.w	r2, r2, #4
 8003772:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	69da      	ldr	r2, [r3, #28]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003782:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3708      	adds	r7, #8
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	603b      	str	r3, [r7, #0]
 80037a8:	4613      	mov	r3, r2
 80037aa:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037ac:	2300      	movs	r3, #0
 80037ae:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_SPI_Transmit+0x22>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e12d      	b.n	8003a1a <HAL_SPI_Transmit+0x27e>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037c6:	f7fe fbf7 	bl	8001fb8 <HAL_GetTick>
 80037ca:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037cc:	88fb      	ldrh	r3, [r7, #6]
 80037ce:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d002      	beq.n	80037e2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
 80037de:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037e0:	e116      	b.n	8003a10 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d002      	beq.n	80037ee <HAL_SPI_Transmit+0x52>
 80037e8:	88fb      	ldrh	r3, [r7, #6]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d102      	bne.n	80037f4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037f2:	e10d      	b.n	8003a10 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2203      	movs	r2, #3
 80037f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2200      	movs	r2, #0
 8003800:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	88fa      	ldrh	r2, [r7, #6]
 8003812:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2200      	movs	r2, #0
 8003824:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800383a:	d10f      	bne.n	800385c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800384a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800385a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003866:	2b40      	cmp	r3, #64	; 0x40
 8003868:	d007      	beq.n	800387a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003878:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003882:	d14f      	bne.n	8003924 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_SPI_Transmit+0xf6>
 800388c:	8afb      	ldrh	r3, [r7, #22]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d142      	bne.n	8003918 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	1c9a      	adds	r2, r3, #2
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038b6:	e02f      	b.n	8003918 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d112      	bne.n	80038ec <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	1c9a      	adds	r2, r3, #2
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	86da      	strh	r2, [r3, #54]	; 0x36
 80038ea:	e015      	b.n	8003918 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038ec:	f7fe fb64 	bl	8001fb8 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	69bb      	ldr	r3, [r7, #24]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	683a      	ldr	r2, [r7, #0]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d803      	bhi.n	8003904 <HAL_SPI_Transmit+0x168>
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003902:	d102      	bne.n	800390a <HAL_SPI_Transmit+0x16e>
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d106      	bne.n	8003918 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003916:	e07b      	b.n	8003a10 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ca      	bne.n	80038b8 <HAL_SPI_Transmit+0x11c>
 8003922:	e050      	b.n	80039c6 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_SPI_Transmit+0x196>
 800392c:	8afb      	ldrh	r3, [r7, #22]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d144      	bne.n	80039bc <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	330c      	adds	r3, #12
 800393c:	7812      	ldrb	r2, [r2, #0]
 800393e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003958:	e030      	b.n	80039bc <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b02      	cmp	r3, #2
 8003966:	d113      	bne.n	8003990 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	330c      	adds	r3, #12
 8003972:	7812      	ldrb	r2, [r2, #0]
 8003974:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003984:	b29b      	uxth	r3, r3
 8003986:	3b01      	subs	r3, #1
 8003988:	b29a      	uxth	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	86da      	strh	r2, [r3, #54]	; 0x36
 800398e:	e015      	b.n	80039bc <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003990:	f7fe fb12 	bl	8001fb8 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d803      	bhi.n	80039a8 <HAL_SPI_Transmit+0x20c>
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a6:	d102      	bne.n	80039ae <HAL_SPI_Transmit+0x212>
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80039ba:	e029      	b.n	8003a10 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1c9      	bne.n	800395a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 fa6e 	bl	8003eac <SPI_EndRxTxTransaction>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10a      	bne.n	80039fa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d002      	beq.n	8003a08 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e003      	b.n	8003a10 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a18:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3720      	adds	r7, #32
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}

08003a22 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a22:	b580      	push	{r7, lr}
 8003a24:	b08c      	sub	sp, #48	; 0x30
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
 8003a2e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a30:	2301      	movs	r3, #1
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_SPI_TransmitReceive+0x26>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e198      	b.n	8003d7a <HAL_SPI_TransmitReceive+0x358>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a50:	f7fe fab2 	bl	8001fb8 <HAL_GetTick>
 8003a54:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a66:	887b      	ldrh	r3, [r7, #2]
 8003a68:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a6a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d00f      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x70>
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a78:	d107      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d103      	bne.n	8003a8a <HAL_SPI_TransmitReceive+0x68>
 8003a82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a86:	2b04      	cmp	r3, #4
 8003a88:	d003      	beq.n	8003a92 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a90:	e16d      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x82>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d002      	beq.n	8003aa4 <HAL_SPI_TransmitReceive+0x82>
 8003a9e:	887b      	ldrh	r3, [r7, #2]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d103      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003aaa:	e160      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	2b04      	cmp	r3, #4
 8003ab6:	d003      	beq.n	8003ac0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2205      	movs	r2, #5
 8003abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	887a      	ldrh	r2, [r7, #2]
 8003ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	887a      	ldrh	r2, [r7, #2]
 8003ad6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	887a      	ldrh	r2, [r7, #2]
 8003ae2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	887a      	ldrh	r2, [r7, #2]
 8003ae8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b00:	2b40      	cmp	r3, #64	; 0x40
 8003b02:	d007      	beq.n	8003b14 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1c:	d17c      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d002      	beq.n	8003b2c <HAL_SPI_TransmitReceive+0x10a>
 8003b26:	8b7b      	ldrh	r3, [r7, #26]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d16a      	bne.n	8003c02 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b30:	881a      	ldrh	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3c:	1c9a      	adds	r2, r3, #2
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b50:	e057      	b.n	8003c02 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d11b      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x176>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_SPI_TransmitReceive+0x176>
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d113      	bne.n	8003b98 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d119      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x1b8>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d014      	beq.n	8003bda <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bba:	b292      	uxth	r2, r2
 8003bbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	1c9a      	adds	r2, r3, #2
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bda:	f7fe f9ed 	bl	8001fb8 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d80b      	bhi.n	8003c02 <HAL_SPI_TransmitReceive+0x1e0>
 8003bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bf0:	d007      	beq.n	8003c02 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003c00:	e0b5      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1a2      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x130>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d19d      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x130>
 8003c16:	e080      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <HAL_SPI_TransmitReceive+0x204>
 8003c20:	8b7b      	ldrh	r3, [r7, #26]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d16f      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	330c      	adds	r3, #12
 8003c30:	7812      	ldrb	r2, [r2, #0]
 8003c32:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c4c:	e05b      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d11c      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x274>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d017      	beq.n	8003c96 <HAL_SPI_TransmitReceive+0x274>
 8003c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d114      	bne.n	8003c96 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	330c      	adds	r3, #12
 8003c76:	7812      	ldrb	r2, [r2, #0]
 8003c78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d119      	bne.n	8003cd8 <HAL_SPI_TransmitReceive+0x2b6>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d014      	beq.n	8003cd8 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68da      	ldr	r2, [r3, #12]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	3b01      	subs	r3, #1
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cd8:	f7fe f96e 	bl	8001fb8 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d803      	bhi.n	8003cf0 <HAL_SPI_TransmitReceive+0x2ce>
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cee:	d102      	bne.n	8003cf6 <HAL_SPI_TransmitReceive+0x2d4>
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d107      	bne.n	8003d06 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003d04:	e033      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d19e      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x22c>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d199      	bne.n	8003c4e <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d1e:	68f8      	ldr	r0, [r7, #12]
 8003d20:	f000 f8c4 	bl	8003eac <SPI_EndRxTxTransaction>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d006      	beq.n	8003d38 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d36:	e01a      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10a      	bne.n	8003d56 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d64:	e003      	b.n	8003d6e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3730      	adds	r7, #48	; 0x30
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}

08003d82 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d90:	b2db      	uxtb	r3, r3
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr

08003d9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003dac:	f7fe f904 	bl	8001fb8 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	4413      	add	r3, r2
 8003dba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003dbc:	f7fe f8fc 	bl	8001fb8 <HAL_GetTick>
 8003dc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003dc2:	4b39      	ldr	r3, [pc, #228]	; (8003ea8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	015b      	lsls	r3, r3, #5
 8003dc8:	0d1b      	lsrs	r3, r3, #20
 8003dca:	69fa      	ldr	r2, [r7, #28]
 8003dcc:	fb02 f303 	mul.w	r3, r2, r3
 8003dd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003dd2:	e054      	b.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dda:	d050      	beq.n	8003e7e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ddc:	f7fe f8ec 	bl	8001fb8 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	69fa      	ldr	r2, [r7, #28]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d902      	bls.n	8003df2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d13d      	bne.n	8003e6e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685a      	ldr	r2, [r3, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003e00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e0a:	d111      	bne.n	8003e30 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e14:	d004      	beq.n	8003e20 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1e:	d107      	bne.n	8003e30 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e2e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e38:	d10f      	bne.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e58:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e017      	b.n	8003e9e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d101      	bne.n	8003e78 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4013      	ands	r3, r2
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	bf0c      	ite	eq
 8003e8e:	2301      	moveq	r3, #1
 8003e90:	2300      	movne	r3, #0
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	79fb      	ldrb	r3, [r7, #7]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d19b      	bne.n	8003dd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	20000000 	.word	0x20000000

08003eac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	2180      	movs	r1, #128	; 0x80
 8003ec2:	68f8      	ldr	r0, [r7, #12]
 8003ec4:	f7ff ff6a 	bl	8003d9c <SPI_WaitFlagStateUntilTimeout>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d007      	beq.n	8003ede <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	f043 0220 	orr.w	r2, r3, #32
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e000      	b.n	8003ee0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003ede:	2300      	movs	r3, #0
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <__errno>:
 8003ee8:	4b01      	ldr	r3, [pc, #4]	; (8003ef0 <__errno+0x8>)
 8003eea:	6818      	ldr	r0, [r3, #0]
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	2000000c 	.word	0x2000000c

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	2600      	movs	r6, #0
 8003ef8:	4d0c      	ldr	r5, [pc, #48]	; (8003f2c <__libc_init_array+0x38>)
 8003efa:	4c0d      	ldr	r4, [pc, #52]	; (8003f30 <__libc_init_array+0x3c>)
 8003efc:	1b64      	subs	r4, r4, r5
 8003efe:	10a4      	asrs	r4, r4, #2
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	f000 fc9c 	bl	8004840 <_init>
 8003f08:	2600      	movs	r6, #0
 8003f0a:	4d0a      	ldr	r5, [pc, #40]	; (8003f34 <__libc_init_array+0x40>)
 8003f0c:	4c0a      	ldr	r4, [pc, #40]	; (8003f38 <__libc_init_array+0x44>)
 8003f0e:	1b64      	subs	r4, r4, r5
 8003f10:	10a4      	asrs	r4, r4, #2
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	0800516c 	.word	0x0800516c
 8003f30:	0800516c 	.word	0x0800516c
 8003f34:	0800516c 	.word	0x0800516c
 8003f38:	08005170 	.word	0x08005170

08003f3c <memcpy>:
 8003f3c:	440a      	add	r2, r1
 8003f3e:	4291      	cmp	r1, r2
 8003f40:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f44:	d100      	bne.n	8003f48 <memcpy+0xc>
 8003f46:	4770      	bx	lr
 8003f48:	b510      	push	{r4, lr}
 8003f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f4e:	4291      	cmp	r1, r2
 8003f50:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f54:	d1f9      	bne.n	8003f4a <memcpy+0xe>
 8003f56:	bd10      	pop	{r4, pc}

08003f58 <memset>:
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4402      	add	r2, r0
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d100      	bne.n	8003f62 <memset+0xa>
 8003f60:	4770      	bx	lr
 8003f62:	f803 1b01 	strb.w	r1, [r3], #1
 8003f66:	e7f9      	b.n	8003f5c <memset+0x4>

08003f68 <siprintf>:
 8003f68:	b40e      	push	{r1, r2, r3}
 8003f6a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f6e:	b500      	push	{lr}
 8003f70:	b09c      	sub	sp, #112	; 0x70
 8003f72:	ab1d      	add	r3, sp, #116	; 0x74
 8003f74:	9002      	str	r0, [sp, #8]
 8003f76:	9006      	str	r0, [sp, #24]
 8003f78:	9107      	str	r1, [sp, #28]
 8003f7a:	9104      	str	r1, [sp, #16]
 8003f7c:	4808      	ldr	r0, [pc, #32]	; (8003fa0 <siprintf+0x38>)
 8003f7e:	4909      	ldr	r1, [pc, #36]	; (8003fa4 <siprintf+0x3c>)
 8003f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f84:	9105      	str	r1, [sp, #20]
 8003f86:	6800      	ldr	r0, [r0, #0]
 8003f88:	a902      	add	r1, sp, #8
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	f000 f868 	bl	8004060 <_svfiprintf_r>
 8003f90:	2200      	movs	r2, #0
 8003f92:	9b02      	ldr	r3, [sp, #8]
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	b01c      	add	sp, #112	; 0x70
 8003f98:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f9c:	b003      	add	sp, #12
 8003f9e:	4770      	bx	lr
 8003fa0:	2000000c 	.word	0x2000000c
 8003fa4:	ffff0208 	.word	0xffff0208

08003fa8 <__ssputs_r>:
 8003fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fac:	688e      	ldr	r6, [r1, #8]
 8003fae:	4682      	mov	sl, r0
 8003fb0:	429e      	cmp	r6, r3
 8003fb2:	460c      	mov	r4, r1
 8003fb4:	4690      	mov	r8, r2
 8003fb6:	461f      	mov	r7, r3
 8003fb8:	d838      	bhi.n	800402c <__ssputs_r+0x84>
 8003fba:	898a      	ldrh	r2, [r1, #12]
 8003fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fc0:	d032      	beq.n	8004028 <__ssputs_r+0x80>
 8003fc2:	6825      	ldr	r5, [r4, #0]
 8003fc4:	6909      	ldr	r1, [r1, #16]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	eba5 0901 	sub.w	r9, r5, r1
 8003fcc:	6965      	ldr	r5, [r4, #20]
 8003fce:	444b      	add	r3, r9
 8003fd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fd8:	106d      	asrs	r5, r5, #1
 8003fda:	429d      	cmp	r5, r3
 8003fdc:	bf38      	it	cc
 8003fde:	461d      	movcc	r5, r3
 8003fe0:	0553      	lsls	r3, r2, #21
 8003fe2:	d531      	bpl.n	8004048 <__ssputs_r+0xa0>
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	f000 fb61 	bl	80046ac <_malloc_r>
 8003fea:	4606      	mov	r6, r0
 8003fec:	b950      	cbnz	r0, 8004004 <__ssputs_r+0x5c>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	f8ca 3000 	str.w	r3, [sl]
 8003ff8:	89a3      	ldrh	r3, [r4, #12]
 8003ffa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ffe:	81a3      	strh	r3, [r4, #12]
 8004000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004004:	464a      	mov	r2, r9
 8004006:	6921      	ldr	r1, [r4, #16]
 8004008:	f7ff ff98 	bl	8003f3c <memcpy>
 800400c:	89a3      	ldrh	r3, [r4, #12]
 800400e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	6126      	str	r6, [r4, #16]
 800401a:	444e      	add	r6, r9
 800401c:	6026      	str	r6, [r4, #0]
 800401e:	463e      	mov	r6, r7
 8004020:	6165      	str	r5, [r4, #20]
 8004022:	eba5 0509 	sub.w	r5, r5, r9
 8004026:	60a5      	str	r5, [r4, #8]
 8004028:	42be      	cmp	r6, r7
 800402a:	d900      	bls.n	800402e <__ssputs_r+0x86>
 800402c:	463e      	mov	r6, r7
 800402e:	4632      	mov	r2, r6
 8004030:	4641      	mov	r1, r8
 8004032:	6820      	ldr	r0, [r4, #0]
 8004034:	f000 fab8 	bl	80045a8 <memmove>
 8004038:	68a3      	ldr	r3, [r4, #8]
 800403a:	2000      	movs	r0, #0
 800403c:	1b9b      	subs	r3, r3, r6
 800403e:	60a3      	str	r3, [r4, #8]
 8004040:	6823      	ldr	r3, [r4, #0]
 8004042:	4433      	add	r3, r6
 8004044:	6023      	str	r3, [r4, #0]
 8004046:	e7db      	b.n	8004000 <__ssputs_r+0x58>
 8004048:	462a      	mov	r2, r5
 800404a:	f000 fba3 	bl	8004794 <_realloc_r>
 800404e:	4606      	mov	r6, r0
 8004050:	2800      	cmp	r0, #0
 8004052:	d1e1      	bne.n	8004018 <__ssputs_r+0x70>
 8004054:	4650      	mov	r0, sl
 8004056:	6921      	ldr	r1, [r4, #16]
 8004058:	f000 fac0 	bl	80045dc <_free_r>
 800405c:	e7c7      	b.n	8003fee <__ssputs_r+0x46>
	...

08004060 <_svfiprintf_r>:
 8004060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004064:	4698      	mov	r8, r3
 8004066:	898b      	ldrh	r3, [r1, #12]
 8004068:	4607      	mov	r7, r0
 800406a:	061b      	lsls	r3, r3, #24
 800406c:	460d      	mov	r5, r1
 800406e:	4614      	mov	r4, r2
 8004070:	b09d      	sub	sp, #116	; 0x74
 8004072:	d50e      	bpl.n	8004092 <_svfiprintf_r+0x32>
 8004074:	690b      	ldr	r3, [r1, #16]
 8004076:	b963      	cbnz	r3, 8004092 <_svfiprintf_r+0x32>
 8004078:	2140      	movs	r1, #64	; 0x40
 800407a:	f000 fb17 	bl	80046ac <_malloc_r>
 800407e:	6028      	str	r0, [r5, #0]
 8004080:	6128      	str	r0, [r5, #16]
 8004082:	b920      	cbnz	r0, 800408e <_svfiprintf_r+0x2e>
 8004084:	230c      	movs	r3, #12
 8004086:	603b      	str	r3, [r7, #0]
 8004088:	f04f 30ff 	mov.w	r0, #4294967295
 800408c:	e0d1      	b.n	8004232 <_svfiprintf_r+0x1d2>
 800408e:	2340      	movs	r3, #64	; 0x40
 8004090:	616b      	str	r3, [r5, #20]
 8004092:	2300      	movs	r3, #0
 8004094:	9309      	str	r3, [sp, #36]	; 0x24
 8004096:	2320      	movs	r3, #32
 8004098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800409c:	2330      	movs	r3, #48	; 0x30
 800409e:	f04f 0901 	mov.w	r9, #1
 80040a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80040a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800424c <_svfiprintf_r+0x1ec>
 80040aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040ae:	4623      	mov	r3, r4
 80040b0:	469a      	mov	sl, r3
 80040b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040b6:	b10a      	cbz	r2, 80040bc <_svfiprintf_r+0x5c>
 80040b8:	2a25      	cmp	r2, #37	; 0x25
 80040ba:	d1f9      	bne.n	80040b0 <_svfiprintf_r+0x50>
 80040bc:	ebba 0b04 	subs.w	fp, sl, r4
 80040c0:	d00b      	beq.n	80040da <_svfiprintf_r+0x7a>
 80040c2:	465b      	mov	r3, fp
 80040c4:	4622      	mov	r2, r4
 80040c6:	4629      	mov	r1, r5
 80040c8:	4638      	mov	r0, r7
 80040ca:	f7ff ff6d 	bl	8003fa8 <__ssputs_r>
 80040ce:	3001      	adds	r0, #1
 80040d0:	f000 80aa 	beq.w	8004228 <_svfiprintf_r+0x1c8>
 80040d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040d6:	445a      	add	r2, fp
 80040d8:	9209      	str	r2, [sp, #36]	; 0x24
 80040da:	f89a 3000 	ldrb.w	r3, [sl]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 80a2 	beq.w	8004228 <_svfiprintf_r+0x1c8>
 80040e4:	2300      	movs	r3, #0
 80040e6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ee:	f10a 0a01 	add.w	sl, sl, #1
 80040f2:	9304      	str	r3, [sp, #16]
 80040f4:	9307      	str	r3, [sp, #28]
 80040f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040fa:	931a      	str	r3, [sp, #104]	; 0x68
 80040fc:	4654      	mov	r4, sl
 80040fe:	2205      	movs	r2, #5
 8004100:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004104:	4851      	ldr	r0, [pc, #324]	; (800424c <_svfiprintf_r+0x1ec>)
 8004106:	f000 fa41 	bl	800458c <memchr>
 800410a:	9a04      	ldr	r2, [sp, #16]
 800410c:	b9d8      	cbnz	r0, 8004146 <_svfiprintf_r+0xe6>
 800410e:	06d0      	lsls	r0, r2, #27
 8004110:	bf44      	itt	mi
 8004112:	2320      	movmi	r3, #32
 8004114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004118:	0711      	lsls	r1, r2, #28
 800411a:	bf44      	itt	mi
 800411c:	232b      	movmi	r3, #43	; 0x2b
 800411e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004122:	f89a 3000 	ldrb.w	r3, [sl]
 8004126:	2b2a      	cmp	r3, #42	; 0x2a
 8004128:	d015      	beq.n	8004156 <_svfiprintf_r+0xf6>
 800412a:	4654      	mov	r4, sl
 800412c:	2000      	movs	r0, #0
 800412e:	f04f 0c0a 	mov.w	ip, #10
 8004132:	9a07      	ldr	r2, [sp, #28]
 8004134:	4621      	mov	r1, r4
 8004136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800413a:	3b30      	subs	r3, #48	; 0x30
 800413c:	2b09      	cmp	r3, #9
 800413e:	d94e      	bls.n	80041de <_svfiprintf_r+0x17e>
 8004140:	b1b0      	cbz	r0, 8004170 <_svfiprintf_r+0x110>
 8004142:	9207      	str	r2, [sp, #28]
 8004144:	e014      	b.n	8004170 <_svfiprintf_r+0x110>
 8004146:	eba0 0308 	sub.w	r3, r0, r8
 800414a:	fa09 f303 	lsl.w	r3, r9, r3
 800414e:	4313      	orrs	r3, r2
 8004150:	46a2      	mov	sl, r4
 8004152:	9304      	str	r3, [sp, #16]
 8004154:	e7d2      	b.n	80040fc <_svfiprintf_r+0x9c>
 8004156:	9b03      	ldr	r3, [sp, #12]
 8004158:	1d19      	adds	r1, r3, #4
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	9103      	str	r1, [sp, #12]
 800415e:	2b00      	cmp	r3, #0
 8004160:	bfbb      	ittet	lt
 8004162:	425b      	neglt	r3, r3
 8004164:	f042 0202 	orrlt.w	r2, r2, #2
 8004168:	9307      	strge	r3, [sp, #28]
 800416a:	9307      	strlt	r3, [sp, #28]
 800416c:	bfb8      	it	lt
 800416e:	9204      	strlt	r2, [sp, #16]
 8004170:	7823      	ldrb	r3, [r4, #0]
 8004172:	2b2e      	cmp	r3, #46	; 0x2e
 8004174:	d10c      	bne.n	8004190 <_svfiprintf_r+0x130>
 8004176:	7863      	ldrb	r3, [r4, #1]
 8004178:	2b2a      	cmp	r3, #42	; 0x2a
 800417a:	d135      	bne.n	80041e8 <_svfiprintf_r+0x188>
 800417c:	9b03      	ldr	r3, [sp, #12]
 800417e:	3402      	adds	r4, #2
 8004180:	1d1a      	adds	r2, r3, #4
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	9203      	str	r2, [sp, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	bfb8      	it	lt
 800418a:	f04f 33ff 	movlt.w	r3, #4294967295
 800418e:	9305      	str	r3, [sp, #20]
 8004190:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004250 <_svfiprintf_r+0x1f0>
 8004194:	2203      	movs	r2, #3
 8004196:	4650      	mov	r0, sl
 8004198:	7821      	ldrb	r1, [r4, #0]
 800419a:	f000 f9f7 	bl	800458c <memchr>
 800419e:	b140      	cbz	r0, 80041b2 <_svfiprintf_r+0x152>
 80041a0:	2340      	movs	r3, #64	; 0x40
 80041a2:	eba0 000a 	sub.w	r0, r0, sl
 80041a6:	fa03 f000 	lsl.w	r0, r3, r0
 80041aa:	9b04      	ldr	r3, [sp, #16]
 80041ac:	3401      	adds	r4, #1
 80041ae:	4303      	orrs	r3, r0
 80041b0:	9304      	str	r3, [sp, #16]
 80041b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b6:	2206      	movs	r2, #6
 80041b8:	4826      	ldr	r0, [pc, #152]	; (8004254 <_svfiprintf_r+0x1f4>)
 80041ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041be:	f000 f9e5 	bl	800458c <memchr>
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d038      	beq.n	8004238 <_svfiprintf_r+0x1d8>
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <_svfiprintf_r+0x1f8>)
 80041c8:	bb1b      	cbnz	r3, 8004212 <_svfiprintf_r+0x1b2>
 80041ca:	9b03      	ldr	r3, [sp, #12]
 80041cc:	3307      	adds	r3, #7
 80041ce:	f023 0307 	bic.w	r3, r3, #7
 80041d2:	3308      	adds	r3, #8
 80041d4:	9303      	str	r3, [sp, #12]
 80041d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d8:	4433      	add	r3, r6
 80041da:	9309      	str	r3, [sp, #36]	; 0x24
 80041dc:	e767      	b.n	80040ae <_svfiprintf_r+0x4e>
 80041de:	460c      	mov	r4, r1
 80041e0:	2001      	movs	r0, #1
 80041e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80041e6:	e7a5      	b.n	8004134 <_svfiprintf_r+0xd4>
 80041e8:	2300      	movs	r3, #0
 80041ea:	f04f 0c0a 	mov.w	ip, #10
 80041ee:	4619      	mov	r1, r3
 80041f0:	3401      	adds	r4, #1
 80041f2:	9305      	str	r3, [sp, #20]
 80041f4:	4620      	mov	r0, r4
 80041f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041fa:	3a30      	subs	r2, #48	; 0x30
 80041fc:	2a09      	cmp	r2, #9
 80041fe:	d903      	bls.n	8004208 <_svfiprintf_r+0x1a8>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0c5      	beq.n	8004190 <_svfiprintf_r+0x130>
 8004204:	9105      	str	r1, [sp, #20]
 8004206:	e7c3      	b.n	8004190 <_svfiprintf_r+0x130>
 8004208:	4604      	mov	r4, r0
 800420a:	2301      	movs	r3, #1
 800420c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004210:	e7f0      	b.n	80041f4 <_svfiprintf_r+0x194>
 8004212:	ab03      	add	r3, sp, #12
 8004214:	9300      	str	r3, [sp, #0]
 8004216:	462a      	mov	r2, r5
 8004218:	4638      	mov	r0, r7
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <_svfiprintf_r+0x1fc>)
 800421c:	a904      	add	r1, sp, #16
 800421e:	f3af 8000 	nop.w
 8004222:	1c42      	adds	r2, r0, #1
 8004224:	4606      	mov	r6, r0
 8004226:	d1d6      	bne.n	80041d6 <_svfiprintf_r+0x176>
 8004228:	89ab      	ldrh	r3, [r5, #12]
 800422a:	065b      	lsls	r3, r3, #25
 800422c:	f53f af2c 	bmi.w	8004088 <_svfiprintf_r+0x28>
 8004230:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004232:	b01d      	add	sp, #116	; 0x74
 8004234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004238:	ab03      	add	r3, sp, #12
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	462a      	mov	r2, r5
 800423e:	4638      	mov	r0, r7
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <_svfiprintf_r+0x1fc>)
 8004242:	a904      	add	r1, sp, #16
 8004244:	f000 f87c 	bl	8004340 <_printf_i>
 8004248:	e7eb      	b.n	8004222 <_svfiprintf_r+0x1c2>
 800424a:	bf00      	nop
 800424c:	0800512e 	.word	0x0800512e
 8004250:	08005134 	.word	0x08005134
 8004254:	08005138 	.word	0x08005138
 8004258:	00000000 	.word	0x00000000
 800425c:	08003fa9 	.word	0x08003fa9

08004260 <_printf_common>:
 8004260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004264:	4616      	mov	r6, r2
 8004266:	4699      	mov	r9, r3
 8004268:	688a      	ldr	r2, [r1, #8]
 800426a:	690b      	ldr	r3, [r1, #16]
 800426c:	4607      	mov	r7, r0
 800426e:	4293      	cmp	r3, r2
 8004270:	bfb8      	it	lt
 8004272:	4613      	movlt	r3, r2
 8004274:	6033      	str	r3, [r6, #0]
 8004276:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800427a:	460c      	mov	r4, r1
 800427c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004280:	b10a      	cbz	r2, 8004286 <_printf_common+0x26>
 8004282:	3301      	adds	r3, #1
 8004284:	6033      	str	r3, [r6, #0]
 8004286:	6823      	ldr	r3, [r4, #0]
 8004288:	0699      	lsls	r1, r3, #26
 800428a:	bf42      	ittt	mi
 800428c:	6833      	ldrmi	r3, [r6, #0]
 800428e:	3302      	addmi	r3, #2
 8004290:	6033      	strmi	r3, [r6, #0]
 8004292:	6825      	ldr	r5, [r4, #0]
 8004294:	f015 0506 	ands.w	r5, r5, #6
 8004298:	d106      	bne.n	80042a8 <_printf_common+0x48>
 800429a:	f104 0a19 	add.w	sl, r4, #25
 800429e:	68e3      	ldr	r3, [r4, #12]
 80042a0:	6832      	ldr	r2, [r6, #0]
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	42ab      	cmp	r3, r5
 80042a6:	dc28      	bgt.n	80042fa <_printf_common+0x9a>
 80042a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042ac:	1e13      	subs	r3, r2, #0
 80042ae:	6822      	ldr	r2, [r4, #0]
 80042b0:	bf18      	it	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	0692      	lsls	r2, r2, #26
 80042b6:	d42d      	bmi.n	8004314 <_printf_common+0xb4>
 80042b8:	4649      	mov	r1, r9
 80042ba:	4638      	mov	r0, r7
 80042bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042c0:	47c0      	blx	r8
 80042c2:	3001      	adds	r0, #1
 80042c4:	d020      	beq.n	8004308 <_printf_common+0xa8>
 80042c6:	6823      	ldr	r3, [r4, #0]
 80042c8:	68e5      	ldr	r5, [r4, #12]
 80042ca:	f003 0306 	and.w	r3, r3, #6
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	bf18      	it	ne
 80042d2:	2500      	movne	r5, #0
 80042d4:	6832      	ldr	r2, [r6, #0]
 80042d6:	f04f 0600 	mov.w	r6, #0
 80042da:	68a3      	ldr	r3, [r4, #8]
 80042dc:	bf08      	it	eq
 80042de:	1aad      	subeq	r5, r5, r2
 80042e0:	6922      	ldr	r2, [r4, #16]
 80042e2:	bf08      	it	eq
 80042e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bfc4      	itt	gt
 80042ec:	1a9b      	subgt	r3, r3, r2
 80042ee:	18ed      	addgt	r5, r5, r3
 80042f0:	341a      	adds	r4, #26
 80042f2:	42b5      	cmp	r5, r6
 80042f4:	d11a      	bne.n	800432c <_printf_common+0xcc>
 80042f6:	2000      	movs	r0, #0
 80042f8:	e008      	b.n	800430c <_printf_common+0xac>
 80042fa:	2301      	movs	r3, #1
 80042fc:	4652      	mov	r2, sl
 80042fe:	4649      	mov	r1, r9
 8004300:	4638      	mov	r0, r7
 8004302:	47c0      	blx	r8
 8004304:	3001      	adds	r0, #1
 8004306:	d103      	bne.n	8004310 <_printf_common+0xb0>
 8004308:	f04f 30ff 	mov.w	r0, #4294967295
 800430c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004310:	3501      	adds	r5, #1
 8004312:	e7c4      	b.n	800429e <_printf_common+0x3e>
 8004314:	2030      	movs	r0, #48	; 0x30
 8004316:	18e1      	adds	r1, r4, r3
 8004318:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004322:	4422      	add	r2, r4
 8004324:	3302      	adds	r3, #2
 8004326:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800432a:	e7c5      	b.n	80042b8 <_printf_common+0x58>
 800432c:	2301      	movs	r3, #1
 800432e:	4622      	mov	r2, r4
 8004330:	4649      	mov	r1, r9
 8004332:	4638      	mov	r0, r7
 8004334:	47c0      	blx	r8
 8004336:	3001      	adds	r0, #1
 8004338:	d0e6      	beq.n	8004308 <_printf_common+0xa8>
 800433a:	3601      	adds	r6, #1
 800433c:	e7d9      	b.n	80042f2 <_printf_common+0x92>
	...

08004340 <_printf_i>:
 8004340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	7e0f      	ldrb	r7, [r1, #24]
 8004346:	4691      	mov	r9, r2
 8004348:	2f78      	cmp	r7, #120	; 0x78
 800434a:	4680      	mov	r8, r0
 800434c:	460c      	mov	r4, r1
 800434e:	469a      	mov	sl, r3
 8004350:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004352:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004356:	d807      	bhi.n	8004368 <_printf_i+0x28>
 8004358:	2f62      	cmp	r7, #98	; 0x62
 800435a:	d80a      	bhi.n	8004372 <_printf_i+0x32>
 800435c:	2f00      	cmp	r7, #0
 800435e:	f000 80d9 	beq.w	8004514 <_printf_i+0x1d4>
 8004362:	2f58      	cmp	r7, #88	; 0x58
 8004364:	f000 80a4 	beq.w	80044b0 <_printf_i+0x170>
 8004368:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800436c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004370:	e03a      	b.n	80043e8 <_printf_i+0xa8>
 8004372:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004376:	2b15      	cmp	r3, #21
 8004378:	d8f6      	bhi.n	8004368 <_printf_i+0x28>
 800437a:	a101      	add	r1, pc, #4	; (adr r1, 8004380 <_printf_i+0x40>)
 800437c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004380:	080043d9 	.word	0x080043d9
 8004384:	080043ed 	.word	0x080043ed
 8004388:	08004369 	.word	0x08004369
 800438c:	08004369 	.word	0x08004369
 8004390:	08004369 	.word	0x08004369
 8004394:	08004369 	.word	0x08004369
 8004398:	080043ed 	.word	0x080043ed
 800439c:	08004369 	.word	0x08004369
 80043a0:	08004369 	.word	0x08004369
 80043a4:	08004369 	.word	0x08004369
 80043a8:	08004369 	.word	0x08004369
 80043ac:	080044fb 	.word	0x080044fb
 80043b0:	0800441d 	.word	0x0800441d
 80043b4:	080044dd 	.word	0x080044dd
 80043b8:	08004369 	.word	0x08004369
 80043bc:	08004369 	.word	0x08004369
 80043c0:	0800451d 	.word	0x0800451d
 80043c4:	08004369 	.word	0x08004369
 80043c8:	0800441d 	.word	0x0800441d
 80043cc:	08004369 	.word	0x08004369
 80043d0:	08004369 	.word	0x08004369
 80043d4:	080044e5 	.word	0x080044e5
 80043d8:	682b      	ldr	r3, [r5, #0]
 80043da:	1d1a      	adds	r2, r3, #4
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	602a      	str	r2, [r5, #0]
 80043e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043e8:	2301      	movs	r3, #1
 80043ea:	e0a4      	b.n	8004536 <_printf_i+0x1f6>
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	6829      	ldr	r1, [r5, #0]
 80043f0:	0606      	lsls	r6, r0, #24
 80043f2:	f101 0304 	add.w	r3, r1, #4
 80043f6:	d50a      	bpl.n	800440e <_printf_i+0xce>
 80043f8:	680e      	ldr	r6, [r1, #0]
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	2e00      	cmp	r6, #0
 80043fe:	da03      	bge.n	8004408 <_printf_i+0xc8>
 8004400:	232d      	movs	r3, #45	; 0x2d
 8004402:	4276      	negs	r6, r6
 8004404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004408:	230a      	movs	r3, #10
 800440a:	485e      	ldr	r0, [pc, #376]	; (8004584 <_printf_i+0x244>)
 800440c:	e019      	b.n	8004442 <_printf_i+0x102>
 800440e:	680e      	ldr	r6, [r1, #0]
 8004410:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004414:	602b      	str	r3, [r5, #0]
 8004416:	bf18      	it	ne
 8004418:	b236      	sxthne	r6, r6
 800441a:	e7ef      	b.n	80043fc <_printf_i+0xbc>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	6820      	ldr	r0, [r4, #0]
 8004420:	1d19      	adds	r1, r3, #4
 8004422:	6029      	str	r1, [r5, #0]
 8004424:	0601      	lsls	r1, r0, #24
 8004426:	d501      	bpl.n	800442c <_printf_i+0xec>
 8004428:	681e      	ldr	r6, [r3, #0]
 800442a:	e002      	b.n	8004432 <_printf_i+0xf2>
 800442c:	0646      	lsls	r6, r0, #25
 800442e:	d5fb      	bpl.n	8004428 <_printf_i+0xe8>
 8004430:	881e      	ldrh	r6, [r3, #0]
 8004432:	2f6f      	cmp	r7, #111	; 0x6f
 8004434:	bf0c      	ite	eq
 8004436:	2308      	moveq	r3, #8
 8004438:	230a      	movne	r3, #10
 800443a:	4852      	ldr	r0, [pc, #328]	; (8004584 <_printf_i+0x244>)
 800443c:	2100      	movs	r1, #0
 800443e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004442:	6865      	ldr	r5, [r4, #4]
 8004444:	2d00      	cmp	r5, #0
 8004446:	bfa8      	it	ge
 8004448:	6821      	ldrge	r1, [r4, #0]
 800444a:	60a5      	str	r5, [r4, #8]
 800444c:	bfa4      	itt	ge
 800444e:	f021 0104 	bicge.w	r1, r1, #4
 8004452:	6021      	strge	r1, [r4, #0]
 8004454:	b90e      	cbnz	r6, 800445a <_printf_i+0x11a>
 8004456:	2d00      	cmp	r5, #0
 8004458:	d04d      	beq.n	80044f6 <_printf_i+0x1b6>
 800445a:	4615      	mov	r5, r2
 800445c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004460:	fb03 6711 	mls	r7, r3, r1, r6
 8004464:	5dc7      	ldrb	r7, [r0, r7]
 8004466:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800446a:	4637      	mov	r7, r6
 800446c:	42bb      	cmp	r3, r7
 800446e:	460e      	mov	r6, r1
 8004470:	d9f4      	bls.n	800445c <_printf_i+0x11c>
 8004472:	2b08      	cmp	r3, #8
 8004474:	d10b      	bne.n	800448e <_printf_i+0x14e>
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	07de      	lsls	r6, r3, #31
 800447a:	d508      	bpl.n	800448e <_printf_i+0x14e>
 800447c:	6923      	ldr	r3, [r4, #16]
 800447e:	6861      	ldr	r1, [r4, #4]
 8004480:	4299      	cmp	r1, r3
 8004482:	bfde      	ittt	le
 8004484:	2330      	movle	r3, #48	; 0x30
 8004486:	f805 3c01 	strble.w	r3, [r5, #-1]
 800448a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800448e:	1b52      	subs	r2, r2, r5
 8004490:	6122      	str	r2, [r4, #16]
 8004492:	464b      	mov	r3, r9
 8004494:	4621      	mov	r1, r4
 8004496:	4640      	mov	r0, r8
 8004498:	f8cd a000 	str.w	sl, [sp]
 800449c:	aa03      	add	r2, sp, #12
 800449e:	f7ff fedf 	bl	8004260 <_printf_common>
 80044a2:	3001      	adds	r0, #1
 80044a4:	d14c      	bne.n	8004540 <_printf_i+0x200>
 80044a6:	f04f 30ff 	mov.w	r0, #4294967295
 80044aa:	b004      	add	sp, #16
 80044ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044b0:	4834      	ldr	r0, [pc, #208]	; (8004584 <_printf_i+0x244>)
 80044b2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80044b6:	6829      	ldr	r1, [r5, #0]
 80044b8:	6823      	ldr	r3, [r4, #0]
 80044ba:	f851 6b04 	ldr.w	r6, [r1], #4
 80044be:	6029      	str	r1, [r5, #0]
 80044c0:	061d      	lsls	r5, r3, #24
 80044c2:	d514      	bpl.n	80044ee <_printf_i+0x1ae>
 80044c4:	07df      	lsls	r7, r3, #31
 80044c6:	bf44      	itt	mi
 80044c8:	f043 0320 	orrmi.w	r3, r3, #32
 80044cc:	6023      	strmi	r3, [r4, #0]
 80044ce:	b91e      	cbnz	r6, 80044d8 <_printf_i+0x198>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	f023 0320 	bic.w	r3, r3, #32
 80044d6:	6023      	str	r3, [r4, #0]
 80044d8:	2310      	movs	r3, #16
 80044da:	e7af      	b.n	800443c <_printf_i+0xfc>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	f043 0320 	orr.w	r3, r3, #32
 80044e2:	6023      	str	r3, [r4, #0]
 80044e4:	2378      	movs	r3, #120	; 0x78
 80044e6:	4828      	ldr	r0, [pc, #160]	; (8004588 <_printf_i+0x248>)
 80044e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ec:	e7e3      	b.n	80044b6 <_printf_i+0x176>
 80044ee:	0659      	lsls	r1, r3, #25
 80044f0:	bf48      	it	mi
 80044f2:	b2b6      	uxthmi	r6, r6
 80044f4:	e7e6      	b.n	80044c4 <_printf_i+0x184>
 80044f6:	4615      	mov	r5, r2
 80044f8:	e7bb      	b.n	8004472 <_printf_i+0x132>
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	6826      	ldr	r6, [r4, #0]
 80044fe:	1d18      	adds	r0, r3, #4
 8004500:	6961      	ldr	r1, [r4, #20]
 8004502:	6028      	str	r0, [r5, #0]
 8004504:	0635      	lsls	r5, r6, #24
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	d501      	bpl.n	800450e <_printf_i+0x1ce>
 800450a:	6019      	str	r1, [r3, #0]
 800450c:	e002      	b.n	8004514 <_printf_i+0x1d4>
 800450e:	0670      	lsls	r0, r6, #25
 8004510:	d5fb      	bpl.n	800450a <_printf_i+0x1ca>
 8004512:	8019      	strh	r1, [r3, #0]
 8004514:	2300      	movs	r3, #0
 8004516:	4615      	mov	r5, r2
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	e7ba      	b.n	8004492 <_printf_i+0x152>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	2100      	movs	r1, #0
 8004520:	1d1a      	adds	r2, r3, #4
 8004522:	602a      	str	r2, [r5, #0]
 8004524:	681d      	ldr	r5, [r3, #0]
 8004526:	6862      	ldr	r2, [r4, #4]
 8004528:	4628      	mov	r0, r5
 800452a:	f000 f82f 	bl	800458c <memchr>
 800452e:	b108      	cbz	r0, 8004534 <_printf_i+0x1f4>
 8004530:	1b40      	subs	r0, r0, r5
 8004532:	6060      	str	r0, [r4, #4]
 8004534:	6863      	ldr	r3, [r4, #4]
 8004536:	6123      	str	r3, [r4, #16]
 8004538:	2300      	movs	r3, #0
 800453a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800453e:	e7a8      	b.n	8004492 <_printf_i+0x152>
 8004540:	462a      	mov	r2, r5
 8004542:	4649      	mov	r1, r9
 8004544:	4640      	mov	r0, r8
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	47d0      	blx	sl
 800454a:	3001      	adds	r0, #1
 800454c:	d0ab      	beq.n	80044a6 <_printf_i+0x166>
 800454e:	6823      	ldr	r3, [r4, #0]
 8004550:	079b      	lsls	r3, r3, #30
 8004552:	d413      	bmi.n	800457c <_printf_i+0x23c>
 8004554:	68e0      	ldr	r0, [r4, #12]
 8004556:	9b03      	ldr	r3, [sp, #12]
 8004558:	4298      	cmp	r0, r3
 800455a:	bfb8      	it	lt
 800455c:	4618      	movlt	r0, r3
 800455e:	e7a4      	b.n	80044aa <_printf_i+0x16a>
 8004560:	2301      	movs	r3, #1
 8004562:	4632      	mov	r2, r6
 8004564:	4649      	mov	r1, r9
 8004566:	4640      	mov	r0, r8
 8004568:	47d0      	blx	sl
 800456a:	3001      	adds	r0, #1
 800456c:	d09b      	beq.n	80044a6 <_printf_i+0x166>
 800456e:	3501      	adds	r5, #1
 8004570:	68e3      	ldr	r3, [r4, #12]
 8004572:	9903      	ldr	r1, [sp, #12]
 8004574:	1a5b      	subs	r3, r3, r1
 8004576:	42ab      	cmp	r3, r5
 8004578:	dcf2      	bgt.n	8004560 <_printf_i+0x220>
 800457a:	e7eb      	b.n	8004554 <_printf_i+0x214>
 800457c:	2500      	movs	r5, #0
 800457e:	f104 0619 	add.w	r6, r4, #25
 8004582:	e7f5      	b.n	8004570 <_printf_i+0x230>
 8004584:	0800513f 	.word	0x0800513f
 8004588:	08005150 	.word	0x08005150

0800458c <memchr>:
 800458c:	4603      	mov	r3, r0
 800458e:	b510      	push	{r4, lr}
 8004590:	b2c9      	uxtb	r1, r1
 8004592:	4402      	add	r2, r0
 8004594:	4293      	cmp	r3, r2
 8004596:	4618      	mov	r0, r3
 8004598:	d101      	bne.n	800459e <memchr+0x12>
 800459a:	2000      	movs	r0, #0
 800459c:	e003      	b.n	80045a6 <memchr+0x1a>
 800459e:	7804      	ldrb	r4, [r0, #0]
 80045a0:	3301      	adds	r3, #1
 80045a2:	428c      	cmp	r4, r1
 80045a4:	d1f6      	bne.n	8004594 <memchr+0x8>
 80045a6:	bd10      	pop	{r4, pc}

080045a8 <memmove>:
 80045a8:	4288      	cmp	r0, r1
 80045aa:	b510      	push	{r4, lr}
 80045ac:	eb01 0402 	add.w	r4, r1, r2
 80045b0:	d902      	bls.n	80045b8 <memmove+0x10>
 80045b2:	4284      	cmp	r4, r0
 80045b4:	4623      	mov	r3, r4
 80045b6:	d807      	bhi.n	80045c8 <memmove+0x20>
 80045b8:	1e43      	subs	r3, r0, #1
 80045ba:	42a1      	cmp	r1, r4
 80045bc:	d008      	beq.n	80045d0 <memmove+0x28>
 80045be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045c6:	e7f8      	b.n	80045ba <memmove+0x12>
 80045c8:	4601      	mov	r1, r0
 80045ca:	4402      	add	r2, r0
 80045cc:	428a      	cmp	r2, r1
 80045ce:	d100      	bne.n	80045d2 <memmove+0x2a>
 80045d0:	bd10      	pop	{r4, pc}
 80045d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045da:	e7f7      	b.n	80045cc <memmove+0x24>

080045dc <_free_r>:
 80045dc:	b538      	push	{r3, r4, r5, lr}
 80045de:	4605      	mov	r5, r0
 80045e0:	2900      	cmp	r1, #0
 80045e2:	d040      	beq.n	8004666 <_free_r+0x8a>
 80045e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045e8:	1f0c      	subs	r4, r1, #4
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	bfb8      	it	lt
 80045ee:	18e4      	addlt	r4, r4, r3
 80045f0:	f000 f910 	bl	8004814 <__malloc_lock>
 80045f4:	4a1c      	ldr	r2, [pc, #112]	; (8004668 <_free_r+0x8c>)
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	b933      	cbnz	r3, 8004608 <_free_r+0x2c>
 80045fa:	6063      	str	r3, [r4, #4]
 80045fc:	6014      	str	r4, [r2, #0]
 80045fe:	4628      	mov	r0, r5
 8004600:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004604:	f000 b90c 	b.w	8004820 <__malloc_unlock>
 8004608:	42a3      	cmp	r3, r4
 800460a:	d908      	bls.n	800461e <_free_r+0x42>
 800460c:	6820      	ldr	r0, [r4, #0]
 800460e:	1821      	adds	r1, r4, r0
 8004610:	428b      	cmp	r3, r1
 8004612:	bf01      	itttt	eq
 8004614:	6819      	ldreq	r1, [r3, #0]
 8004616:	685b      	ldreq	r3, [r3, #4]
 8004618:	1809      	addeq	r1, r1, r0
 800461a:	6021      	streq	r1, [r4, #0]
 800461c:	e7ed      	b.n	80045fa <_free_r+0x1e>
 800461e:	461a      	mov	r2, r3
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	b10b      	cbz	r3, 8004628 <_free_r+0x4c>
 8004624:	42a3      	cmp	r3, r4
 8004626:	d9fa      	bls.n	800461e <_free_r+0x42>
 8004628:	6811      	ldr	r1, [r2, #0]
 800462a:	1850      	adds	r0, r2, r1
 800462c:	42a0      	cmp	r0, r4
 800462e:	d10b      	bne.n	8004648 <_free_r+0x6c>
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	4401      	add	r1, r0
 8004634:	1850      	adds	r0, r2, r1
 8004636:	4283      	cmp	r3, r0
 8004638:	6011      	str	r1, [r2, #0]
 800463a:	d1e0      	bne.n	80045fe <_free_r+0x22>
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4401      	add	r1, r0
 8004642:	6011      	str	r1, [r2, #0]
 8004644:	6053      	str	r3, [r2, #4]
 8004646:	e7da      	b.n	80045fe <_free_r+0x22>
 8004648:	d902      	bls.n	8004650 <_free_r+0x74>
 800464a:	230c      	movs	r3, #12
 800464c:	602b      	str	r3, [r5, #0]
 800464e:	e7d6      	b.n	80045fe <_free_r+0x22>
 8004650:	6820      	ldr	r0, [r4, #0]
 8004652:	1821      	adds	r1, r4, r0
 8004654:	428b      	cmp	r3, r1
 8004656:	bf01      	itttt	eq
 8004658:	6819      	ldreq	r1, [r3, #0]
 800465a:	685b      	ldreq	r3, [r3, #4]
 800465c:	1809      	addeq	r1, r1, r0
 800465e:	6021      	streq	r1, [r4, #0]
 8004660:	6063      	str	r3, [r4, #4]
 8004662:	6054      	str	r4, [r2, #4]
 8004664:	e7cb      	b.n	80045fe <_free_r+0x22>
 8004666:	bd38      	pop	{r3, r4, r5, pc}
 8004668:	2000088c 	.word	0x2000088c

0800466c <sbrk_aligned>:
 800466c:	b570      	push	{r4, r5, r6, lr}
 800466e:	4e0e      	ldr	r6, [pc, #56]	; (80046a8 <sbrk_aligned+0x3c>)
 8004670:	460c      	mov	r4, r1
 8004672:	6831      	ldr	r1, [r6, #0]
 8004674:	4605      	mov	r5, r0
 8004676:	b911      	cbnz	r1, 800467e <sbrk_aligned+0x12>
 8004678:	f000 f8bc 	bl	80047f4 <_sbrk_r>
 800467c:	6030      	str	r0, [r6, #0]
 800467e:	4621      	mov	r1, r4
 8004680:	4628      	mov	r0, r5
 8004682:	f000 f8b7 	bl	80047f4 <_sbrk_r>
 8004686:	1c43      	adds	r3, r0, #1
 8004688:	d00a      	beq.n	80046a0 <sbrk_aligned+0x34>
 800468a:	1cc4      	adds	r4, r0, #3
 800468c:	f024 0403 	bic.w	r4, r4, #3
 8004690:	42a0      	cmp	r0, r4
 8004692:	d007      	beq.n	80046a4 <sbrk_aligned+0x38>
 8004694:	1a21      	subs	r1, r4, r0
 8004696:	4628      	mov	r0, r5
 8004698:	f000 f8ac 	bl	80047f4 <_sbrk_r>
 800469c:	3001      	adds	r0, #1
 800469e:	d101      	bne.n	80046a4 <sbrk_aligned+0x38>
 80046a0:	f04f 34ff 	mov.w	r4, #4294967295
 80046a4:	4620      	mov	r0, r4
 80046a6:	bd70      	pop	{r4, r5, r6, pc}
 80046a8:	20000890 	.word	0x20000890

080046ac <_malloc_r>:
 80046ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046b0:	1ccd      	adds	r5, r1, #3
 80046b2:	f025 0503 	bic.w	r5, r5, #3
 80046b6:	3508      	adds	r5, #8
 80046b8:	2d0c      	cmp	r5, #12
 80046ba:	bf38      	it	cc
 80046bc:	250c      	movcc	r5, #12
 80046be:	2d00      	cmp	r5, #0
 80046c0:	4607      	mov	r7, r0
 80046c2:	db01      	blt.n	80046c8 <_malloc_r+0x1c>
 80046c4:	42a9      	cmp	r1, r5
 80046c6:	d905      	bls.n	80046d4 <_malloc_r+0x28>
 80046c8:	230c      	movs	r3, #12
 80046ca:	2600      	movs	r6, #0
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	4630      	mov	r0, r6
 80046d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d4:	4e2e      	ldr	r6, [pc, #184]	; (8004790 <_malloc_r+0xe4>)
 80046d6:	f000 f89d 	bl	8004814 <__malloc_lock>
 80046da:	6833      	ldr	r3, [r6, #0]
 80046dc:	461c      	mov	r4, r3
 80046de:	bb34      	cbnz	r4, 800472e <_malloc_r+0x82>
 80046e0:	4629      	mov	r1, r5
 80046e2:	4638      	mov	r0, r7
 80046e4:	f7ff ffc2 	bl	800466c <sbrk_aligned>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	4604      	mov	r4, r0
 80046ec:	d14d      	bne.n	800478a <_malloc_r+0xde>
 80046ee:	6834      	ldr	r4, [r6, #0]
 80046f0:	4626      	mov	r6, r4
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	d140      	bne.n	8004778 <_malloc_r+0xcc>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	4631      	mov	r1, r6
 80046fa:	4638      	mov	r0, r7
 80046fc:	eb04 0803 	add.w	r8, r4, r3
 8004700:	f000 f878 	bl	80047f4 <_sbrk_r>
 8004704:	4580      	cmp	r8, r0
 8004706:	d13a      	bne.n	800477e <_malloc_r+0xd2>
 8004708:	6821      	ldr	r1, [r4, #0]
 800470a:	3503      	adds	r5, #3
 800470c:	1a6d      	subs	r5, r5, r1
 800470e:	f025 0503 	bic.w	r5, r5, #3
 8004712:	3508      	adds	r5, #8
 8004714:	2d0c      	cmp	r5, #12
 8004716:	bf38      	it	cc
 8004718:	250c      	movcc	r5, #12
 800471a:	4638      	mov	r0, r7
 800471c:	4629      	mov	r1, r5
 800471e:	f7ff ffa5 	bl	800466c <sbrk_aligned>
 8004722:	3001      	adds	r0, #1
 8004724:	d02b      	beq.n	800477e <_malloc_r+0xd2>
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	442b      	add	r3, r5
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	e00e      	b.n	800474c <_malloc_r+0xa0>
 800472e:	6822      	ldr	r2, [r4, #0]
 8004730:	1b52      	subs	r2, r2, r5
 8004732:	d41e      	bmi.n	8004772 <_malloc_r+0xc6>
 8004734:	2a0b      	cmp	r2, #11
 8004736:	d916      	bls.n	8004766 <_malloc_r+0xba>
 8004738:	1961      	adds	r1, r4, r5
 800473a:	42a3      	cmp	r3, r4
 800473c:	6025      	str	r5, [r4, #0]
 800473e:	bf18      	it	ne
 8004740:	6059      	strne	r1, [r3, #4]
 8004742:	6863      	ldr	r3, [r4, #4]
 8004744:	bf08      	it	eq
 8004746:	6031      	streq	r1, [r6, #0]
 8004748:	5162      	str	r2, [r4, r5]
 800474a:	604b      	str	r3, [r1, #4]
 800474c:	4638      	mov	r0, r7
 800474e:	f104 060b 	add.w	r6, r4, #11
 8004752:	f000 f865 	bl	8004820 <__malloc_unlock>
 8004756:	f026 0607 	bic.w	r6, r6, #7
 800475a:	1d23      	adds	r3, r4, #4
 800475c:	1af2      	subs	r2, r6, r3
 800475e:	d0b6      	beq.n	80046ce <_malloc_r+0x22>
 8004760:	1b9b      	subs	r3, r3, r6
 8004762:	50a3      	str	r3, [r4, r2]
 8004764:	e7b3      	b.n	80046ce <_malloc_r+0x22>
 8004766:	6862      	ldr	r2, [r4, #4]
 8004768:	42a3      	cmp	r3, r4
 800476a:	bf0c      	ite	eq
 800476c:	6032      	streq	r2, [r6, #0]
 800476e:	605a      	strne	r2, [r3, #4]
 8004770:	e7ec      	b.n	800474c <_malloc_r+0xa0>
 8004772:	4623      	mov	r3, r4
 8004774:	6864      	ldr	r4, [r4, #4]
 8004776:	e7b2      	b.n	80046de <_malloc_r+0x32>
 8004778:	4634      	mov	r4, r6
 800477a:	6876      	ldr	r6, [r6, #4]
 800477c:	e7b9      	b.n	80046f2 <_malloc_r+0x46>
 800477e:	230c      	movs	r3, #12
 8004780:	4638      	mov	r0, r7
 8004782:	603b      	str	r3, [r7, #0]
 8004784:	f000 f84c 	bl	8004820 <__malloc_unlock>
 8004788:	e7a1      	b.n	80046ce <_malloc_r+0x22>
 800478a:	6025      	str	r5, [r4, #0]
 800478c:	e7de      	b.n	800474c <_malloc_r+0xa0>
 800478e:	bf00      	nop
 8004790:	2000088c 	.word	0x2000088c

08004794 <_realloc_r>:
 8004794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004798:	4680      	mov	r8, r0
 800479a:	4614      	mov	r4, r2
 800479c:	460e      	mov	r6, r1
 800479e:	b921      	cbnz	r1, 80047aa <_realloc_r+0x16>
 80047a0:	4611      	mov	r1, r2
 80047a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80047a6:	f7ff bf81 	b.w	80046ac <_malloc_r>
 80047aa:	b92a      	cbnz	r2, 80047b8 <_realloc_r+0x24>
 80047ac:	f7ff ff16 	bl	80045dc <_free_r>
 80047b0:	4625      	mov	r5, r4
 80047b2:	4628      	mov	r0, r5
 80047b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047b8:	f000 f838 	bl	800482c <_malloc_usable_size_r>
 80047bc:	4284      	cmp	r4, r0
 80047be:	4607      	mov	r7, r0
 80047c0:	d802      	bhi.n	80047c8 <_realloc_r+0x34>
 80047c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80047c6:	d812      	bhi.n	80047ee <_realloc_r+0x5a>
 80047c8:	4621      	mov	r1, r4
 80047ca:	4640      	mov	r0, r8
 80047cc:	f7ff ff6e 	bl	80046ac <_malloc_r>
 80047d0:	4605      	mov	r5, r0
 80047d2:	2800      	cmp	r0, #0
 80047d4:	d0ed      	beq.n	80047b2 <_realloc_r+0x1e>
 80047d6:	42bc      	cmp	r4, r7
 80047d8:	4622      	mov	r2, r4
 80047da:	4631      	mov	r1, r6
 80047dc:	bf28      	it	cs
 80047de:	463a      	movcs	r2, r7
 80047e0:	f7ff fbac 	bl	8003f3c <memcpy>
 80047e4:	4631      	mov	r1, r6
 80047e6:	4640      	mov	r0, r8
 80047e8:	f7ff fef8 	bl	80045dc <_free_r>
 80047ec:	e7e1      	b.n	80047b2 <_realloc_r+0x1e>
 80047ee:	4635      	mov	r5, r6
 80047f0:	e7df      	b.n	80047b2 <_realloc_r+0x1e>
	...

080047f4 <_sbrk_r>:
 80047f4:	b538      	push	{r3, r4, r5, lr}
 80047f6:	2300      	movs	r3, #0
 80047f8:	4d05      	ldr	r5, [pc, #20]	; (8004810 <_sbrk_r+0x1c>)
 80047fa:	4604      	mov	r4, r0
 80047fc:	4608      	mov	r0, r1
 80047fe:	602b      	str	r3, [r5, #0]
 8004800:	f7fc fca4 	bl	800114c <_sbrk>
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	d102      	bne.n	800480e <_sbrk_r+0x1a>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	b103      	cbz	r3, 800480e <_sbrk_r+0x1a>
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	bd38      	pop	{r3, r4, r5, pc}
 8004810:	20000894 	.word	0x20000894

08004814 <__malloc_lock>:
 8004814:	4801      	ldr	r0, [pc, #4]	; (800481c <__malloc_lock+0x8>)
 8004816:	f000 b811 	b.w	800483c <__retarget_lock_acquire_recursive>
 800481a:	bf00      	nop
 800481c:	20000898 	.word	0x20000898

08004820 <__malloc_unlock>:
 8004820:	4801      	ldr	r0, [pc, #4]	; (8004828 <__malloc_unlock+0x8>)
 8004822:	f000 b80c 	b.w	800483e <__retarget_lock_release_recursive>
 8004826:	bf00      	nop
 8004828:	20000898 	.word	0x20000898

0800482c <_malloc_usable_size_r>:
 800482c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004830:	1f18      	subs	r0, r3, #4
 8004832:	2b00      	cmp	r3, #0
 8004834:	bfbc      	itt	lt
 8004836:	580b      	ldrlt	r3, [r1, r0]
 8004838:	18c0      	addlt	r0, r0, r3
 800483a:	4770      	bx	lr

0800483c <__retarget_lock_acquire_recursive>:
 800483c:	4770      	bx	lr

0800483e <__retarget_lock_release_recursive>:
 800483e:	4770      	bx	lr

08004840 <_init>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	bf00      	nop
 8004844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004846:	bc08      	pop	{r3}
 8004848:	469e      	mov	lr, r3
 800484a:	4770      	bx	lr

0800484c <_fini>:
 800484c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800484e:	bf00      	nop
 8004850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004852:	bc08      	pop	{r3}
 8004854:	469e      	mov	lr, r3
 8004856:	4770      	bx	lr
